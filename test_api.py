#!/usr/bin/env python3
"""
QRes OS 4 - Comprehensive API Test Script
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Ç–æ—à–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API
"""
import asyncio
import httpx
import json
import time
from typing import Dict, List, Optional

BASE_URL = "http://localhost:8000"

class TestResults:
    def __init__(self):
        self.total_tests = 0
        self.passed_tests = 0
        self.failed_tests = 0
        self.warnings = 0
        self.test_details = []
    
    def add_test(self, name: str, passed: bool, details: str = "", warning: bool = False):
        self.total_tests += 1
        if passed:
            self.passed_tests += 1
            status = "‚úÖ"
        else:
            self.failed_tests += 1
            status = "‚ùå"
        
        if warning:
            self.warnings += 1
            status = "‚ö†Ô∏è"
        
        self.test_details.append(f"{status} {name}: {details}")
        print(f"{status} {name}: {details}")
    
    def print_summary(self):
        print("=" * 60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.total_tests}")
        print(f"–£—Å–ø–µ—à–Ω–æ: {self.passed_tests} ‚úÖ")
        print(f"–ù–µ—É–¥–∞—á–Ω–æ: {self.failed_tests} ‚ùå")
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {self.warnings} ‚ö†Ô∏è")
        success_rate = (self.passed_tests / self.total_tests * 100) if self.total_tests > 0 else 0
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if self.failed_tests > 0:
            print("\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´:")
            for detail in self.test_details:
                if detail.startswith("‚ùå"):
                    print(f"  {detail}")

results = TestResults()

async def comprehensive_api_test():
    """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Ç–æ—à–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –±–æ–ª—å—à–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –±–µ–∑ –ø—Ä–æ–∫—Å–∏
    timeout = httpx.Timeout(30.0, connect=60.0)
    async with httpx.AsyncClient(timeout=timeout, proxies={}) as client:
        print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï QRes OS 4 API")
        print("=" * 60)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        auth_token = None
        auth_headers = {}
        created_ids = {
            'location': None,
            'category': None,
            'dish': None,
            'ingredient': None,
            'table': None,
            'order': None,
            'user': None,
            'payment_method': None
        }
        
        # 1. –ë–ê–ó–û–í–´–ï –ü–†–û–í–ï–†–ö–ò
        print("\nüîç 1. –ë–ê–ó–û–í–´–ï –ü–†–û–í–ï–†–ö–ò –°–ï–†–í–ï–†–ê")
        print("-" * 40)
        
        # Health Check
        try:
            start_time = time.time()
            response = await client.get(f"{BASE_URL}/health")
            response_time = time.time() - start_time
            
            if response.status_code == 200:
                data = response.json()
                results.add_test(
                    "Health Check", 
                    True, 
                    f"status={data['status']}, uptime={data['uptime']:.2f}s, response_time={response_time:.3f}s"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                expected_fields = ['status', 'version', 'database', 'uptime']
                missing_fields = [field for field in expected_fields if field not in data]
                if missing_fields:
                    results.add_test(
                        "Health Check Structure", 
                        False, 
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}"
                    )
                else:
                    results.add_test("Health Check Structure", True, "–í—Å–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    
            else:
                results.add_test("Health Check", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                
        except Exception as e:
            results.add_test("Health Check", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        try:
            response = await client.get(f"{BASE_URL}/docs")
            if response.status_code == 200:
                results.add_test("Swagger UI", True, "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                results.add_test("Swagger UI", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("Swagger UI", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ReDoc
        try:
            response = await client.get(f"{BASE_URL}/redoc")
            if response.status_code == 200:
                results.add_test("ReDoc UI", True, "ReDoc –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                results.add_test("ReDoc UI", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("ReDoc UI", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAPI —Å—Ö–µ–º—ã
        try:
            response = await client.get(f"{BASE_URL}/openapi.json")
            if response.status_code == 200:
                schema = response.json()
                results.add_test("OpenAPI Schema", True, f"–°—Ö–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(schema.get('paths', {}))} –ø—É—Ç–µ–π")
            else:
                results.add_test("OpenAPI Schema", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("OpenAPI Schema", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
        print("\nüîê 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
        print("-" * 40)
        
        
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            login_data = {"username": "admin", "password": "wrong_password"}
            response = await client.post(f"{BASE_URL}/auth/login", json=login_data)
            if response.status_code == 401:
                results.add_test("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å", True, "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401 –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è")
            else:
                results.add_test("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            login_data = {"username": "admin", "password": "admin123"}
            response = await client.post(f"{BASE_URL}/auth/login", json=login_data)
            if response.status_code == 200:
                token_data = response.json()
                auth_token = token_data['access_token']
                auth_headers = {"Authorization": f"Bearer {auth_token}"}
                results.add_test("–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", True, f"–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, expires_in={token_data.get('expires_in')}s")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–∫–µ–Ω–∞
                expected_fields = ['access_token', 'token_type', 'expires_in']
                missing_fields = [field for field in expected_fields if field not in token_data]
                if missing_fields:
                    results.add_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ–∫–µ–Ω–∞", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
                else:
                    results.add_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ–∫–µ–Ω–∞", True, "–í—Å–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            else:
                results.add_test("–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                return  # –ë–µ–∑ —Ç–æ–∫–µ–Ω–∞ –¥–∞–ª—å—à–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è
        except Exception as e:
            results.add_test("–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            response = await client.get(f"{BASE_URL}/auth/me", headers=auth_headers)
            if response.status_code == 200:
                user_data = response.json()
                results.add_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", True, f"user={user_data['username']}, role={user_data['role']}")
            else:
                results.add_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        try:
            wrong_headers = {"Authorization": "Bearer invalid_token"}
            response = await client.get(f"{BASE_URL}/auth/me", headers=wrong_headers)
            if response.status_code == 401:
                results.add_test("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω", True, "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401 –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è")
            else:
                results.add_test("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # PIN-–∫–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        try:
            pin_data = {"username": "admin", "pin_code": "1234"}
            response = await client.post(f"{BASE_URL}/auth/login/pin", json=pin_data)
            if response.status_code in [200, 401]:  # 401 –æ–∂–∏–¥–∞–µ—Ç—Å—è –µ—Å–ª–∏ PIN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                results.add_test("PIN –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", True, f"–≠–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–¥: {response.status_code}")
            else:
                results.add_test("PIN –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("PIN –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
        print("\nüë• 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        print("-" * 40)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            response = await client.get(f"{BASE_URL}/users/", headers=auth_headers)
            if response.status_code == 200:
                users_data = response.json()
                results.add_test("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", True, f"–í—Å–µ–≥–æ: {users_data['total']}, –ø–æ–ª—É—á–µ–Ω–æ: {len(users_data['users'])}")
            else:
                results.add_test("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
        try:
            response = await client.get(f"{BASE_URL}/users/1", headers=auth_headers)
            if response.status_code == 200:
                user = response.json()
                results.add_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID", True, f"user_id=1, username={user.get('username')}")
            else:
                results.add_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π PIN-–∫–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
            unique_pin = str(int(time.time()) % 10000).zfill(4)
            new_user_data = {
                "username": f"test_user_{int(time.time())}",
                "password": "test123456",
                "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "role": "waiter",
                "phone": "+7900123456",
                "pin_code": unique_pin
            }
            response = await client.post(f"{BASE_URL}/users/", json=new_user_data, headers=auth_headers)
            if response.status_code == 201:
                created_user = response.json()
                created_ids['user'] = created_user['id']
                results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", True, f"user_id={created_user['id']}, username={created_user['username']}")
            else:
                results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}, –æ—Ç–≤–µ—Ç: {response.text}")
        except Exception as e:
            results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # 4. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ö–ê–¶–ò–ô
        print("\nüè¢ 4. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ö–ê–¶–ò–ô")
        print("-" * 40)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–π
        try:
            response = await client.get(f"{BASE_URL}/locations/", headers=auth_headers)
            if response.status_code == 200:
                locations_data = response.json()
                results.add_test("–°–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π", True, f"–í—Å–µ–≥–æ: {locations_data['total']}")
            else:
                results.add_test("–°–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–°–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏
        try:
            new_location_data = {
                "name": f"–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è {int(time.time())}",
                "address": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å, 123",
                "phone": "+7900123456",
                "is_active": True
            }
            response = await client.post(f"{BASE_URL}/locations/", json=new_location_data, headers=auth_headers)
            if response.status_code in [200, 201]:  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∏ 200 –∏ 201
                created_location = response.json()
                created_ids['location'] = created_location['id']
                results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏", True, f"location_id={created_location['id']} (–∫–æ–¥: {response.status_code})")
            else:
                results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # 5. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–û–õ–û–í
        print("\nü™ë 5. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–û–õ–û–í")
        print("-" * 40)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–æ–ª–æ–≤
        try:
            response = await client.get(f"{BASE_URL}/tables/", headers=auth_headers)
            if response.status_code == 200:
                tables_data = response.json()
                results.add_test("–°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–æ–≤", True, f"–í—Å–µ–≥–æ: {tables_data['total']}")
            else:
                results.add_test("–°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–æ–≤", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–æ–≤", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
        if created_ids['location']:
            try:
                new_table_data = {
                    "number": int(time.time()) % 1000,  # int –≤–º–µ—Å—Ç–æ string
                    "seats": 4,  # seats –≤–º–µ—Å—Ç–æ capacity
                    "location_id": created_ids['location'],
                    "is_active": True
                }
                response = await client.post(f"{BASE_URL}/tables/", json=new_table_data, headers=auth_headers)
                if response.status_code in [200, 201]:  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∏ 200 –∏ 201
                    created_table = response.json()
                    created_ids['table'] = created_table['id']
                    results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–∞", True, f"table_id={created_table['id']}, number={created_table['number']} (–∫–æ–¥: {response.status_code})")
                else:
                    results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–∞", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}, –æ—Ç–≤–µ—Ç: {response.text}")
            except Exception as e:
                results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # 6. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô
        print("\nüìÇ 6. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô")
        print("-" * 40)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        try:
            response = await client.get(f"{BASE_URL}/categories/", headers=auth_headers)
            if response.status_code == 200:
                categories_data = response.json()
                results.add_test("–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", True, f"–í—Å–µ–≥–æ: {categories_data['total']}")
            else:
                results.add_test("–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        try:
            new_category_data = {
                "name": f"–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è {int(time.time())}",
                "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                "is_active": True,
                "sort_order": 99
            }
            response = await client.post(f"{BASE_URL}/categories/", json=new_category_data, headers=auth_headers)
            if response.status_code in [200, 201]:  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∏ 200 –∏ 201
                created_category = response.json()
                created_ids['category'] = created_category['id']
                results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", True, f"category_id={created_category['id']} (–∫–æ–¥: {response.status_code})")
            else:
                results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # 7. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–õ–Æ–î
        print("\nüçΩÔ∏è 7. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–õ–Æ–î")
        print("-" * 40)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª—é–¥
        try:
            response = await client.get(f"{BASE_URL}/dishes/", headers=auth_headers)
            if response.status_code == 200:
                dishes_data = response.json()
                results.add_test("–°–ø–∏—Å–æ–∫ –±–ª—é–¥", True, f"–í—Å–µ–≥–æ: {dishes_data['total']}")
            else:
                results.add_test("–°–ø–∏—Å–æ–∫ –±–ª—é–¥", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–°–ø–∏—Å–æ–∫ –±–ª—é–¥", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞
        if created_ids['category']:
            try:
                new_dish_data = {
                    "name": f"–¢–µ—Å—Ç–æ–≤–æ–µ –±–ª—é–¥–æ {int(time.time())}",
                    "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–ª—é–¥–∞",
                    "price": 299.99,
                    "category_id": created_ids['category'],
                    "is_available": True,
                    "cooking_time": 15,
                    "calories": 350,
                    "weight": 250
                }
                response = await client.post(f"{BASE_URL}/dishes/", json=new_dish_data, headers=auth_headers)
                if response.status_code in [200, 201]:  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∏ 200 –∏ 201
                    created_dish = response.json()
                    created_ids['dish'] = created_dish['id']
                    results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥–∞", True, f"dish_id={created_dish['id']}, price={created_dish['price']} (–∫–æ–¥: {response.status_code})")
                else:
                    results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥–∞", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}, –æ—Ç–≤–µ—Ç: {response.text}")
            except Exception as e:
                results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –ü—É–±–ª–∏—á–Ω–æ–µ –º–µ–Ω—é
        try:
            response = await client.get(f"{BASE_URL}/dishes/menu")
            if response.status_code == 200:
                menu_data = response.json()
                results.add_test("–ü—É–±–ª–∏—á–Ω–æ–µ –º–µ–Ω—é", True, f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(menu_data.get('categories', []))}")
            else:
                results.add_test("–ü—É–±–ª–∏—á–Ω–æ–µ –º–µ–Ω—é", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–ü—É–±–ª–∏—á–Ω–æ–µ –º–µ–Ω—é", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # 8. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–ì–†–ï–î–ò–ï–ù–¢–û–í
        print("\nü•ï 8. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–ì–†–ï–î–ò–ï–ù–¢–û–í")
        print("-" * 40)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        try:
            response = await client.get(f"{BASE_URL}/ingredients/", headers=auth_headers)
            if response.status_code == 200:
                ingredients_data = response.json()
                results.add_test("–°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤", True, f"–í—Å–µ–≥–æ: {ingredients_data['total']}")
            else:
                results.add_test("–°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
        try:
            new_ingredient_data = {
                "name": f"–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç {int(time.time())}",
                "unit": "—à—Ç",
                "cost_per_unit": 5.50,
                "current_stock": 100,
                "min_stock": 10,
                "is_active": True
            }
            response = await client.post(f"{BASE_URL}/ingredients/", json=new_ingredient_data, headers=auth_headers)
            if response.status_code in [200, 201]:  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∏ 200 –∏ 201
                created_ingredient = response.json()
                created_ids['ingredient'] = created_ingredient['id']
                results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞", True, f"ingredient_id={created_ingredient['id']} (–∫–æ–¥: {response.status_code})")
            else:
                results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # 9. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ü–û–°–û–ë–û–í –û–ü–õ–ê–¢–´
        print("\nüí≥ 9. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ü–û–°–û–ë–û–í –û–ü–õ–ê–¢–´")
        print("-" * 40)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
        try:
            response = await client.get(f"{BASE_URL}/payment-methods/", headers=auth_headers)
            if response.status_code == 200:
                payment_data = response.json()
                results.add_test("–°–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã", True, f"–í—Å–µ–≥–æ: {payment_data['total']}")
            else:
                results.add_test("–°–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–°–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # 10. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ö–ê–ó–û–í
        print("\nüìã 10. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ö–ê–ó–û–í")
        print("-" * 40)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        try:
            response = await client.get(f"{BASE_URL}/orders/", headers=auth_headers)
            if response.status_code == 200:
                orders_data = response.json()
                results.add_test("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", True, f"–í—Å–µ–≥–æ: {orders_data['total']}")
            else:
                results.add_test("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        if created_ids['table'] and created_ids['dish']:
            try:
                new_order_data = {
                    "table_id": created_ids['table'],
                    "items": [
                        {
                            "dish_id": created_ids['dish'],
                            "quantity": 2,
                            "comment": "–ë–µ–∑ —Å–æ–ª–∏"  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–µ –Ω–∞ comment
                        }
                    ],
                    "notes": "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑"  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–µ –Ω–∞ notes
                }
                response = await client.post(f"{BASE_URL}/orders/", json=new_order_data, headers=auth_headers)
                if response.status_code == 201:
                    created_order = response.json()
                    created_ids['order'] = created_order['id']
                    results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞", True, f"order_id={created_order['id']}, items={len(created_order.get('items', []))}")
                else:
                    results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            except Exception as e:
                results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # 11. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–û–ö –ò –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í
        print("\n‚ö†Ô∏è 11. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–û–ö –ò –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í")
        print("-" * 40)
        
        # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        try:
            response = await client.get(f"{BASE_URL}/nonexistent")
            if response.status_code == 404:
                results.add_test("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç", True, "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404")
            else:
                results.add_test("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –ó–∞–ø—Ä–æ—Å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        try:
            response = await client.get(f"{BASE_URL}/users/")
            if response.status_code in [401, 403]:  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∏ 401 –∏ 403
                results.add_test("–ó–∞–ø—Ä–æ—Å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", True, f"–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {response.status_code}")
            else:
                results.add_test("–ó–∞–ø—Ä–æ—Å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–ó–∞–ø—Ä–æ—Å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ—Å—É—Ä—Å
        try:
            response = await client.get(f"{BASE_URL}/users/99999", headers=auth_headers)
            if response.status_code == 404:
                results.add_test("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", True, "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404")
            else:
                results.add_test("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        try:
            invalid_user_data = {
                "username": "",  # –ü—É—Å—Ç–æ–µ –∏–º—è
                "password": "123",  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å
                "full_name": "",
                "role": "invalid_role"
            }
            response = await client.post(f"{BASE_URL}/users/", json=invalid_user_data, headers=auth_headers)
            if response.status_code == 422:
                results.add_test("–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", True, "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 422 –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            else:
                results.add_test("–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            results.add_test("–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # 12. –û–ß–ò–°–¢–ö–ê –°–û–ó–î–ê–ù–ù–´–• –î–ê–ù–ù–´–•
        print("\nüßπ 12. –û–ß–ò–°–¢–ö–ê –°–û–ó–î–ê–ù–ù–´–• –î–ê–ù–ù–´–•")
        print("-" * 40)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        cleanup_order = ['order', 'dish', 'ingredient', 'table', 'category', 'location', 'user']
        
        for resource_type in cleanup_order:
            resource_id = created_ids.get(resource_type)
            if resource_id:
                try:
                    endpoint_map = {
                        'user': 'users',
                        'location': 'locations', 
                        'category': 'categories',
                        'dish': 'dishes',
                        'ingredient': 'ingredients',
                        'table': 'tables',
                        'order': 'orders'
                    }
                    endpoint = endpoint_map.get(resource_type)
                    if endpoint:
                        response = await client.delete(f"{BASE_URL}/{endpoint}/{resource_id}", headers=auth_headers)
                        if response.status_code in [200, 204]:
                            results.add_test(f"–£–¥–∞–ª–µ–Ω–∏–µ {resource_type}", True, f"ID={resource_id}")
                        else:
                            results.add_test(f"–£–¥–∞–ª–µ–Ω–∏–µ {resource_type}", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                except Exception as e:
                    results.add_test(f"–£–¥–∞–ª–µ–Ω–∏–µ {resource_type}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        results.print_summary()
        
        print("\nüìñ –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:8000/docs")
        print("üîÑ ReDoc –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/redoc")

if __name__ == "__main__":
    asyncio.run(comprehensive_api_test())
