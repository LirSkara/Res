#!/usr/bin/env python3
"""
QRes OS 4 - API Test Script
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API
"""
import asyncio
import httpx
import json

BASE_URL = "http://localhost:8000"

async def test_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API"""
    async with httpx.AsyncClient() as client:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QRes OS 4 API...")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ health
        try:
            response = await client.get(f"{BASE_URL}/health")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Health Check: {data['status']} (uptime: {data['uptime']}s)")
            else:
                print(f"‚ùå Health Check failed: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Health Check error: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        try:
            response = await client.get(f"{BASE_URL}/docs")
            if response.status_code == 200:
                print("‚úÖ Swagger UI –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ùå Swagger UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Swagger UI error: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏
            login_data = {
                "username": "admin",
                "password": "admin123"
            }
            response = await client.post(
                f"{BASE_URL}/auth/login",
                data=login_data
            )
            if response.status_code == 200:
                token_data = response.json()
                print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
                headers = {"Authorization": f"Bearer {token_data['access_token']}"}
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                me_response = await client.get(f"{BASE_URL}/auth/me", headers=headers)
                if me_response.status_code == 200:
                    user_data = me_response.json()
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['username']}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω)
                users_response = await client.get(f"{BASE_URL}/users/", headers=headers)
                if users_response.status_code == 200:
                    users_data = users_response.json()
                    print(f"‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_data['total']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞—Ü–∏–π
                locations_response = await client.get(f"{BASE_URL}/locations/", headers=headers)
                if locations_response.status_code == 200:
                    locations_data = locations_response.json()
                    print(f"‚úÖ –õ–æ–∫–∞—Ü–∏–∏: {locations_data['total']} –ª–æ–∫–∞—Ü–∏–π")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                categories_response = await client.get(f"{BASE_URL}/categories/", headers=headers)
                if categories_response.status_code == 200:
                    categories_data = categories_response.json()
                    print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories_data['total']} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –º–µ–Ω—é
                menu_response = await client.get(f"{BASE_URL}/dishes/menu")
                if menu_response.status_code == 200:
                    menu_data = menu_response.json()
                    print(f"‚úÖ –ü—É–±–ª–∏—á–Ω–æ–µ –º–µ–Ω—é: {len(menu_data['categories'])} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
                payment_response = await client.get(f"{BASE_URL}/payment-methods/", headers=headers)
                if payment_response.status_code == 200:
                    payment_data = payment_response.json()
                    print(f"‚úÖ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã: {payment_data['total']} –º–µ—Ç–æ–¥–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
                ingredients_response = await client.get(f"{BASE_URL}/ingredients/", headers=headers)
                if ingredients_response.status_code == 200:
                    ingredients_data = ingredients_response.json()
                    print(f"‚úÖ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {ingredients_data['total']} –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤")
                
            else:
                print(f"‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        
        print("=" * 50)
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("\nüìñ –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:8000/docs")
        print("üîÑ ReDoc –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/redoc")

if __name__ == "__main__":
    asyncio.run(test_api())
