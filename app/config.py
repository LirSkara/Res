"""
QRes OS 4 - Configuration Management
–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
from functools import lru_cache
from typing import List
from pydantic_settings import BaseSettings
from pydantic import validator
import os


class Settings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    
    # Environment
    environment: str = "development"  # development, staging, production
    
    # Database
    database_url: str = "sqlite+aiosqlite:///./app.db"
    
    # Security
    secret_key: str = "your-super-secret-key-change-in-production"
    algorithm: str = "HS256"
    access_token_expire_minutes: int = 30
    refresh_token_expire_days: int = 7
    
    # JWT Security improvements
    jwt_issuer: str = "qres-os-4"
    jwt_audience: str = "qres-os-4-users"
    require_fresh_token_minutes: int = 15  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è fresh token –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    
    # CRITICAL: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    @validator('secret_key')
    def validate_secret_key(cls, v):
        if v == "your-super-secret-key-change-in-production":
            import os
            if os.getenv("ENVIRONMENT") == "production":
                raise ValueError("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ò–∑–º–µ–Ω–∏—Ç–µ secret_key –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!")
            else:
                print("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π SECRET_KEY. –ò–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º!")
        if len(v) < 32:
            raise ValueError("üîí –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 32 —Å–∏–º–≤–æ–ª–æ–≤")
        if len(v) < 64:
            print("üîê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª–∏–Ω–æ–π 64+ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        return v
    
    # Server
    host: str = "0.0.0.0"
    port: int = 8000
    debug: bool = True
    reload: bool = True
    
    # CORS - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º origins –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
    cors_origins: List[str] = [
        "http://localhost:5173", 
        "http://127.0.0.1:5173", 
        "http://localhost:3000", 
        "http://127.0.0.1:3000",
        "http://localhost:8080",
        "http://127.0.0.1:8080"
        # –£–ë–†–ê–õ–ò "*" - –æ–Ω –Ω–µ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å allow_credentials=True
    ]
    
    # Trusted Hosts - –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ö–æ—Å—Ç—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç Host Header Injection
    allowed_hosts: List[str] = [
        "localhost",
        "127.0.0.1", 
        "0.0.0.0",           # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        "192.168.1.100",     # –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –¥–ª—è QR –∫–æ–¥–æ–≤
        "*.localhost"        # –ü–æ–¥–¥–æ–º–µ–Ω—ã localhost
    ]
    
    # QR Code
    qr_base_url: str = "http://192.168.1.100:8000/menu"
    
    # File Upload
    upload_dir: str = "./uploads"
    max_file_size: int = 5242880  # 5MB
    
    # Request size limits
    max_request_size: int = 10 * 1024 * 1024  # 10MB –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞
    max_json_size: int = 1024 * 1024  # 1MB –¥–ª—è JSON –∑–∞–ø—Ä–æ—Å–æ–≤
    
    # Security - DDoS Protection
    rate_limit_max_requests: int = 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    rate_limit_window: int = 60  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 –º–∏–Ω—É—Ç–∞)
    rate_limit_block_duration: int = 600  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (10 –º–∏–Ω—É—Ç)
    disable_rate_limit_in_debug: bool = True  # –û—Ç–∫–ª—é—á–∞—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    
    # Restaurant
    restaurant_name: str = "QRes OS 4 Restaurant"
    restaurant_timezone: str = "Europe/Moscow"
    
    @validator('cors_origins', pre=True, allow_reuse=True)
    def parse_cors_origins(cls, v) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ CORS origins –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Å–ø–∏—Å–∫–∞"""
        if isinstance(v, str):
            # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ JSON —Å–∫–æ–±–∫–∏ –∏ –∫–∞–≤—ã—á–∫–∏
            v = v.strip().strip('[]"\'')
            if not v:  # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return [
                    "http://localhost:5173", 
                    "http://127.0.0.1:5173", 
                    "http://localhost:3000", 
                    "http://127.0.0.1:3000",
                    "http://localhost:8080",
                    "http://127.0.0.1:8080"
                ]
            origins = [origin.strip().strip('"\'') for origin in v.split(",")]
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            origins = [origin for origin in origins if origin]
            if os.getenv("DEBUG", "false").lower() == "true":
                print(f"üîß CORS Origins –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏: {origins}")
            return origins
        elif isinstance(v, list):
            if os.getenv("DEBUG", "false").lower() == "true":
                print(f"üîß CORS Origins –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞–∫ —Å–ø–∏—Å–æ–∫: {v}")
            return v
        else:
            if os.getenv("DEBUG", "false").lower() == "true":
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø CORS Origins: {type(v)}, –∑–Ω–∞—á–µ–Ω–∏–µ: {v}")
            return [str(v)] if v else []
    
    @validator('upload_dir')
    def create_upload_dir(cls, v):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫"""
        os.makedirs(v, exist_ok=True)
        return v
    
    class Config:
        env_file = ".env"
        case_sensitive = False


@lru_cache()
def get_settings() -> Settings:
    """Singleton –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return Settings()


# –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = get_settings()
