"""
QRes OS 4 - WebSocket Router
WebSocket –¥–ª—è real-time –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º–∏ –∏ –∫—É—Ö–Ω–µ–π
"""
from typing import Dict, List
from fastapi import APIRouter, WebSocket, WebSocketDisconnect, Depends, HTTPException, status
from fastapi.security import HTTPBearer
from sqlalchemy.ext.asyncio import AsyncSession
import json
import asyncio
from datetime import datetime

from ..deps import DatabaseSession
from ..services.auth import AuthService
from ..models import User, UserRole
from ..schemas import OrderWebSocketMessage


router = APIRouter()
security = HTTPBearer()


class ConnectionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self):
        # –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: user_id -> websocket
        self.active_connections: Dict[int, WebSocket] = {}
        # –ì—Ä—É–ø–ø—ã –ø–æ —Ä–æ–ª—è–º
        self.waiters: Dict[int, WebSocket] = {}
        self.kitchen: Dict[int, WebSocket] = {}
        self.admins: Dict[int, WebSocket] = {}
    
    async def connect(self, websocket: WebSocket, user: User):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await websocket.accept()
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if user.id in self.active_connections:
            try:
                await self.active_connections[user.id].close()
            except:
                pass
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        self.active_connections[user.id] = websocket
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É –ø–æ —Ä–æ–ª–∏
        if user.role == UserRole.WAITER:
            self.waiters[user.id] = websocket
        elif user.role == UserRole.KITCHEN:
            self.kitchen[user.id] = websocket
        elif user.role == UserRole.ADMIN:
            self.admins[user.id] = websocket
        
        print(f"üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} ({user.role}) –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ WebSocket")
    
    def disconnect(self, user_id: int):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.active_connections:
            del self.active_connections[user_id]
        
        if user_id in self.waiters:
            del self.waiters[user_id]
        
        if user_id in self.kitchen:
            del self.kitchen[user_id]
        
        if user_id in self.admins:
            del self.admins[user_id]
        
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç WebSocket")
    
    async def send_personal_message(self, message: str, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if user_id in self.active_connections:
            try:
                await self.active_connections[user_id].send_text(message)
            except:
                self.disconnect(user_id)
    
    async def send_to_waiters(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º"""
        disconnected = []
        for user_id, websocket in self.waiters.items():
            try:
                await websocket.send_text(message)
            except:
                disconnected.append(user_id)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö
        for user_id in disconnected:
            self.disconnect(user_id)
    
    async def send_to_kitchen(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–π –∫—É—Ö–Ω–µ"""
        disconnected = []
        for user_id, websocket in self.kitchen.items():
            try:
                await websocket.send_text(message)
            except:
                disconnected.append(user_id)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö
        for user_id in disconnected:
            self.disconnect(user_id)
    
    async def send_to_admins(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        disconnected = []
        for user_id, websocket in self.admins.items():
            try:
                await websocket.send_text(message)
            except:
                disconnected.append(user_id)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö
        for user_id in disconnected:
            self.disconnect(user_id)
    
    async def broadcast(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º"""
        disconnected = []
        for user_id, websocket in self.active_connections.items():
            try:
                await websocket.send_text(message)
            except:
                disconnected.append(user_id)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö
        for user_id in disconnected:
            self.disconnect(user_id)
    
    def get_active_users(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return {
            "total": len(self.active_connections),
            "waiters": len(self.waiters),
            "kitchen": len(self.kitchen),
            "admins": len(self.admins)
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
manager = ConnectionManager()


async def get_current_user_ws(
    websocket: WebSocket,
    token: str,
    db: AsyncSession
) -> User:
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è WebSocket"""
    try:
        token_data = AuthService.verify_token(token)
        user = await AuthService.get_user_by_id(db, token_data.user_id)
        
        if not user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        if not user.is_active:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
            )
        
        return user
    
    except Exception as e:
        await websocket.close(code=status.WS_1008_POLICY_VIOLATION)
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        )


@router.websocket("/orders")
async def websocket_orders(
    websocket: WebSocket,
    token: str,
    db: DatabaseSession
):
    """
    WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - token: JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    –°–æ–±—ã—Ç–∏—è:
    - order_created: –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω
    - order_updated: –ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω
    - order_status_changed: –ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    - item_status_changed: –ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
    """
    
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    user = await get_current_user_ws(websocket, token, db)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await manager.connect(websocket, user)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = {
            "type": "connected",
            "message": f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!",
            "role": user.role.value,
            "timestamp": datetime.utcnow().isoformat()
        }
        await websocket.send_text(json.dumps(welcome_message, ensure_ascii=False))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        while True:
            try:
                # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                data = await websocket.receive_text()
                message_data = json.loads(data)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                message_type = message_data.get("type")
                
                if message_type == "ping":
                    # –û—Ç–≤–µ—Ç –Ω–∞ ping
                    pong_message = {
                        "type": "pong",
                        "timestamp": datetime.utcnow().isoformat()
                    }
                    await websocket.send_text(json.dumps(pong_message))
                
                elif message_type == "get_stats":
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    stats = manager.get_active_users()
                    stats_message = {
                        "type": "stats",
                        "data": stats,
                        "timestamp": datetime.utcnow().isoformat()
                    }
                    await websocket.send_text(json.dumps(stats_message, ensure_ascii=False))
                
                elif message_type == "broadcast" and user.role == UserRole.ADMIN:
                    # –®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
                    broadcast_message = {
                        "type": "broadcast",
                        "message": message_data.get("message", ""),
                        "from": user.full_name,
                        "timestamp": datetime.utcnow().isoformat()
                    }
                    await manager.broadcast(json.dumps(broadcast_message, ensure_ascii=False))
                
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                    error_message = {
                        "type": "error",
                        "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}",
                        "timestamp": datetime.utcnow().isoformat()
                    }
                    await websocket.send_text(json.dumps(error_message, ensure_ascii=False))
            
            except json.JSONDecodeError:
                error_message = {
                    "type": "error",
                    "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON",
                    "timestamp": datetime.utcnow().isoformat()
                }
                await websocket.send_text(json.dumps(error_message, ensure_ascii=False))
            
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ WebSocket: {e}")
                break
    
    except WebSocketDisconnect:
        manager.disconnect(user.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        manager.disconnect(user.id)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class WebSocketNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket"""
    
    @staticmethod
    async def notify_order_created(order_id: int, table_number: int, waiter_name: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        message = {
            "type": "order_created",
            "data": {
                "order_id": order_id,
                "table_number": table_number,
                "waiter_name": waiter_name,
                "message": f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} –æ—Ç —Å—Ç–æ–ª–∏–∫–∞ {table_number}"
            },
            "timestamp": datetime.utcnow().isoformat()
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Ö–Ω–µ –∏ –∞–¥–º–∏–Ω–∞–º
        await manager.send_to_kitchen(json.dumps(message, ensure_ascii=False))
        await manager.send_to_admins(json.dumps(message, ensure_ascii=False))
    
    @staticmethod
    async def notify_order_ready(order_id: int, table_number: int, waiter_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞"""
        message = {
            "type": "order_ready",
            "data": {
                "order_id": order_id,
                "table_number": table_number,
                "message": f"–ó–∞–∫–∞–∑ #{order_id} –≥–æ—Ç–æ–≤! –°—Ç–æ–ª–∏–∫ {table_number}"
            },
            "timestamp": datetime.utcnow().isoformat()
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—É –∏ –∞–¥–º–∏–Ω–∞–º
        await manager.send_personal_message(json.dumps(message, ensure_ascii=False), waiter_id)
        await manager.send_to_admins(json.dumps(message, ensure_ascii=False))
    
    @staticmethod
    async def notify_order_status_changed(order_id: int, old_status: str, new_status: str, table_number: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        message = {
            "type": "order_status_changed",
            "data": {
                "order_id": order_id,
                "old_status": old_status,
                "new_status": new_status,
                "table_number": table_number,
                "message": f"–ó–∞–∫–∞–∑ #{order_id}: {old_status} ‚Üí {new_status}"
            },
            "timestamp": datetime.utcnow().isoformat()
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º
        await manager.broadcast(json.dumps(message, ensure_ascii=False))


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ä–æ—É—Ç–µ—Ä–∞—Ö
notifier = WebSocketNotifier()
