"""
QRes OS 4 - Main Application
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
"""
import time
import traceback
import logging
import asyncio
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException

from .config import settings
from .database import init_db, close_db
from .schemas import ErrorResponse, HealthCheck
from .logger import setup_request_logging  # –ò–º–ø–æ—Ä—Ç –ª–æ–≥–≥–µ—Ä–∞
from .security import setup_security  # –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
from .security_monitor import security_monitor, start_security_monitor_cleanup  # –ò–º–ø–æ—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
from .input_validation import InputSanitizer  # –ò–º–ø–æ—Ä—Ç —Å–∞–Ω–∏—Ç–∏–∑–∞—Ç–æ—Ä–∞

# –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤
from .routers import (
    auth, users, tables, locations, categories, dishes, 
    orders, order_items, ingredients, 
    paymentmethod, websocket
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –æ—à–∏–±–æ–∫
error_logger = logging.getLogger("qres_errors")
error_logger.setLevel(logging.WARNING)  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å ERROR –Ω–∞ WARNING

# –°–æ–∑–¥–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
if not error_logger.handlers:
    from pathlib import Path
    LOGS_DIR = Path(__file__).resolve().parent.parent / "logs"
    LOGS_DIR.mkdir(exist_ok=True)
    
    # –§–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫
    error_file_handler = logging.FileHandler(LOGS_DIR / "errors.log", encoding='utf-8')
    error_formatter = logging.Formatter(
        '%(asctime)s [%(levelname)s] %(name)s: %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    error_file_handler.setFormatter(error_formatter)
    error_logger.addHandler(error_file_handler)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if settings.debug:
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(error_formatter)
        error_logger.addHandler(console_handler)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    print("üöÄ QRes OS 4 –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await init_db()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    cleanup_task = asyncio.create_task(start_security_monitor_cleanup())
    print("üîí –ú–æ–Ω–∏—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω")
    
    yield
    
    # Shutdown
    print("üõë QRes OS 4 –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
    cleanup_task.cancel()
    try:
        await cleanup_task
    except asyncio.CancelledError:
        pass
    print("üîí –ú–æ–Ω–∏—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    await close_db()
    print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="QRes OS 4",
    description="–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –¥–ª—è uptime
start_time = time.time()


# CORS Middleware - –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
if settings.debug:
    print(f"üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è origins: {settings.cors_origins}")
    print(f"üîß Debug —Ä–µ–∂–∏–º: {settings.debug}")

app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–µ—Ç–æ–¥—ã
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–º–µ—Å—Ç–æ wildcard –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    allow_headers=[
        "Authorization",      # –¢–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        "Content-Type",       # –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        "Accept",            # Accept –∑–∞–≥–æ–ª–æ–≤–æ–∫
        "Origin",            # CORS origin
        "X-Requested-With",  # AJAX –∑–∞–ø—Ä–æ—Å—ã
        "X-CSRF-Token"       # CSRF –∑–∞—â–∏—Ç–∞
    ],
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç–≤–µ—Ç–∞
    expose_headers=[
        "Content-Length",    # –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        "X-Total-Count",     # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
        "X-Page-Count"       # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    ]
)

app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=settings.allowed_hosts  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ö–æ—Å—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API-–∑–∞–ø—Ä–æ—Å–æ–≤
setup_request_logging(app)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç DDoS-–∞—Ç–∞–∫)
setup_security(app)

# Middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
@app.middleware("http")
async def security_monitoring_middleware(request: Request, call_next):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –º–æ–Ω–∏—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_monitor.record_request(request)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ URL
        url_path = str(request.url.path).lower()
        if any(pattern in url_path for pattern in ['.env', '.git', 'admin', 'phpmyadmin']):
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            from .security_logger import security_logger
            security_logger.log_suspicious_activity(
                security_monitor.get_client_ip(request),
                str(request.url),
                request.method
            )
        
        response = await call_next(request)
        return response
        
    except HTTPException as e:
        # –ï—Å–ª–∏ IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
        raise e
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–ºunexpected –æ—à–∏–±–∫–∏ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        error_logger.error(f"Security monitoring error: {str(e)}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
        response = await call_next(request)
        return response

# Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def request_size_limit_middleware(request: Request, call_next):
    """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    content_length = request.headers.get("content-length")
    
    if content_length:
        content_length = int(content_length)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞
        if content_length > settings.max_request_size:
            return JSONResponse(
                status_code=413,
                content={
                    "detail": f"–†–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {settings.max_request_size // (1024*1024)}MB",
                    "error_code": "REQUEST_TOO_LARGE"
                }
            )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è JSON –∑–∞–ø—Ä–æ—Å–æ–≤
        content_type = request.headers.get("content-type", "")
        if "application/json" in content_type and content_length > settings.max_json_size:
            return JSONResponse(
                status_code=413,
                content={
                    "detail": f"–†–∞–∑–º–µ—Ä JSON –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {settings.max_json_size // 1024}KB",
                    "error_code": "JSON_TOO_LARGE"
                }
            )
    
    return await call_next(request)

# Middleware –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
@app.middleware("http")
async def security_headers_middleware(request: Request, call_next):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    response = await call_next(request)
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç XSS
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "DENY"  
    response.headers["X-XSS-Protection"] = "1; mode=block"
    
    # Referrer Policy –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
    response.headers["Referrer-Policy"] = "strict-origin-when-cross-origin"
    
    # Content Security Policy (CSP)
    csp = (
        "default-src 'self'; "
        "script-src 'self' 'unsafe-inline'; "
        "style-src 'self' 'unsafe-inline'; "
        "img-src 'self' data: https:; "
        "font-src 'self'; "
        "connect-src 'self'; "
        "frame-ancestors 'none'; "
        "base-uri 'self'; "
        "form-action 'self'"
    )
    response.headers["Content-Security-Policy"] = csp
    
    # Permissions Policy –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö APIs
    permissions = (
        "geolocation=(), "
        "microphone=(), "
        "camera=(), "
        "payment=(), "
        "usb=(), "
        "magnetometer=(), "
        "accelerometer=(), "
        "gyroscope=()"
    )
    response.headers["Permissions-Policy"] = permissions
    
    # HSTS –¥–ª—è HTTPS (–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω)
    if request.url.scheme == "https":
        response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains; preload"
    
    # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ dev —Ä–µ–∂–∏–º
    if settings.debug:
        response.headers["X-Environment"] = "development"
        response.headers["X-Debug-Mode"] = "enabled"
    else:
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å–∫—Ä—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é —Å–µ—Ä–≤–µ—Ä–∞
        response.headers.pop("server", None)
    
    return response


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(StarletteHTTPException)
async def http_exception_handler(request: Request, exc: StarletteHTTPException):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—à–∏–±–æ–∫"""
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –æ—à–∏–±–∫–∏ (4xx –∏ 5xx)
    if exc.status_code >= 400:
        error_logger.warning(
            f"HTTP –æ—à–∏–±–∫–∞ {exc.status_code}: {exc.detail} | "
            f"{request.method} {request.url} | "
            f"Client: {request.client.host if request.client else 'unknown'}"
        )
    
    return JSONResponse(
        status_code=exc.status_code,
        content=ErrorResponse(
            message=str(exc.detail),
            error_code=f"HTTP_{exc.status_code}"
        ).model_dump()
    )


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    error_details = exc.errors()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    error_logger.warning(
        f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {request.method} {request.url} | "
        f"Client: {request.client.host if request.client else 'unknown'} | "
        f"Errors: {error_details}"
    )
    
    return JSONResponse(
        status_code=422,
        content=ErrorResponse(
            message="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
            error_code="VALIDATION_ERROR",
            details={"errors": error_details}
        ).model_dump()
    )


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫"""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    error_traceback = traceback.format_exc()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
    request_info = {
        "method": request.method,
        "url": str(request.url),
        "client": request.client.host if request.client else "unknown",
        "user_agent": request.headers.get("user-agent", "unknown"),
        "headers": dict(request.headers) if settings.debug else {}
    }
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
    error_message = (
        f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {type(exc).__name__}: {str(exc)}\n"
        f"–ó–∞–ø—Ä–æ—Å: {request.method} {request.url}\n"
        f"–ö–ª–∏–µ–Ω—Ç: {request_info['client']}\n"
        f"User-Agent: {request_info['user_agent']}\n"
        f"Traceback:\n{error_traceback}"
    )
    
    error_logger.error(error_message)
    
    # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if settings.debug:
        return JSONResponse(
            status_code=500,
            content=ErrorResponse(
                message=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(exc)}",
                error_code="INTERNAL_SERVER_ERROR",
                details={
                    "error_type": type(exc).__name__,
                    "error_message": str(exc),
                    "request_info": request_info
                }
            ).model_dump()
        )
    else:
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
        return JSONResponse(
            status_code=500,
            content=ErrorResponse(
                message="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                error_code="INTERNAL_SERVER_ERROR"
            ).model_dump()
        )


# –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–æ—É—Ç—ã
@app.get("/", include_in_schema=False)
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "üçΩÔ∏è QRes OS 4 - Restaurant Management System",
        "version": "1.0.0",
        "docs": "/docs",
        "status": "running"
    }


@app.get("/health", response_model=HealthCheck, tags=["System"])
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    uptime = time.time() - start_time
    return HealthCheck(
        status="healthy",
        version="1.0.0",
        database="connected",
        uptime=round(uptime, 2)
    )


@app.get("/debug/cors", tags=["Debug"])
async def debug_cors(request: Request):
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ)"""
    # –ó–∞—â–∏—Ç–∞: –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if not settings.debug:
        raise HTTPException(status_code=404, detail="Not found")
    
    origin = request.headers.get("origin", "–ù–µ —É–∫–∞–∑–∞–Ω")
    
    return {
        "message": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏ CORS",
        "configured_origins": settings.cors_origins,
        "allowed_hosts": settings.allowed_hosts,
        "request_origin": origin,
        "origin_allowed": origin in settings.cors_origins,
        "cors_config": {
            "allow_credentials": True,
            "allow_methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
            "allow_headers": [
                "Authorization", "Content-Type", "Accept", 
                "Origin", "X-Requested-With", "X-CSRF-Token"
            ],
            "expose_headers": ["Content-Length", "X-Total-Count", "X-Page-Count"]
        },
        "environment": settings.environment,
        "debug": settings.debug,
        "security_note": "‚ö†Ô∏è –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    }


@app.get("/debug/security", tags=["Debug"])
async def debug_security_stats(request: Request):
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ)"""
    # –ó–∞—â–∏—Ç–∞: –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if not settings.debug:
        raise HTTPException(status_code=404, detail="Not found")
    
    from .security_monitor import security_monitor
    
    stats = security_monitor.get_security_stats()
    
    return {
        "message": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "stats": stats,
        "blocked_ips": list(security_monitor.blocked_ips.keys()) if security_monitor.blocked_ips else [],
        "suspicious_requests_count": sum(security_monitor.suspicious_requests.values()),
        "environment": settings.environment,
        "debug": settings.debug,
        "security_note": "‚ö†Ô∏è –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    }


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(auth.router, prefix="/auth", tags=["Authentication"])
app.include_router(users.router, prefix="/users", tags=["Users"])
app.include_router(tables.router, prefix="/tables", tags=["Tables"])
app.include_router(locations.router, prefix="/locations", tags=["Locations"])
app.include_router(categories.router, prefix="/categories", tags=["Categories"])
app.include_router(dishes.router, prefix="/dishes", tags=["Dishes"])
app.include_router(orders.router, prefix="/orders", tags=["Orders"])
app.include_router(order_items.router, prefix="/orders", tags=["Order Items"])
app.include_router(ingredients.router, prefix="/ingredients", tags=["Ingredients"])
app.include_router(paymentmethod.router, prefix="/payment-methods", tags=["Payment Methods"])
app.include_router(websocket.router, prefix="/ws", tags=["WebSocket"])


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.reload,
        log_level="info"
    )
