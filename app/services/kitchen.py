"""
QRes OS 4 - Kitchen Service
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ö–æ–Ω–Ω—ã–º–∏ —Ü–µ—Ö–∞–º–∏ –∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –∑–∞–∫–∞–∑–æ–≤
"""
from typing import List, Optional, Dict
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, and_, or_
from sqlalchemy.orm import selectinload, joinedload
from datetime import datetime, timedelta
from decimal import Decimal

from ..models import Order, OrderItem, Table, Dish, User
from ..models.order import OrderStatus
from ..models.order_item import OrderItemStatus, KitchenDepartment
from ..deps import moscow_now


def moscow_now() -> datetime:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ (UTC+3)"""
    return datetime.utcnow() + timedelta(hours=3)


class KitchenService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ö–æ–Ω–Ω—ã–º–∏ —Ü–µ—Ö–∞–º–∏"""
    
    @staticmethod
    async def get_orders_for_department(
        department: KitchenDepartment, 
        db: AsyncSession,
        status_filter: Optional[List[OrderItemStatus]] = None
    ) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ü–µ—Ö–∞"""
        
        if status_filter is None:
            status_filter = [OrderItemStatus.IN_PREPARATION]
        
        query = select(OrderItem).options(
            joinedload(OrderItem.dish),
            joinedload(OrderItem.order).joinedload(Order.table)
        ).where(
            and_(
                OrderItem.department == department,
                OrderItem.status.in_(status_filter)
            )
        ).order_by(OrderItem.created_at.asc())
        
        result = await db.execute(query)
        items = result.scalars().all()
        
        kitchen_orders = []
        for item in items:
            kitchen_orders.append({
                'id': item.id,
                'order_id': item.order_id,
                'table_number': item.order.table.number if item.order.table else None,
                'dish_name': item.dish.name,
                'dish_image_url': item.dish.main_image_url,
                'quantity': item.quantity,
                'comment': item.comment,
                'status': item.status,
                'department': item.department,
                'estimated_preparation_time': item.estimated_preparation_time,
                'sent_to_kitchen_at': item.sent_to_kitchen_at,
                'created_at': item.created_at
            })
        
        return kitchen_orders
    
    @staticmethod
    async def update_item_status(
        item_id: int,
        new_status: OrderItemStatus,
        db: AsyncSession
    ) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞"""
        
        query = select(OrderItem).options(
            joinedload(OrderItem.order),
            joinedload(OrderItem.dish)
        ).where(OrderItem.id == item_id)
        
        result = await db.execute(query)
        item = result.scalar_one_or_none()
        
        if not item:
            return False
        
        old_status = item.status
        item.status = new_status
        current_time = datetime.utcnow()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        if new_status == OrderItemStatus.IN_PREPARATION:
            # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
            if not item.preparation_started_at:
                item.preparation_started_at = current_time
        elif new_status == OrderItemStatus.READY:
            item.ready_at = current_time
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
            if item.preparation_started_at:
                prep_time = int((current_time - item.preparation_started_at).total_seconds() / 60)
                item.actual_preparation_time = prep_time
        elif new_status == OrderItemStatus.SERVED:
            item.served_at = current_time
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–∑–∏—Ü–∏–π
        await KitchenService._update_order_status(item.order, db)
        
        await db.commit()
        return True
    
    @staticmethod
    async def _update_order_status(order: Order, db: AsyncSession) -> None:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–∑–∏—Ü–∏–π"""
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –±–ª—é–¥–∞—Ö
        query = select(OrderItem).options(
            joinedload(OrderItem.dish)
        ).where(OrderItem.order_id == order.id)
        result = await db.execute(query)
        items = result.scalars().all()
        
        if not items:
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ–∑–∏—Ü–∏–π
        item_statuses = [item.status for item in items]
        old_status = order.status
        
        # –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–¥–∞–Ω—ã
        if all(status == OrderItemStatus.SERVED for status in item_statuses):
            if order.status != OrderStatus.SERVED:
                order.status = OrderStatus.SERVED
                order.served_at = datetime.utcnow()
                if order.created_at:
                    order.time_to_serve = int((order.served_at - order.created_at).total_seconds() / 60)
        
        # –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã (–Ω–æ –µ—â–µ –Ω–µ –ø–æ–¥–∞–Ω—ã)
        elif all(status in [OrderItemStatus.READY, OrderItemStatus.SERVED] for status in item_statuses) and \
             any(status == OrderItemStatus.READY for status in item_statuses):
            if order.status != OrderStatus.READY:
                order.status = OrderStatus.READY
        
        # –ï—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –≥–æ—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è (—á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤)
        elif any(status == OrderItemStatus.READY for status in item_statuses):
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –≤ –æ–∂–∏–¥–∞–Ω–∏–∏, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤—ã–π
            if order.status == OrderStatus.PENDING:
                order.status = OrderStatus.READY
        
        # –ï—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏
        elif any(status == OrderItemStatus.IN_PREPARATION for status in item_statuses):
            if order.status == OrderStatus.PENDING:
                order.status = OrderStatus.PENDING  # –û—Å—Ç–∞–µ—Ç—Å—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if old_status != order.status:
            print(f"üîÑ –ó–∞–∫–∞–∑ #{order.id}: —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω —Å {old_status.value} –Ω–∞ {order.status.value}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            ready_items = [item for item in items if item.status == OrderItemStatus.READY]
            total_items = len(items)
            
            print(f"   üìä –ì–æ—Ç–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(ready_items)}/{total_items}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –≤—ã–≤–æ–¥–∏–º –∏—Ö —Å–ø–∏—Å–æ–∫
            if ready_items:
                ready_names = [item.dish.name if item.dish else f"–ü–æ–∑–∏—Ü–∏—è #{item.id}" for item in ready_items]
                print(f"   ‚úÖ –ì–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞: {', '.join(ready_names)}")
            
            # –ü–æ–∑–∏—Ü–∏–∏ –µ—â–µ –≤ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏
            in_prep_items = [item for item in items if item.status == OrderItemStatus.IN_PREPARATION]
            if in_prep_items:
                prep_names = [item.dish.name if item.dish else f"–ü–æ–∑–∏—Ü–∏—è #{item.id}" for item in in_prep_items]
                print(f"   üî• –ì–æ—Ç–æ–≤—è—Ç—Å—è: {', '.join(prep_names)}")
                
        # TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º
    
    @staticmethod
    async def get_order_progress(order_id: int, db: AsyncSession) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –±–ª—é–¥–∞—Ö
        query = select(Order).options(
            selectinload(Order.items).selectinload(OrderItem.dish)
        ).where(Order.id == order_id)
        
        result = await db.execute(query)
        order = result.scalar_one_or_none()
        
        if not order:
            return None
        
        items = order.items
        if not items:
            return {
                "order_id": order_id,
                "total_items": 0,
                "ready_items": 0,
                "in_preparation_items": 0,
                "served_items": 0,
                "progress_percentage": 0,
                "items_detail": []
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ–∑–∏—Ü–∏–π
        total_items = len(items)
        ready_items = len([item for item in items if item.status == OrderItemStatus.READY])
        in_prep_items = len([item for item in items if item.status == OrderItemStatus.IN_PREPARATION])
        served_items = len([item for item in items if item.status == OrderItemStatus.SERVED])
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–≥–æ—Ç–æ–≤—ã–µ + –ø–æ–¥–∞–Ω–Ω—ã–µ / –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        completed_items = ready_items + served_items
        progress_percentage = int((completed_items / total_items) * 100) if total_items > 0 else 0
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        items_detail = []
        for item in items:
            items_detail.append({
                "id": item.id,
                "dish_name": item.dish.name if item.dish else f"–ü–æ–∑–∏—Ü–∏—è #{item.id}",
                "quantity": item.quantity,
                "status": item.status.value,
                "preparation_started_at": item.preparation_started_at.isoformat() if item.preparation_started_at else None,
                "ready_at": item.ready_at.isoformat() if item.ready_at else None,
                "served_at": item.served_at.isoformat() if item.served_at else None,
                "estimated_time": item.estimated_preparation_time,
                "actual_time": item.actual_preparation_time
            })
        
        return {
            "order_id": order_id,
            "order_status": order.status.value,
            "total_items": total_items,
            "ready_items": ready_items,
            "in_preparation_items": in_prep_items,
            "served_items": served_items,
            "progress_percentage": progress_percentage,
            "items_detail": items_detail,
            "all_ready": ready_items == total_items and served_items == 0,  # –í—Å–µ –≥–æ—Ç–æ–≤–æ, –Ω–æ –Ω–µ –ø–æ–¥–∞–Ω–æ
            "partially_ready": ready_items > 0 and ready_items < total_items,  # –ß–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–æ
            "fully_served": served_items == total_items  # –í—Å–µ –ø–æ–¥–∞–Ω–æ
        }
    
    @staticmethod
    async def add_items_to_order(
        order_id: int,
        items_data: List[Dict],
        db: AsyncSession
    ) -> List[OrderItem]:
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        order_query = select(Order).where(Order.id == order_id)
        order_result = await db.execute(order_query)
        order = order_result.scalar_one_or_none()
        
        if not order:
            raise ValueError("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å (–∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
        if order.status in [OrderStatus.COMPLETED, OrderStatus.CANCELLED]:
            raise ValueError("–ù–µ–ª—å–∑—è –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑")
        
        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING, –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ –≤ IN_PROGRESS
        if order.status == OrderStatus.PENDING:
            order.status = OrderStatus.IN_PROGRESS
        
        new_items = []
        total_addition = Decimal('0.00')
        
        for item_data in items_data:
            # –ü–æ–ª—É—á–∞–µ–º –±–ª—é–¥–æ
            dish_query = select(Dish).where(Dish.id == item_data['dish_id'])
            dish_result = await db.execute(dish_query)
            dish = dish_result.scalar_one_or_none()
            
            if not dish or not dish.is_available:
                raise ValueError(f"–ë–ª—é–¥–æ —Å ID {item_data['dish_id']} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
            quantity = item_data['quantity']
            item_total = Decimal(str(dish.price)) * quantity
            total_addition += item_total
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∑–∞–∫–∞–∑–∞
            order_item = OrderItem(
                order_id=order.id,
                dish_id=dish.id,
                dish_variation_id=item_data.get('dish_variation_id'),
                quantity=quantity,
                price=Decimal(str(dish.price)),
                total=item_total,
                comment=item_data.get('comment'),
                status=OrderItemStatus.IN_PREPARATION,
                department=dish.department,
                estimated_preparation_time=dish.cooking_time,
                preparation_started_at=moscow_now()
            )
            
            db.add(order_item)
            new_items.append(order_item)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
        order.total_price += total_addition
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if order.status == OrderStatus.SERVED:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –ø–æ–¥–∞–Ω, –Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ DINING
            order.status = OrderStatus.DINING
        elif order.status == OrderStatus.READY:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –≥–æ—Ç–æ–≤, –Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ IN_PROGRESS
            order.status = OrderStatus.IN_PROGRESS
        elif order.status in [OrderStatus.DINING, OrderStatus.IN_PROGRESS, OrderStatus.PENDING]:
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å, –Ω–æ —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ –Ω–µ PENDING
            if order.status == OrderStatus.PENDING:
                order.status = OrderStatus.IN_PROGRESS
        
        await db.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        for item in new_items:
            await db.refresh(item)
        
        return new_items
    
    @staticmethod
    async def get_department_statistics(
        department: KitchenDepartment,
        db: AsyncSession,
        hours: int = 24
    ) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ü–µ—Ö—É"""
        
        since_time = datetime.utcnow() - timedelta(hours=hours)
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
        total_query = select(func.count(OrderItem.id)).where(
            and_(
                OrderItem.department == department,
                OrderItem.created_at >= since_time
            )
        )
        total_result = await db.execute(total_query)
        total_items = total_result.scalar()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_stats = {}
        for status in OrderItemStatus:
            status_query = select(func.count(OrderItem.id)).where(
                and_(
                    OrderItem.department == department,
                    OrderItem.status == status,
                    OrderItem.created_at >= since_time
                )
            )
            status_result = await db.execute(status_query)
            status_stats[f"{status.value}_items"] = status_result.scalar()
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        avg_time_query = select(func.avg(OrderItem.actual_preparation_time)).where(
            and_(
                OrderItem.department == department,
                OrderItem.actual_preparation_time.is_not(None),
                OrderItem.created_at >= since_time
            )
        )
        avg_time_result = await db.execute(avg_time_query)
        avg_preparation_time = avg_time_result.scalar()
        
        return {
            "department": department.value,
            "total_items": total_items,
            "average_preparation_time": int(avg_preparation_time) if avg_preparation_time else None,
            **status_stats
        }
    
    @staticmethod
    async def send_items_to_kitchen(
        order_id: int,
        item_ids: List[int],
        db: AsyncSession
    ) -> bool:
        """
        DEPRECATED: –§—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
        –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—é—Ç—Å—è —Å—Ä–∞–∑—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º IN_PREPARATION.
        """
        # –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ IN_PREPARATION, –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        return True

    @staticmethod
    async def get_all_kitchen_dishes(
        db: AsyncSession,
        department: Optional[KitchenDepartment] = None,
        status_filter: Optional[List[OrderItemStatus]] = None
    ) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–ª—é–¥–∞ –¥–ª—è –∫—É—Ö–Ω–∏ –∏–∑ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤"""
        
        # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        if status_filter is None:
            status_filter = [
                OrderItemStatus.IN_PREPARATION,
                OrderItemStatus.READY,
                OrderItemStatus.SERVED
            ]
        
        # –°—Ç—Ä–æ–∏–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = select(OrderItem).options(
            joinedload(OrderItem.dish),
            joinedload(OrderItem.order).joinedload(Order.table)
        ).where(
            OrderItem.status.in_(status_filter)
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ—Ö—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if department:
            query = query.where(OrderItem.department == department)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        query = query.order_by(OrderItem.created_at.asc())
        
        result = await db.execute(query)
        items = result.scalars().all()
        
        kitchen_dishes = []
        for item in items:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤ –≥–æ—Ç–æ–≤–∫–µ, –µ—Å–ª–∏ –±–ª—é–¥–æ –≥–æ—Ç–æ–≤–∏—Ç—Å—è
            preparation_time = None
            if item.status == OrderItemStatus.IN_PREPARATION and item.preparation_started_at:
                time_diff = moscow_now() - item.preparation_started_at
                preparation_time = int(time_diff.total_seconds() / 60)  # –≤ –º–∏–Ω—É—Ç–∞—Ö
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏, –µ—Å–ª–∏ –±–ª—é–¥–æ –≥–æ—Ç–æ–≤–æ
            actual_time = None
            if item.ready_at and item.preparation_started_at:
                time_diff = item.ready_at - item.preparation_started_at
                actual_time = int(time_diff.total_seconds() / 60)  # –≤ –º–∏–Ω—É—Ç–∞—Ö
            
            kitchen_dishes.append({
                'id': item.id,
                'order_id': item.order_id,
                'dish_name': item.dish.name,
                'quantity': item.quantity,
                'status': item.status.value,
                'department': item.department.value,
                'comment': item.comment,
                'estimated_preparation_time': item.dish.cooking_time,
                'actual_preparation_time': actual_time,
                'preparation_started_at': item.preparation_started_at.isoformat() if item.preparation_started_at else None,
                'ready_at': item.ready_at.isoformat() if item.ready_at else None,
                'served_at': item.served_at.isoformat() if item.served_at else None,
                'created_at': item.order.created_at.isoformat(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞, –∞ –Ω–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                'table_number': item.order.table.number if item.order.table else None,
                'current_preparation_time': preparation_time
            })
        
        return kitchen_dishes
