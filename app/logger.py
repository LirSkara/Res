"""
QRes OS 4 - API Request Logger
–ú–æ–¥—É–ª—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
"""
import os
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any

from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.types import ASGIApp, Message

from .config import settings
from .services.auth import AuthService

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
BASE_DIR = Path(__file__).resolve().parent.parent  # –ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
LOGS_DIR = BASE_DIR / "logs"  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ª–æ–≥–∞–º–∏
LOGS_DIR.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
api_logger = logging.getLogger("api_requests")
api_logger.setLevel(logging.INFO)

# –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤
formatter = logging.Formatter(
    '%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
log_file = LOGS_DIR / f"api_requests.log"
file_handler = logging.FileHandler(log_file, encoding='utf-8')
file_handler.setFormatter(formatter)
api_logger.addHandler(file_handler)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
if settings.debug:
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    api_logger.addHandler(console_handler)


# CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –≤ –ª–æ–≥–∞—Ö
CRUD_OPERATIONS = {
    "GET": "üîç READ",
    "POST": "‚ûï CREATE",
    "PUT": "üîÑ UPDATE",
    "PATCH": "üîß PARTIAL_UPDATE",
    "DELETE": "‚ùå DELETE",
    "OPTIONS": "üìã OPTIONS",
    "HEAD": "üìù HEAD"
}

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ (–Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ñ–∞–π–ª –ª–æ–≥–æ–≤)
METHOD_COLORS = {
    "GET": "\033[94m",     # Blue
    "POST": "\033[92m",    # Green
    "PUT": "\033[93m",     # Yellow
    "PATCH": "\033[96m",   # Cyan
    "DELETE": "\033[91m",  # Red
    "OPTIONS": "\033[95m", # Purple
    "HEAD": "\033[97m",    # White
    "RESET": "\033[0m"     # Reset
}


class APIRequestLoggingMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    async def dispatch(self, request: Request, call_next) -> Response:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        request_time = datetime.now()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        method = request.method
        path = request.url.path
        query_params = dict(request.query_params)
        client_ip = request.client.host if request.client else "unknown"
        user_agent = request.headers.get("user-agent", "unknown")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–æ–ø—ã—Ç–æ–∫ —Å—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        response = await call_next(request)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        response_time = (datetime.now() - request_time).total_seconds() * 1000
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        # –ü–æ JWT —Ç–æ–∫–µ–Ω—É –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = "–ê–Ω–æ–Ω–∏–º–Ω—ã–π"
        auth_header = request.headers.get("authorization", "")
        if auth_header.startswith("Bearer "):
            try:
                token = auth_header.split(" ")[1]
                token_data = AuthService.verify_token(token)
                if token_data:
                    user_info = f"{token_data.sub} (ID: {token_data.user_id}, —Ä–æ–ª—å: {token_data.role})"
            except Exception:
                pass
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞
        operation = CRUD_OPERATIONS.get(method, method)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        color_start = METHOD_COLORS.get(method, "")
        color_reset = METHOD_COLORS["RESET"]
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–∞
        log_info = {
            "timestamp": request_time.isoformat(),
            "operation": operation,
            "method": method,
            "path": path,
            "status_code": response.status_code,
            "response_time_ms": round(response_time, 2),
            "user": user_info,
            "client_ip": client_ip,
            "query_params": query_params if query_params else None,
            "request_body": None,  # –£–±—Ä–∞–ª–∏ —á—Ç–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            "user_agent": user_agent
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
        if response.status_code >= 500:
            log_level = logging.ERROR
        elif response.status_code >= 400:
            log_level = logging.WARNING
        else:
            log_level = logging.INFO
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞
        log_message = f"{color_start}{operation} | {method} {path} | {response.status_code} | {round(response_time, 2)}ms | {user_info}{color_reset}"
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        api_logger.log(log_level, log_message, extra={"api_request": log_info})
        
        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON-–ª–æ–≥
        self._log_to_json(log_info)
        
        return response
    
    def _log_to_json(self, log_info: Dict[str, Any]) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ JSON-—Ñ–∞–π–ª –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ –ø–æ –¥–Ω—è–º
            today = datetime.now().strftime("%Y-%m-%d")
            json_log_file = LOGS_DIR / f"api_requests_{today}.json"
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not json_log_file.exists():
                with open(json_log_file, "w", encoding="utf-8") as f:
                    json.dump([], f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–æ–≥–∏
            with open(json_log_file, "r", encoding="utf-8") as f:
                try:
                    logs = json.load(f)
                except json.JSONDecodeError:
                    logs = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ª–æ–≥
            logs.append(log_info)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ª–æ–≥–∏
            with open(json_log_file, "w", encoding="utf-8") as f:
                json.dump(logs, f, ensure_ascii=False, indent=2)
        except Exception as e:
            api_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ JSON-–ª–æ–≥–∞: {e}")


def setup_request_logging(app: ASGIApp) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ middleware –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é FastAPI
    
    –î–æ–±–∞–≤–ª—è–µ—Ç APIRequestLoggingMiddleware –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é FastAPI.
    –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ñ–∞–π–ª—ã:
    - logs/api_requests.log - –æ–±—â–∏–π –ª–æ–≥ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    - logs/api_requests_YYYY-MM-DD.json - –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –¥–Ω—è–º
    """
    app.add_middleware(APIRequestLoggingMiddleware)
    api_logger.info("üîÑ API Request Logging Middleware –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
