#!/usr/bin/env python3
"""
QRes OS 4 - Orders Tests
–¢–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
"""
from tests.test_base import BaseTestSuite, TestRunner


class OrdersTestSuite(BaseTestSuite):
    """–¢–µ—Å—Ç–æ–≤—ã–π —Å—é–∏—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"""
    
    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∑–∞–∫–∞–∑–æ–≤"""
        print("\nüõí –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê–ú–ò")
        print("=" * 50)
        
        await self.test_order_crud()
        await self.test_order_validation()
        await self.test_order_status_flow()
        await self.test_order_table_relationship()
        await self.test_order_user_relationship()
        await self.test_order_calculations()
        await self.test_order_search()
    
    async def test_order_crud(self):
        """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏"""
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = await self.create_order_dependencies()
        if not dependencies:
            return None
        
        table_id, user_id, payment_method_id = dependencies
        
        create_data = {
            "table_id": table_id,
            "user_id": user_id,
            "status": "pending",
            "payment_method_id": payment_method_id,
            "customer_name": f"{self.test_prefix}Test Customer",
            "customer_phone": "+1234567890",
            "notes": "Test order for automated testing",
            "discount_amount": 5.00,
            "tax_amount": 2.50
        }
        
        update_data = {
            "table_id": table_id,
            "user_id": user_id,
            "status": "confirmed",
            "payment_method_id": payment_method_id,
            "customer_name": f"{self.test_prefix}Updated Customer",
            "customer_phone": "+0987654321",
            "notes": "Updated test order",
            "discount_amount": 10.00,
            "tax_amount": 5.00
        }
        
        required_fields = ["id", "table_id", "status", "total_amount", "created_at"]
        
        order_id = await self.test_crud_operations(
            endpoint="orders",
            create_data=create_data,
            update_data=update_data,
            data_type="orders",
            required_fields=required_fields
        )
        
        return order_id
    
    async def create_order_dependencies(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ (—Å—Ç–æ–ª, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã)"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
        location_data = {
            "name": f"{self.test_prefix}Order Location",
            "address": "123 Order Street",
            "city": "Order City",
            "country": "Order Country",
            "is_active": True
        }
        
        location_response = await self.client.post(f"{self.runner.BASE_URL}/locations/", 
                                                 json=location_data, headers=headers)
        if location_response.status_code != 201:
            self.results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –ª–æ–∫–∞—Ü–∏—è", False, 
                                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é")
            return None
        
        location = location_response.json()
        location_id = location["id"]
        self.created_data['locations'].append(location_id)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª
        table_data = {
            "number": f"{self.test_prefix}ORDER_T001",
            "location_id": location_id,
            "capacity": 4,
            "status": "available",
            "is_active": True
        }
        
        table_response = await self.client.post(f"{self.runner.BASE_URL}/tables/", 
                                              json=table_data, headers=headers)
        if table_response.status_code != 201:
            self.results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - —Å—Ç–æ–ª", False, 
                                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–æ–ª")
            return None
        
        table = table_response.json()
        table_id = table["id"]
        self.created_data['tables'].append(table_id)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = self.runner.test_user_id
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
        payment_data = {
            "name": f"{self.test_prefix}Order Payment",
            "type": "card",
            "description": "Payment method for order tests",
            "is_active": True
        }
        
        payment_response = await self.client.post(f"{self.runner.BASE_URL}/payment-methods/", 
                                                json=payment_data, headers=headers)
        if payment_response.status_code != 201:
            self.results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", False, 
                                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã")
            return None
        
        payment_method = payment_response.json()
        payment_method_id = payment_method["id"]
        self.created_data['payment_methods'].append(payment_method_id)
        
        self.results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∑–∞–∫–∞–∑–æ–≤", True, 
                            f"–°—Ç–æ–ª: {table_id}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, –û–ø–ª–∞—Ç–∞: {payment_method_id}")
        
        return table_id, user_id, payment_method_id
    
    async def test_order_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞"""
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = await self.create_order_dependencies()
        if not dependencies:
            return
        
        table_id, user_id, payment_method_id = dependencies
        headers = self.get_auth_headers()
        
        invalid_orders = [
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–æ–ª
            {
                "user_id": user_id,
                "status": "pending",
                "customer_name": "No Table Customer"
            },
            # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–æ–ª
            {
                "table_id": 99999,
                "user_id": user_id,
                "status": "pending",
                "customer_name": "Fake Table Customer"
            },
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            {
                "table_id": table_id,
                "status": "pending",
                "customer_name": "No User Customer"
            },
            # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            {
                "table_id": table_id,
                "user_id": 99999,
                "status": "pending",
                "customer_name": "Fake User Customer"
            },
            # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            {
                "table_id": table_id,
                "user_id": user_id,
                "status": "invalid_status",
                "customer_name": "Invalid Status Customer"
            },
            # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞
            {
                "table_id": table_id,
                "user_id": user_id,
                "status": "pending",
                "customer_name": "Negative Discount Customer",
                "discount_amount": -10.0
            },
            # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –Ω–∞–ª–æ–≥
            {
                "table_id": table_id,
                "user_id": user_id,
                "status": "pending",
                "customer_name": "Negative Tax Customer",
                "tax_amount": -5.0
            }
        ]
        
        for i, order_data in enumerate(invalid_orders):
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/orders/", 
                                               json=order_data, headers=headers)
                if response.status_code in [400, 422]:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞ #{i+1}", True, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
                elif response.status_code == 201:
                    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    order = response.json()
                    self.created_data['orders'].append(order["id"])
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞ #{i+1}", False, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã)")
                else:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞ #{i+1}", False, 
                                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞ #{i+1}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_order_status_flow(self):
        """–¢–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞"""
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = await self.create_order_dependencies()
        if not dependencies:
            return
        
        table_id, user_id, payment_method_id = dependencies
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ pending
        order_data = {
            "table_id": table_id,
            "user_id": user_id,
            "status": "pending",
            "payment_method_id": payment_method_id,
            "customer_name": f"{self.test_prefix}Status Flow Customer"
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/orders/", 
                                           json=order_data, headers=headers)
            if response.status_code != 201:
                self.results.add_test("–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ", False, 
                                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑: {response.status_code}")
                return
            
            order = response.json()
            order_id = order["id"]
            self.created_data['orders'].append(order_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if order["status"] == "pending":
                self.results.add_test("–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞ - pending", True, 
                                    "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –≤ —Å—Ç–∞—Ç—É—Å–µ pending")
            else:
                self.results.add_test("–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞ - pending", False, 
                                    f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {order['status']}")
            
        except Exception as e:
            self.results.add_test("–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ç–∞—Ç—É—Å–∞–º–∏
        status_flow = [
            ("confirmed", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"),
            ("preparing", "–ì–æ—Ç–æ–≤–∫–∞ –∑–∞–∫–∞–∑–∞"),
            ("ready", "–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤"),
            ("served", "–ó–∞–∫–∞–∑ –ø–æ–¥–∞–Ω"),
            ("completed", "–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
        ]
        
        for new_status, description in status_flow:
            update_data = {
                "table_id": table_id,
                "user_id": user_id,
                "status": new_status,
                "customer_name": f"{self.test_prefix}Status Flow Customer"
            }
            
            try:
                response = await self.client.put(f"{self.runner.BASE_URL}/orders/{order_id}", 
                                              json=update_data, headers=headers)
                if response.status_code == 200:
                    updated_order = response.json()
                    if updated_order["status"] == new_status:
                        self.results.add_test(f"–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞ - {new_status}", True, 
                                            f"{description} —É—Å–ø–µ—à–µ–Ω")
                    else:
                        self.results.add_test(f"–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞ - {new_status}", False, 
                                            f"–°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: {updated_order['status']}")
                else:
                    self.results.add_test(f"–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞ - {new_status}", False, 
                                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞ - {new_status}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ (–ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ pending)
        invalid_update = {
            "table_id": table_id,
            "user_id": user_id,
            "status": "pending",
            "customer_name": f"{self.test_prefix}Status Flow Customer"
        }
        
        try:
            response = await self.client.put(f"{self.runner.BASE_URL}/orders/{order_id}", 
                                          json=invalid_update, headers=headers)
            if response.status_code in [400, 422]:
                self.results.add_test("–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞ - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥", True, 
                                    "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            elif response.status_code == 200:
                self.results.add_test("–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞ - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥", True, 
                                    "–ü–µ—Ä–µ—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω (–≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ —Å—Ç—Ä–æ–≥–∞—è)", warning=True)
            else:
                self.results.add_test("–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞ - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥", False, 
                                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞ - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥", False, 
                                f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_order_table_relationship(self):
        """–¢–µ—Å—Ç —Å–≤—è–∑–∏ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–æ–ª–∞–º–∏"""
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–ª–æ–≤
        dependencies1 = await self.create_order_dependencies()
        dependencies2 = await self.create_order_dependencies()
        
        if not (dependencies1 and dependencies2):
            return
        
        table_id1, user_id1, payment_id1 = dependencies1
        table_id2, user_id2, payment_id2 = dependencies2
        
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤
        orders_data = [
            {
                "table_id": table_id1,
                "user_id": user_id1,
                "status": "pending",
                "customer_name": f"{self.test_prefix}Table 1 Customer"
            },
            {
                "table_id": table_id2,
                "user_id": user_id2,
                "status": "pending",
                "customer_name": f"{self.test_prefix}Table 2 Customer"
            }
        ]
        
        created_orders = []
        for i, order_data in enumerate(orders_data):
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/orders/", 
                                               json=order_data, headers=headers)
                if response.status_code == 201:
                    order = response.json()
                    self.created_data['orders'].append(order["id"])
                    created_orders.append(order)
                    
                    if order["table_id"] == order_data["table_id"]:
                        self.results.add_test(f"–°–≤—è–∑—å –∑–∞–∫–∞–∑-—Å—Ç–æ–ª - —Å–æ–∑–¥–∞–Ω–∏–µ #{i+1}", True, 
                                            f"–ó–∞–∫–∞–∑ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å—Ç–æ–ª—É {order_data['table_id']}")
                    else:
                        self.results.add_test(f"–°–≤—è–∑—å –∑–∞–∫–∞–∑-—Å—Ç–æ–ª - —Å–æ–∑–¥–∞–Ω–∏–µ #{i+1}", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Å—Ç–æ–ª—É")
                else:
                    self.results.add_test(f"–°–≤—è–∑—å –∑–∞–∫–∞–∑-—Å—Ç–æ–ª - —Å–æ–∑–¥–∞–Ω–∏–µ #{i+1}", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–°–≤—è–∑—å –∑–∞–∫–∞–∑-—Å—Ç–æ–ª - —Å–æ–∑–¥–∞–Ω–∏–µ #{i+1}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–æ–ª—É (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        if created_orders:
            test_table_id = created_orders[0]["table_id"]
            try:
                response = await self.client.get(f"{self.runner.BASE_URL}/orders/?table_id={test_table_id}", 
                                              headers=headers)
                if response.status_code == 200:
                    orders = response.json()
                    table_orders = [o for o in orders if o.get("table_id") == test_table_id]
                    self.results.add_test("–°–≤—è–∑—å –∑–∞–∫–∞–∑-—Å—Ç–æ–ª - —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–æ–ª—É", True, 
                                        f"–ù–∞–π–¥–µ–Ω–æ {len(table_orders)} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å—Ç–æ–ª–∞")
                elif response.status_code == 422:
                    self.results.add_test("–°–≤—è–∑—å –∑–∞–∫–∞–∑-—Å—Ç–æ–ª - —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–æ–ª—É", True, 
                                        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
                else:
                    self.results.add_test("–°–≤—è–∑—å –∑–∞–∫–∞–∑-—Å—Ç–æ–ª - —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–æ–ª—É", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test("–°–≤—è–∑—å –∑–∞–∫–∞–∑-—Å—Ç–æ–ª - —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–æ–ª—É", True, 
                                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", warning=True)
    
    async def test_order_user_relationship(self):
        """–¢–µ—Å—Ç —Å–≤—è–∑–∏ –∑–∞–∫–∞–∑–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = await self.create_order_dependencies()
        if not dependencies:
            return
        
        table_id, user_id, payment_method_id = dependencies
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_data = {
            "table_id": table_id,
            "user_id": user_id,
            "status": "pending",
            "customer_name": f"{self.test_prefix}User Relation Customer"
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/orders/", 
                                           json=order_data, headers=headers)
            if response.status_code == 201:
                order = response.json()
                self.created_data['orders'].append(order["id"])
                
                if order["user_id"] == user_id:
                    self.results.add_test("–°–≤—è–∑—å –∑–∞–∫–∞–∑-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞–Ω–∏–µ", True, 
                                        f"–ó–∞–∫–∞–∑ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                else:
                    self.results.add_test("–°–≤—è–∑—å –∑–∞–∫–∞–∑-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞–Ω–∏–µ", False, 
                                        f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            else:
                self.results.add_test("–°–≤—è–∑—å –∑–∞–∫–∞–∑-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞–Ω–∏–µ", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–°–≤—è–∑—å –∑–∞–∫–∞–∑-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞–Ω–∏–µ", False, 
                                f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/orders/?user_id={user_id}", 
                                          headers=headers)
            if response.status_code == 200:
                orders = response.json()
                user_orders = [o for o in orders if o.get("user_id") == user_id]
                self.results.add_test("–°–≤—è–∑—å –∑–∞–∫–∞–∑-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", True, 
                                    f"–ù–∞–π–¥–µ–Ω–æ {len(user_orders)} –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            elif response.status_code == 422:
                self.results.add_test("–°–≤—è–∑—å –∑–∞–∫–∞–∑-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", True, 
                                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
            else:
                self.results.add_test("–°–≤—è–∑—å –∑–∞–∫–∞–∑-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–°–≤—è–∑—å –∑–∞–∫–∞–∑-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", True, 
                                "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", warning=True)
    
    async def test_order_calculations(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ –∑–∞–∫–∞–∑–∞—Ö"""
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = await self.create_order_dependencies()
        if not dependencies:
            return
        
        table_id, user_id, payment_method_id = dependencies
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏
        order_data = {
            "table_id": table_id,
            "user_id": user_id,
            "status": "pending",
            "customer_name": f"{self.test_prefix}Calculations Customer",
            "subtotal_amount": 100.00,
            "discount_amount": 10.00,
            "tax_amount": 9.00,
            "service_charge": 5.00,
            "total_amount": 104.00  # 100 - 10 + 9 + 5 = 104
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/orders/", 
                                           json=order_data, headers=headers)
            if response.status_code == 201:
                order = response.json()
                self.created_data['orders'].append(order["id"])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç—ã
                expected_total = 104.00
                actual_total = order.get("total_amount", 0)
                
                if abs(actual_total - expected_total) < 0.01:
                    self.results.add_test("–†–∞—Å—á–µ—Ç—ã –∑–∞–∫–∞–∑–∞ - –æ–±—â–∞—è —Å—É–º–º–∞", True, 
                                        f"–û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {actual_total}")
                else:
                    self.results.add_test("–†–∞—Å—á–µ—Ç—ã –∑–∞–∫–∞–∑–∞ - –æ–±—â–∞—è —Å—É–º–º–∞", False, 
                                        f"–ù–µ–≤–µ—Ä–Ω–∞—è –æ–±—â–∞—è —Å—É–º–º–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_total}, –ø–æ–ª—É—á–µ–Ω–æ {actual_total}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—É–º–º—ã
                components = ["subtotal_amount", "discount_amount", "tax_amount", "service_charge"]
                for component in components:
                    if component in order:
                        self.results.add_test(f"–†–∞—Å—á–µ—Ç—ã –∑–∞–∫–∞–∑–∞ - {component}", True, 
                                            f"{component}: {order[component]}")
                    else:
                        self.results.add_test(f"–†–∞—Å—á–µ—Ç—ã –∑–∞–∫–∞–∑–∞ - {component}", True, 
                                            f"–ü–æ–ª–µ {component} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
            else:
                self.results.add_test("–†–∞—Å—á–µ—Ç—ã –∑–∞–∫–∞–∑–∞", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–†–∞—Å—á–µ—Ç—ã –∑–∞–∫–∞–∑–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        auto_calc_order = {
            "table_id": table_id,
            "user_id": user_id,
            "status": "pending",
            "customer_name": f"{self.test_prefix}Auto Calc Customer",
            "subtotal_amount": 50.00,
            "discount_percentage": 10.0,  # 10% —Å–∫–∏–¥–∫–∞ = 5.00
            "tax_percentage": 8.0  # 8% –Ω–∞–ª–æ–≥ –æ—Ç 45.00 = 3.60
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/orders/", 
                                           json=auto_calc_order, headers=headers)
            if response.status_code == 201:
                order = response.json()
                self.created_data['orders'].append(order["id"])
                
                # –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–∞—Å—á–µ—Ç—ã: 50 - 5 + 3.60 = 48.60
                expected_total = 48.60
                actual_total = order.get("total_amount", 0)
                
                if abs(actual_total - expected_total) < 0.01:
                    self.results.add_test("–†–∞—Å—á–µ—Ç—ã –∑–∞–∫–∞–∑–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç", True, 
                                        f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: {actual_total}")
                else:
                    self.results.add_test("–†–∞—Å—á–µ—Ç—ã –∑–∞–∫–∞–∑–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç", True, 
                                        f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ-–¥—Ä—É–≥–æ–º—É", 
                                        warning=True)
            else:
                self.results.add_test("–†–∞—Å—á–µ—Ç—ã –∑–∞–∫–∞–∑–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç", True, 
                                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
        except Exception as e:
            self.results.add_test("–†–∞—Å—á–µ—Ç—ã –∑–∞–∫–∞–∑–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç", True, 
                                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω", warning=True)
    
    async def test_order_search(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
        dependencies = await self.create_order_dependencies()
        if not dependencies:
            return
        
        table_id, user_id, payment_method_id = dependencies
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
        search_orders = [
            {
                "table_id": table_id,
                "user_id": user_id,
                "status": "pending",
                "customer_name": f"{self.test_prefix}Search Customer 1",
                "total_amount": 25.50
            },
            {
                "table_id": table_id,
                "user_id": user_id,
                "status": "confirmed",
                "customer_name": f"{self.test_prefix}Search Customer 2",
                "total_amount": 45.75
            },
            {
                "table_id": table_id,
                "user_id": user_id,
                "status": "completed",
                "customer_name": f"{self.test_prefix}Search Customer 3",
                "total_amount": 67.25
            }
        ]
        
        created_orders = []
        for order_data in search_orders:
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/orders/", 
                                               json=order_data, headers=headers)
                if response.status_code == 201:
                    order = response.json()
                    self.created_data['orders'].append(order["id"])
                    created_orders.append(order)
            except Exception:
                continue
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/orders/", headers=headers)
            if response.status_code == 200:
                orders = response.json()
                if len(orders) >= len(created_orders):
                    self.results.add_test("–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ - –≤—Å–µ –∑–∞–∫–∞–∑—ã", True, 
                                        f"–ü–æ–ª—É—á–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤")
                else:
                    self.results.add_test("–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ - –≤—Å–µ –∑–∞–∫–∞–∑—ã", False, 
                                        f"–ü–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ –∑–∞–∫–∞–∑–æ–≤ —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å")
            else:
                self.results.add_test("–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ - –≤—Å–µ –∑–∞–∫–∞–∑—ã", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ - –≤—Å–µ –∑–∞–∫–∞–∑—ã", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ ID
        if created_orders:
            order_id = created_orders[0]["id"]
            try:
                response = await self.client.get(f"{self.runner.BASE_URL}/orders/{order_id}", 
                                              headers=headers)
                if response.status_code == 200:
                    order = response.json()
                    if order["id"] == order_id:
                        self.results.add_test("–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ - –ø–æ ID", True, 
                                            f"–ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑: {order_id}")
                    else:
                        self.results.add_test("–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ - –ø–æ ID", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–∫–∞–∑")
                else:
                    self.results.add_test("–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ - –ø–æ ID", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test("–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ - –ø–æ ID", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/orders/?status=pending", 
                                          headers=headers)
            if response.status_code == 200:
                orders = response.json()
                pending_count = sum(1 for o in orders if o.get("status") == "pending")
                self.results.add_test("–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ - —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É", True, 
                                    f"–ù–∞–π–¥–µ–Ω–æ {pending_count} –∑–∞–∫–∞–∑–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ 'pending'", 
                                    warning=(pending_count != len(orders)))
            elif response.status_code == 422:
                self.results.add_test("–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ - —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É", True, 
                                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
            else:
                self.results.add_test("–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ - —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ - —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É", True, 
                                "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", warning=True)
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ (—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–∫–∞–∑—ã)
        try:
            from datetime import datetime
            today = datetime.now().strftime("%Y-%m-%d")
            response = await self.client.get(f"{self.runner.BASE_URL}/orders/?date={today}", 
                                          headers=headers)
            if response.status_code == 200:
                orders = response.json()
                self.results.add_test("–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ - —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ", True, 
                                    f"–ù–∞–π–¥–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
            elif response.status_code == 422:
                self.results.add_test("–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ - —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ", True, 
                                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
            else:
                self.results.add_test("–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ - —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ - —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ", True, 
                                "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", warning=True)
