#!/usr/bin/env python3
"""
QRes OS 4 - Ingredients Tests
–¢–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
"""
from tests.test_base import BaseTestSuite, TestRunner


class IngredientsTestSuite(BaseTestSuite):
    """–¢–µ—Å—Ç–æ–≤—ã–π —Å—é–∏—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏"""
    
    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"""
        print("\nü•¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–ù–ì–†–ï–î–ò–ï–ù–¢–ê–ú–ò")
        print("=" * 50)
        
        await self.test_ingredient_crud()
        await self.test_ingredient_validation()
        await self.test_ingredient_allergens()
        await self.test_ingredient_units()
        await self.test_ingredient_status()
        await self.test_ingredient_search()
    
    async def test_ingredient_crud(self):
        """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏"""
        create_data = {
            "name": f"{self.test_prefix}Test Ingredient",
            "description": "Test ingredient for automated testing",
            "unit": "gram",
            "calories_per_unit": 25,
            "is_allergen": False,
            "allergen_type": "",
            "is_active": True,
            "cost_per_unit": 0.05,
            "supplier": f"{self.test_prefix}Test Supplier"
        }
        
        update_data = {
            "name": f"{self.test_prefix}Updated Test Ingredient",
            "description": "Updated test ingredient",
            "unit": "kilogram",
            "calories_per_unit": 30,
            "is_allergen": True,
            "allergen_type": "nuts",
            "is_active": True,
            "cost_per_unit": 0.08,
            "supplier": f"{self.test_prefix}Updated Supplier"
        }
        
        required_fields = ["id", "name", "unit", "is_allergen", "is_active", "created_at"]
        
        ingredient_id = await self.test_crud_operations(
            endpoint="ingredients",
            create_data=create_data,
            update_data=update_data,
            data_type="ingredients",
            required_fields=required_fields
        )
        
        return ingredient_id
    
    async def test_ingredient_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞"""
        invalid_ingredients = [
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –∏–º—è
            {
                "description": "Ingredient without name",
                "unit": "gram",
                "is_allergen": False,
                "is_active": True
            },
            # –ü—É—Å—Ç–æ–µ –∏–º—è
            {
                "name": "",
                "description": "Ingredient with empty name",
                "unit": "gram",
                "is_allergen": False,
                "is_active": True
            },
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            {
                "name": f"{self.test_prefix}No Unit Ingredient",
                "description": "Ingredient without unit",
                "is_allergen": False,
                "is_active": True
            },
            # –ü—É—Å—Ç–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            {
                "name": f"{self.test_prefix}Empty Unit Ingredient",
                "description": "Ingredient with empty unit",
                "unit": "",
                "is_allergen": False,
                "is_active": True
            },
            # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
            {
                "name": f"{self.test_prefix}Invalid Calories Ingredient",
                "description": "Ingredient with invalid calories",
                "unit": "gram",
                "calories_per_unit": -10,
                "is_allergen": False,
                "is_active": True
            },
            # –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            {
                "name": f"{self.test_prefix}Invalid Cost Ingredient",
                "description": "Ingredient with invalid cost",
                "unit": "gram",
                "cost_per_unit": -5.0,
                "is_allergen": False,
                "is_active": True
            }
        ]
        
        headers = self.get_auth_headers()
        
        for i, ingredient_data in enumerate(invalid_ingredients):
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/ingredients/", 
                                               json=ingredient_data, headers=headers)
                if response.status_code in [400, 422]:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ #{i+1}", True, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
                elif response.status_code == 201:
                    # –ï—Å–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    ingredient = response.json()
                    self.created_data['ingredients'].append(ingredient["id"])
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ #{i+1}", False, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã)")
                else:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ #{i+1}", False, 
                                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ #{i+1}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_ingredient_allergens(self):
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–ª–µ—Ä–≥–µ–Ω–∞–º–∏"""
        headers = self.get_auth_headers()
        
        # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤
        allergen_tests = [
            {"name": "Peanuts", "is_allergen": True, "allergen_type": "nuts"},
            {"name": "Milk", "is_allergen": True, "allergen_type": "dairy"},
            {"name": "Wheat", "is_allergen": True, "allergen_type": "gluten"},
            {"name": "Shellfish", "is_allergen": True, "allergen_type": "seafood"},
            {"name": "Eggs", "is_allergen": True, "allergen_type": "eggs"},
            {"name": "Regular Tomato", "is_allergen": False, "allergen_type": ""}
        ]
        
        created_allergens = []
        for allergen_test in allergen_tests:
            ingredient_data = {
                "name": f"{self.test_prefix}{allergen_test['name']}",
                "description": f"Test {allergen_test['name']} ingredient",
                "unit": "gram",
                "is_allergen": allergen_test["is_allergen"],
                "allergen_type": allergen_test["allergen_type"],
                "is_active": True
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/ingredients/", 
                                               json=ingredient_data, headers=headers)
                if response.status_code == 201:
                    ingredient = response.json()
                    self.created_data['ingredients'].append(ingredient["id"])
                    created_allergens.append(ingredient)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–ª–ª–µ—Ä–≥–µ–Ω–∞
                    if ingredient["is_allergen"] == allergen_test["is_allergen"]:
                        self.results.add_test(f"–ê–ª–ª–µ—Ä–≥–µ–Ω - {allergen_test['name']}", True, 
                                            f"–°—Ç–∞—Ç—É—Å –∞–ª–ª–µ—Ä–≥–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {ingredient['is_allergen']}")
                    else:
                        self.results.add_test(f"–ê–ª–ª–µ—Ä–≥–µ–Ω - {allergen_test['name']}", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–ª–ª–µ—Ä–≥–µ–Ω–∞: {ingredient['is_allergen']}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞–ª–ª–µ—Ä–≥–µ–Ω–∞ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
                    if "allergen_type" in ingredient:
                        if ingredient["allergen_type"] == allergen_test["allergen_type"]:
                            self.results.add_test(f"–¢–∏–ø –∞–ª–ª–µ—Ä–≥–µ–Ω–∞ - {allergen_test['name']}", True, 
                                                f"–¢–∏–ø –∞–ª–ª–µ—Ä–≥–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {ingredient['allergen_type']}")
                        else:
                            self.results.add_test(f"–¢–∏–ø –∞–ª–ª–µ—Ä–≥–µ–Ω–∞ - {allergen_test['name']}", False, 
                                                f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞–ª–ª–µ—Ä–≥–µ–Ω–∞: {ingredient['allergen_type']}")
                    else:
                        self.results.add_test(f"–¢–∏–ø –∞–ª–ª–µ—Ä–≥–µ–Ω–∞ - {allergen_test['name']}", True, 
                                            "–ü–æ–ª–µ allergen_type –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
                else:
                    self.results.add_test(f"–ê–ª–ª–µ—Ä–≥–µ–Ω - {allergen_test['name']}", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–ê–ª–ª–µ—Ä–≥–µ–Ω - {allergen_test['name']}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/ingredients/?is_allergen=true", 
                                          headers=headers)
            if response.status_code == 200:
                ingredients = response.json()
                allergen_count = sum(1 for ing in ingredients if ing.get("is_allergen") is True)
                self.results.add_test("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤", True, 
                                    f"–ù–∞–π–¥–µ–Ω–æ {allergen_count} –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤", 
                                    warning=(allergen_count != len(ingredients)))
            elif response.status_code == 422:
                self.results.add_test("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤", True, 
                                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
            else:
                self.results.add_test("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤", True, 
                                "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", warning=True)
    
    async def test_ingredient_units(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
        headers = self.get_auth_headers()
        
        # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
        unit_tests = [
            "gram", "kilogram", "liter", "milliliter", "piece", 
            "cup", "tablespoon", "teaspoon", "ounce", "pound"
        ]
        
        for unit in unit_tests:
            ingredient_data = {
                "name": f"{self.test_prefix}Unit {unit.title()} Ingredient",
                "description": f"Ingredient measured in {unit}",
                "unit": unit,
                "is_allergen": False,
                "is_active": True
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/ingredients/", 
                                               json=ingredient_data, headers=headers)
                if response.status_code == 201:
                    ingredient = response.json()
                    self.created_data['ingredients'].append(ingredient["id"])
                    
                    if ingredient["unit"] == unit:
                        self.results.add_test(f"–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è - {unit}", True, 
                                            f"–ï–¥–∏–Ω–∏—Ü–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {ingredient['unit']}")
                    else:
                        self.results.add_test(f"–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è - {unit}", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å {unit}, –ø–æ–ª—É—á–µ–Ω–æ {ingredient['unit']}")
                else:
                    self.results.add_test(f"–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è - {unit}", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è - {unit}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
        invalid_units = ["", "invalid_unit", "123", "unit with spaces"]
        
        for invalid_unit in invalid_units:
            ingredient_data = {
                "name": f"{self.test_prefix}Invalid Unit Ingredient",
                "description": "Ingredient with invalid unit",
                "unit": invalid_unit,
                "is_allergen": False,
                "is_active": True
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/ingredients/", 
                                               json=ingredient_data, headers=headers)
                if response.status_code in [400, 422]:
                    self.results.add_test(f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ - '{invalid_unit}'", True, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
                elif response.status_code == 201:
                    ingredient = response.json()
                    self.created_data['ingredients'].append(ingredient["id"])
                    self.results.add_test(f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ - '{invalid_unit}'", True, 
                                        "–ï–¥–∏–Ω–∏—Ü–∞ –ø—Ä–∏–Ω—è—Ç–∞ (–≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ç—Ä–æ–≥–∞—è)", warning=True)
                else:
                    self.results.add_test(f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ - '{invalid_unit}'", False, 
                                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ - '{invalid_unit}'", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_ingredient_status(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
        active_ingredient = {
            "name": f"{self.test_prefix}Active Ingredient",
            "description": "Active ingredient test",
            "unit": "gram",
            "is_allergen": False,
            "is_active": True
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/ingredients/", 
                                           json=active_ingredient, headers=headers)
            if response.status_code == 201:
                ingredient = response.json()
                self.created_data['ingredients'].append(ingredient["id"])
                
                if ingredient["is_active"] is True:
                    self.results.add_test("–°—Ç–∞—Ç—É—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ - –∞–∫—Ç–∏–≤–Ω—ã–π", True, 
                                        "–ê–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    self.results.add_test("–°—Ç–∞—Ç—É—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ - –∞–∫—Ç–∏–≤–Ω—ã–π", False, 
                                        f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {ingredient['is_active']}")
            else:
                self.results.add_test("–°—Ç–∞—Ç—É—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ - –∞–∫—Ç–∏–≤–Ω—ã–π", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–°—Ç–∞—Ç—É—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ - –∞–∫—Ç–∏–≤–Ω—ã–π", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
        inactive_ingredient = {
            "name": f"{self.test_prefix}Inactive Ingredient",
            "description": "Inactive ingredient test",
            "unit": "gram",
            "is_allergen": False,
            "is_active": False
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/ingredients/", 
                                           json=inactive_ingredient, headers=headers)
            if response.status_code == 201:
                ingredient = response.json()
                self.created_data['ingredients'].append(ingredient["id"])
                
                if ingredient["is_active"] is False:
                    self.results.add_test("–°—Ç–∞—Ç—É—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π", True, 
                                        "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    self.results.add_test("–°—Ç–∞—Ç—É—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π", False, 
                                        f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {ingredient['is_active']}")
            else:
                self.results.add_test("–°—Ç–∞—Ç—É—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–°—Ç–∞—Ç—É—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_ingredient_search(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_ingredients = [
            {
                "name": f"{self.test_prefix}Search Tomato",
                "description": "Fresh tomato for search",
                "unit": "gram",
                "is_allergen": False,
                "is_active": True
            },
            {
                "name": f"{self.test_prefix}Search Cheese",
                "description": "Dairy cheese for search",
                "unit": "gram",
                "is_allergen": True,
                "allergen_type": "dairy",
                "is_active": True
            },
            {
                "name": f"{self.test_prefix}Search Basil",
                "description": "Fresh basil herb",
                "unit": "gram",
                "is_allergen": False,
                "is_active": False
            }
        ]
        
        created_ingredients = []
        for ingredient_data in search_ingredients:
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/ingredients/", 
                                               json=ingredient_data, headers=headers)
                if response.status_code == 201:
                    ingredient = response.json()
                    self.created_data['ingredients'].append(ingredient["id"])
                    created_ingredients.append(ingredient)
            except Exception:
                continue
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/ingredients/", headers=headers)
            if response.status_code == 200:
                ingredients = response.json()
                if len(ingredients) >= len(created_ingredients):
                    self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", True, 
                                        f"–ü–æ–ª—É—á–µ–Ω–æ {len(ingredients)} –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤")
                else:
                    self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", False, 
                                        f"–ü–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å")
            else:
                self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ ID
        if created_ingredients:
            ingredient_id = created_ingredients[0]["id"]
            try:
                response = await self.client.get(f"{self.runner.BASE_URL}/ingredients/{ingredient_id}", 
                                              headers=headers)
                if response.status_code == 200:
                    ingredient = response.json()
                    if ingredient["id"] == ingredient_id:
                        self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - –ø–æ ID", True, 
                                            f"–ù–∞–π–¥–µ–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: {ingredient['name']}")
                    else:
                        self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - –ø–æ ID", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç")
                else:
                    self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - –ø–æ ID", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - –ø–æ ID", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/ingredients/?is_active=true", 
                                          headers=headers)
            if response.status_code == 200:
                ingredients = response.json()
                active_count = sum(1 for ing in ingredients if ing.get("is_active") is True)
                self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö", True, 
                                    f"–ù–∞–π–¥–µ–Ω–æ {active_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤", 
                                    warning=(active_count != len(ingredients)))
            elif response.status_code == 422:
                self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö", True, 
                                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
            else:
                self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö", True, 
                                "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", warning=True)
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        try:
            search_term = "Search"
            response = await self.client.get(f"{self.runner.BASE_URL}/ingredients/?search={search_term}", 
                                          headers=headers)
            if response.status_code == 200:
                ingredients = response.json()
                matching_ingredients = [i for i in ingredients if search_term.lower() in i["name"].lower()]
                if len(matching_ingredients) > 0:
                    self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - –ø–æ –∏–º–µ–Ω–∏", True, 
                                        f"–ù–∞–π–¥–µ–Ω–æ {len(matching_ingredients)} –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å '{search_term}'")
                else:
                    self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - –ø–æ –∏–º–µ–Ω–∏", True, 
                                        "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç", warning=True)
            elif response.status_code == 422:
                self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - –ø–æ –∏–º–µ–Ω–∏", True, 
                                    "–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
            else:
                self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - –ø–æ –∏–º–µ–Ω–∏", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - –ø–æ –∏–º–µ–Ω–∏", True, 
                                "–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω", warning=True)
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –µ–¥–∏–Ω–∏—Ü–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        try:
            unit = "gram"
            response = await self.client.get(f"{self.runner.BASE_URL}/ingredients/?unit={unit}", 
                                          headers=headers)
            if response.status_code == 200:
                ingredients = response.json()
                unit_ingredients = [i for i in ingredients if i.get("unit") == unit]
                if len(unit_ingredients) > 0:
                    self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - –ø–æ –µ–¥–∏–Ω–∏—Ü–µ", True, 
                                        f"–ù–∞–π–¥–µ–Ω–æ {len(unit_ingredients)} –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ '{unit}'")
                else:
                    self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - –ø–æ –µ–¥–∏–Ω–∏—Ü–µ", True, 
                                        "–§–∏–ª—å—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç", warning=True)
            elif response.status_code == 422:
                self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - –ø–æ –µ–¥–∏–Ω–∏—Ü–µ", True, 
                                    "–§–∏–ª—å—Ç—Ä –ø–æ –µ–¥–∏–Ω–∏—Ü–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
            else:
                self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - –ø–æ –µ–¥–∏–Ω–∏—Ü–µ", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - –ø–æ –µ–¥–∏–Ω–∏—Ü–µ", True, 
                                "–§–∏–ª—å—Ç—Ä –ø–æ –µ–¥–∏–Ω–∏—Ü–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω", warning=True)
