#!/usr/bin/env python3
"""
QRes OS 4 - Locations Tests
–¢–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏—è–º–∏
"""
from tests.test_base import BaseTestSuite, TestRunner


class LocationsTestSuite(BaseTestSuite):
    """–¢–µ—Å—Ç–æ–≤—ã–π —Å—é–∏—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏—è–º–∏"""
    
    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ª–æ–∫–∞—Ü–∏–π"""
        print("\nüìç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø –õ–û–ö–ê–¶–ò–Ø–ú–ò")
        print("=" * 50)
        
        await self.test_location_crud()
        await self.test_location_validation()
        await self.test_location_address_validation()
        await self.test_location_status()
        await self.test_location_search()
    
    async def test_location_crud(self):
        """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ª–æ–∫–∞—Ü–∏—è–º–∏"""
        create_data = {
            "name": f"{self.test_prefix}Test Location",
            "address": "123 Test Street, Test City",
            "city": "Test City",
            "country": "Test Country",
            "phone": "+1234567890",
            "email": f"{self.test_prefix}location@example.com",
            "is_active": True,
            "description": "Test location for automated testing"
        }
        
        update_data = {
            "name": f"{self.test_prefix}Updated Test Location",
            "address": "456 Updated Street, Updated City",
            "city": "Updated City",
            "country": "Updated Country",
            "phone": "+0987654321",
            "email": f"{self.test_prefix}updated_location@example.com",
            "is_active": True,
            "description": "Updated test location"
        }
        
        required_fields = ["id", "name", "address", "city", "country", "is_active", "created_at"]
        
        location_id = await self.test_crud_operations(
            endpoint="locations",
            create_data=create_data,
            update_data=update_data,
            data_type="locations",
            required_fields=required_fields
        )
        
        return location_id
    
    async def test_location_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–∏"""
        invalid_locations = [
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –∏–º—è
            {
                "address": "123 Test Street",
                "city": "Test City",
                "country": "Test Country"
            },
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å
            {
                "name": f"{self.test_prefix}No Address Location",
                "city": "Test City",
                "country": "Test Country"
            },
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥
            {
                "name": f"{self.test_prefix}No City Location",
                "address": "123 Test Street",
                "country": "Test Country"
            },
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∞
            {
                "name": f"{self.test_prefix}No Country Location",
                "address": "123 Test Street",
                "city": "Test City"
            },
            # –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            {
                "name": "",
                "address": "",
                "city": "",
                "country": ""
            }
        ]
        
        headers = self.get_auth_headers()
        
        for i, location_data in enumerate(invalid_locations):
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/locations/", 
                                               json=location_data, headers=headers)
                if response.status_code in [400, 422]:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–∫–∞—Ü–∏–∏ #{i+1}", True, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
                elif response.status_code == 201:
                    # –ï—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è —Å–æ–∑–¥–∞–ª–∞—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    location = response.json()
                    self.created_data['locations'].append(location["id"])
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–∫–∞—Ü–∏–∏ #{i+1}", False, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã)")
                else:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–∫–∞—Ü–∏–∏ #{i+1}", False, 
                                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–∫–∞—Ü–∏–∏ #{i+1}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_location_address_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        headers = self.get_auth_headers()
        
        # –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        valid_contacts = [
            {
                "name": f"{self.test_prefix}Valid Phone Location",
                "address": "123 Test Street",
                "city": "Test City",
                "country": "Test Country",
                "phone": "+1-234-567-8900",
                "email": f"{self.test_prefix}valid@example.com"
            },
            {
                "name": f"{self.test_prefix}Another Valid Location",
                "address": "456 Another Street",
                "city": "Another City",
                "country": "Another Country",
                "phone": "123.456.7890",
                "email": f"{self.test_prefix}another@test.com"
            }
        ]
        
        for i, location_data in enumerate(valid_contacts):
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/locations/", 
                                               json=location_data, headers=headers)
                if response.status_code == 201:
                    location = response.json()
                    self.created_data['locations'].append(location["id"])
                    self.results.add_test(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –≤–∞–ª–∏–¥–Ω—ã–µ #{i+1}", True, 
                                        f"–õ–æ–∫–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {location['name']}")
                else:
                    self.results.add_test(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –≤–∞–ª–∏–¥–Ω—ã–µ #{i+1}", False, 
                                        f"–ö–æ–¥: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
            except Exception as e:
                self.results.add_test(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –≤–∞–ª–∏–¥–Ω—ã–µ #{i+1}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ email –∞–¥—Ä–µ—Å–∞–º–∏
        invalid_emails = ["invalid-email", "test@", "@example.com", "test.com"]
        
        for i, invalid_email in enumerate(invalid_emails):
            location_data = {
                "name": f"{self.test_prefix}Invalid Email Location {i}",
                "address": "123 Test Street",
                "city": "Test City",
                "country": "Test Country",
                "email": invalid_email
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/locations/", 
                                               json=location_data, headers=headers)
                if response.status_code in [400, 422]:
                    self.results.add_test(f"Email –≤–∞–ª–∏–¥–∞—Ü–∏—è #{i+1}", True, 
                                        f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email '{invalid_email}' –æ—Ç–∫–ª–æ–Ω–µ–Ω")
                elif response.status_code == 201:
                    location = response.json()
                    self.created_data['locations'].append(location["id"])
                    self.results.add_test(f"Email –≤–∞–ª–∏–¥–∞—Ü–∏—è #{i+1}", True, 
                                        f"Email '{invalid_email}' –ø—Ä–∏–Ω—è—Ç (–≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ç—Ä–æ–≥–∞—è)", 
                                        warning=True)
                else:
                    self.results.add_test(f"Email –≤–∞–ª–∏–¥–∞—Ü–∏—è #{i+1}", False, 
                                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"Email –≤–∞–ª–∏–¥–∞—Ü–∏—è #{i+1}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_location_status(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞—Ü–∏–π"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
        active_location = {
            "name": f"{self.test_prefix}Active Location",
            "address": "123 Active Street",
            "city": "Active City",
            "country": "Active Country",
            "is_active": True
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/locations/", 
                                           json=active_location, headers=headers)
            if response.status_code == 201:
                location = response.json()
                self.created_data['locations'].append(location["id"])
                
                if location["is_active"] is True:
                    self.results.add_test("–°—Ç–∞—Ç—É—Å –ª–æ–∫–∞—Ü–∏–∏ - –∞–∫—Ç–∏–≤–Ω–∞—è", True, 
                                        "–ê–∫—Ç–∏–≤–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    self.results.add_test("–°—Ç–∞—Ç—É—Å –ª–æ–∫–∞—Ü–∏–∏ - –∞–∫—Ç–∏–≤–Ω–∞—è", False, 
                                        f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {location['is_active']}")
            else:
                self.results.add_test("–°—Ç–∞—Ç—É—Å –ª–æ–∫–∞—Ü–∏–∏ - –∞–∫—Ç–∏–≤–Ω–∞—è", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–°—Ç–∞—Ç—É—Å –ª–æ–∫–∞—Ü–∏–∏ - –∞–∫—Ç–∏–≤–Ω–∞—è", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
        inactive_location = {
            "name": f"{self.test_prefix}Inactive Location",
            "address": "123 Inactive Street",
            "city": "Inactive City",
            "country": "Inactive Country",
            "is_active": False
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/locations/", 
                                           json=inactive_location, headers=headers)
            if response.status_code == 201:
                location = response.json()
                self.created_data['locations'].append(location["id"])
                
                if location["is_active"] is False:
                    self.results.add_test("–°—Ç–∞—Ç—É—Å –ª–æ–∫–∞—Ü–∏–∏ - –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è", True, 
                                        "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    self.results.add_test("–°—Ç–∞—Ç—É—Å –ª–æ–∫–∞—Ü–∏–∏ - –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è", False, 
                                        f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {location['is_active']}")
            else:
                self.results.add_test("–°—Ç–∞—Ç—É—Å –ª–æ–∫–∞—Ü–∏–∏ - –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–°—Ç–∞—Ç—É—Å –ª–æ–∫–∞—Ü–∏–∏ - –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_location_search(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–∫–∞—Ü–∏–π"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_locations = [
            {
                "name": f"{self.test_prefix}Search Location 1",
                "address": "111 Search Street",
                "city": "Search City",
                "country": "Search Country",
                "is_active": True
            },
            {
                "name": f"{self.test_prefix}Search Location 2",
                "address": "222 Search Avenue",
                "city": "Another City",
                "country": "Search Country",
                "is_active": False
            },
            {
                "name": f"{self.test_prefix}Different Location",
                "address": "333 Different Street",
                "city": "Different City",
                "country": "Different Country",
                "is_active": True
            }
        ]
        
        created_locations = []
        for location_data in search_locations:
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/locations/", 
                                               json=location_data, headers=headers)
                if response.status_code == 201:
                    location = response.json()
                    self.created_data['locations'].append(location["id"])
                    created_locations.append(location)
            except Exception:
                continue
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/locations/", headers=headers)
            if response.status_code == 200:
                locations = response.json()
                if len(locations) >= len(created_locations):
                    self.results.add_test("–ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π - –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏", True, 
                                        f"–ü–æ–ª—É—á–µ–Ω–æ {len(locations)} –ª–æ–∫–∞—Ü–∏–π")
                else:
                    self.results.add_test("–ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π - –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏", False, 
                                        f"–ü–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ –ª–æ–∫–∞—Ü–∏–π —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å")
            else:
                self.results.add_test("–ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π - –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π - –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –ø–æ ID
        if created_locations:
            location_id = created_locations[0]["id"]
            try:
                response = await self.client.get(f"{self.runner.BASE_URL}/locations/{location_id}", 
                                              headers=headers)
                if response.status_code == 200:
                    location = response.json()
                    if location["id"] == location_id:
                        self.results.add_test("–ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π - –ø–æ ID", True, 
                                            f"–ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: {location['name']}")
                    else:
                        self.results.add_test("–ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π - –ø–æ ID", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è: –æ–∂–∏–¥–∞–ª—Å—è ID {location_id}")
                else:
                    self.results.add_test("–ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π - –ø–æ ID", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test("–ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π - –ø–æ ID", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/locations/?is_active=true", 
                                          headers=headers)
            if response.status_code == 200:
                locations = response.json()
                active_count = sum(1 for loc in locations if loc.get("is_active") is True)
                self.results.add_test("–ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π - —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö", True, 
                                    f"–ù–∞–π–¥–µ–Ω–æ {active_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π", 
                                    warning=(active_count != len(locations)))
            elif response.status_code == 422:
                self.results.add_test("–ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π - —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö", True, 
                                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
            else:
                self.results.add_test("–ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π - —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π - —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö", True, 
                                "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", warning=True)
