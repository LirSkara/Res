#!/usr/bin/env python3
"""
QRes OS 4 - Users Tests
–¢–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
"""
from tests.test_base import BaseTestSuite, TestRunner


class UsersTestSuite(BaseTestSuite):
    """–¢–µ—Å—Ç–æ–≤—ã–π —Å—é–∏—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüë• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò")
        print("=" * 50)
        
        await self.test_user_crud()
        await self.test_user_validation()
        await self.test_user_roles()
        await self.test_user_search()
        await self.test_user_permissions()
        await self.test_duplicate_users()
    
    async def test_user_crud(self):
        """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        create_data = {
            "username": f"{self.test_prefix}crud_user",
            "email": f"{self.test_prefix}crud@example.com",
            "password": "securepassword123",
            "full_name": f"CRUD Test User {self.test_prefix}",
            "role": "user",
            "is_active": True
        }
        
        update_data = {
            "username": f"{self.test_prefix}crud_user_updated",
            "email": f"{self.test_prefix}crud_updated@example.com",
            "full_name": f"Updated CRUD User {self.test_prefix}",
            "role": "manager",
            "is_active": True
        }
        
        required_fields = ["id", "username", "email", "full_name", "role", "is_active", "created_at"]
        
        user_id = await self.test_crud_operations(
            endpoint="users",
            create_data=create_data,
            update_data=update_data,
            data_type="users",
            required_fields=required_fields
        )
        
        return user_id
    
    async def test_user_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        invalid_users = [
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π username
            {
                "email": f"{self.test_prefix}nousername@example.com",
                "password": "password123",
                "full_name": "No Username",
                "role": "user"
            },
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π email
            {
                "username": f"{self.test_prefix}noemail",
                "password": "password123",
                "full_name": "No Email",
                "role": "user"
            },
            # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email
            {
                "username": f"{self.test_prefix}invalidemail",
                "email": "invalid-email",
                "password": "password123",
                "full_name": "Invalid Email",
                "role": "user"
            },
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–æ–ª—å
            {
                "username": f"{self.test_prefix}nopass",
                "email": f"{self.test_prefix}nopass@example.com",
                "full_name": "No Password",
                "role": "user"
            },
            # –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ä–æ–ª—å
            {
                "username": f"{self.test_prefix}invalidrole",
                "email": f"{self.test_prefix}invalidrole@example.com",
                "password": "password123",
                "full_name": "Invalid Role",
                "role": "invalid_role"
            }
        ]
        
        headers = self.get_auth_headers()
        
        for i, user_data in enumerate(invalid_users):
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/users/", 
                                               json=user_data, headers=headers)
                if response.status_code in [400, 422]:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{i+1}", True, 
                                        f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
                elif response.status_code == 201:
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    user = response.json()
                    self.created_data['users'].append(user["id"])
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{i+1}", False, 
                                        f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã)")
                else:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{i+1}", False, 
                                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{i+1}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_user_roles(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        roles = ["user", "manager", "admin"]
        headers = self.get_auth_headers()
        
        for role in roles:
            user_data = {
                "username": f"{self.test_prefix}role_{role}",
                "email": f"{self.test_prefix}role_{role}@example.com",
                "password": "password123",
                "full_name": f"Role Test {role.title()}",
                "role": role
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/users/", 
                                               json=user_data, headers=headers)
                if response.status_code == 201:
                    user = response.json()
                    self.created_data['users'].append(user["id"])
                    
                    if user["role"] == role:
                        self.results.add_test(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {role}", True, 
                                            f"–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    else:
                        self.results.add_test(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {role}", False, 
                                            f"–†–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: –æ–∂–∏–¥–∞–ª–æ—Å—å {role}, –ø–æ–ª—É—á–µ–Ω–æ {user['role']}")
                else:
                    self.results.add_test(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {role}", False, 
                                        f"–ö–æ–¥: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
            except Exception as e:
                self.results.add_test(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {role}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_user_search(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_users = []
        for i in range(3):
            user_data = {
                "username": f"{self.test_prefix}search_user_{i}",
                "email": f"{self.test_prefix}search_{i}@example.com",
                "password": "password123",
                "full_name": f"Search Test User {i}",
                "role": "user"
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/users/", 
                                               json=user_data, headers=headers)
                if response.status_code == 201:
                    user = response.json()
                    self.created_data['users'].append(user["id"])
                    search_users.append(user)
            except Exception as e:
                continue
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/users/", headers=headers)
            if response.status_code == 200:
                users = response.json()
                if len(users) >= len(search_users):
                    self.results.add_test("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö", True, 
                                        f"–ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                else:
                    self.results.add_test("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö", False, 
                                        f"–ü–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å")
            else:
                self.results.add_test("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if search_users:
            user_id = search_users[0]["id"]
            try:
                response = await self.client.get(f"{self.runner.BASE_URL}/users/{user_id}", 
                                              headers=headers)
                if response.status_code == 200:
                    user = response.json()
                    if user["id"] == user_id:
                        self.results.add_test("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–æ ID", True, 
                                            f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['username']}")
                    else:
                        self.results.add_test("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–æ ID", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –æ–∂–∏–¥–∞–ª—Å—è ID {user_id}")
                else:
                    self.results.add_test("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–æ ID", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–æ ID", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_user_permissions(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        headers = self.get_auth_headers()
        
        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/users/me", headers=headers)
            if response.status_code == 200:
                user = response.json()
                if user.get("username") == f"{self.test_prefix}testuser":
                    self.results.add_test("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å", True, 
                                        "–î–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—É—á–µ–Ω")
                else:
                    self.results.add_test("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å", False, 
                                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('username')}")
            else:
                self.results.add_test("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/users/")
            if response.status_code == 401:
                self.results.add_test("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", True, 
                                    "–î–æ—Å—Ç—É–ø –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
            else:
                self.results.add_test("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", False, 
                                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_duplicate_users(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "username": f"{self.test_prefix}duplicate_test",
            "email": f"{self.test_prefix}duplicate@example.com",
            "password": "password123",
            "full_name": "Duplicate Test User",
            "role": "user"
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/users/", 
                                           json=user_data, headers=headers)
            if response.status_code == 201:
                user = response.json()
                self.created_data['users'].append(user["id"])
                self.results.add_test("–î—É–±–ª–∏–∫–∞—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ", True, 
                                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user['username']}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç —Å —Ç–µ–º –∂–µ username
                try:
                    duplicate_data = user_data.copy()
                    duplicate_data["email"] = f"{self.test_prefix}duplicate2@example.com"
                    
                    response = await self.client.post(f"{self.runner.BASE_URL}/users/", 
                                                   json=duplicate_data, headers=headers)
                    if response.status_code in [400, 422, 409]:
                        self.results.add_test("–î—É–±–ª–∏–∫–∞—Ç—ã - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π username", True, 
                                            "–î—É–±–ª–∏–∫–∞—Ç username –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
                    elif response.status_code == 201:
                        # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                        dup_user = response.json()
                        self.created_data['users'].append(dup_user["id"])
                        self.results.add_test("–î—É–±–ª–∏–∫–∞—Ç—ã - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π username", False, 
                                            "–î—É–±–ª–∏–∫–∞—Ç username –±—ã–ª —Å–æ–∑–¥–∞–Ω (–Ω–µ –¥–æ–ª–∂–µ–Ω)")
                    else:
                        self.results.add_test("–î—É–±–ª–∏–∫–∞—Ç—ã - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π username", False, 
                                            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
                except Exception as e:
                    self.results.add_test("–î—É–±–ª–∏–∫–∞—Ç—ã - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π username", False, 
                                        f"–û—à–∏–±–∫–∞: {str(e)}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç —Å —Ç–µ–º –∂–µ email
                try:
                    duplicate_data = user_data.copy()
                    duplicate_data["username"] = f"{self.test_prefix}duplicate_test2"
                    
                    response = await self.client.post(f"{self.runner.BASE_URL}/users/", 
                                                   json=duplicate_data, headers=headers)
                    if response.status_code in [400, 422, 409]:
                        self.results.add_test("–î—É–±–ª–∏–∫–∞—Ç—ã - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π email", True, 
                                            "–î—É–±–ª–∏–∫–∞—Ç email –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
                    elif response.status_code == 201:
                        # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                        dup_user = response.json()
                        self.created_data['users'].append(dup_user["id"])
                        self.results.add_test("–î—É–±–ª–∏–∫–∞—Ç—ã - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π email", False, 
                                            "–î—É–±–ª–∏–∫–∞—Ç email –±—ã–ª —Å–æ–∑–¥–∞–Ω (–Ω–µ –¥–æ–ª–∂–µ–Ω)")
                    else:
                        self.results.add_test("–î—É–±–ª–∏–∫–∞—Ç—ã - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π email", False, 
                                            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
                except Exception as e:
                    self.results.add_test("–î—É–±–ª–∏–∫–∞—Ç—ã - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π email", False, 
                                        f"–û—à–∏–±–∫–∞: {str(e)}")
            else:
                self.results.add_test("–î—É–±–ª–∏–∫–∞—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ", False, 
                                    f"–ö–æ–¥: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
        except Exception as e:
            self.results.add_test("–î—É–±–ª–∏–∫–∞—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ", False, f"–û—à–∏–±–∫–∞: {str(e)}")
