#!/usr/bin/env python3
"""
QRes OS 4 - Categories Tests
–¢–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –±–ª—é–¥
"""
from tests.test_base import BaseTestSuite, TestRunner


class CategoriesTestSuite(BaseTestSuite):
    """–¢–µ—Å—Ç–æ–≤—ã–π —Å—é–∏—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    
    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        print("\nüìÇ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò")
        print("=" * 50)
        
        await self.test_category_crud()
        await self.test_category_validation()
        await self.test_category_ordering()
        await self.test_category_hierarchy()
        await self.test_category_status()
        await self.test_category_search()
    
    async def test_category_crud(self):
        """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        create_data = {
            "name": f"{self.test_prefix}Test Category",
            "description": "Test category for automated testing",
            "sort_order": 1,
            "is_active": True,
            "image_url": f"https://example.com/{self.test_prefix}category.jpg"
        }
        
        update_data = {
            "name": f"{self.test_prefix}Updated Category",
            "description": "Updated test category",
            "sort_order": 2,
            "is_active": True,
            "image_url": f"https://example.com/{self.test_prefix}category_updated.jpg"
        }
        
        required_fields = ["id", "name", "sort_order", "is_active", "created_at"]
        
        category_id = await self.test_crud_operations(
            endpoint="categories",
            create_data=create_data,
            update_data=update_data,
            data_type="categories",
            required_fields=required_fields
        )
        
        return category_id
    
    async def test_category_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        invalid_categories = [
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –∏–º—è
            {
                "description": "Category without name",
                "sort_order": 1,
                "is_active": True
            },
            # –ü—É—Å—Ç–æ–µ –∏–º—è
            {
                "name": "",
                "description": "Category with empty name",
                "sort_order": 1,
                "is_active": True
            },
            # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            {
                "name": f"{self.test_prefix}Invalid Order Category",
                "description": "Category with invalid sort order",
                "sort_order": -1,
                "is_active": True
            },
            # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è (–µ—Å–ª–∏ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
            {
                "name": f"{self.test_prefix}" + "Very Long Category Name " * 10,
                "description": "Category with very long name",
                "sort_order": 1,
                "is_active": True
            }
        ]
        
        headers = self.get_auth_headers()
        
        for i, category_data in enumerate(invalid_categories):
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                               json=category_data, headers=headers)
                if response.status_code in [400, 422]:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #{i+1}", True, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
                elif response.status_code == 201:
                    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–ª–∞—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    category = response.json()
                    self.created_data['categories'].append(category["id"])
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #{i+1}", False, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã)")
                else:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #{i+1}", False, 
                                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #{i+1}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_category_ordering(self):
        """–¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Ä–∞–∑–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        categories_data = [
            {
                "name": f"{self.test_prefix}Third Category",
                "description": "Third in order",
                "sort_order": 3,
                "is_active": True
            },
            {
                "name": f"{self.test_prefix}First Category",
                "description": "First in order",
                "sort_order": 1,
                "is_active": True
            },
            {
                "name": f"{self.test_prefix}Second Category",
                "description": "Second in order",
                "sort_order": 2,
                "is_active": True
            }
        ]
        
        created_categories = []
        for category_data in categories_data:
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                               json=category_data, headers=headers)
                if response.status_code == 201:
                    category = response.json()
                    self.created_data['categories'].append(category["id"])
                    created_categories.append(category)
                    self.results.add_test(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", True, 
                                        f"–°–æ–∑–¥–∞–Ω–∞: {category['name']}")
                else:
                    self.results.add_test(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/categories/", headers=headers)
            if response.status_code == 200:
                categories = response.json()
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                test_categories = [c for c in categories if c["name"].startswith(self.test_prefix)]
                
                if len(test_categories) >= 3:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                    sorted_correctly = True
                    for i in range(len(test_categories) - 1):
                        if test_categories[i]["sort_order"] > test_categories[i + 1]["sort_order"]:
                            sorted_correctly = False
                            break
                    
                    if sorted_correctly:
                        self.results.add_test("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", True, 
                                            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    else:
                        self.results.add_test("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", True, 
                                            "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", warning=True)
                else:
                    self.results.add_test("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", True, 
                                        "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", warning=True)
            else:
                self.results.add_test("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_category_hierarchy(self):
        """–¢–µ—Å—Ç –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        parent_data = {
            "name": f"{self.test_prefix}Parent Category",
            "description": "Parent category for hierarchy test",
            "sort_order": 1,
            "is_active": True
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                           json=parent_data, headers=headers)
            if response.status_code == 201:
                parent_category = response.json()
                parent_id = parent_category["id"]
                self.created_data['categories'].append(parent_id)
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥–æ—á–µ—Ä–Ω—é—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                child_data = {
                    "name": f"{self.test_prefix}Child Category",
                    "description": "Child category for hierarchy test",
                    "sort_order": 1,
                    "parent_id": parent_id,
                    "is_active": True
                }
                
                try:
                    response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                                   json=child_data, headers=headers)
                    if response.status_code == 201:
                        child_category = response.json()
                        self.created_data['categories'].append(child_category["id"])
                        
                        if child_category.get("parent_id") == parent_id:
                            self.results.add_test("–ò–µ—Ä–∞—Ä—Ö–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π", True, 
                                                "–î–æ—á–µ—Ä–Ω—è—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        else:
                            self.results.add_test("–ò–µ—Ä–∞—Ä—Ö–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π", True, 
                                                "–ü–æ–ª–µ parent_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–∏–µ—Ä–∞—Ä—Ö–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)", 
                                                warning=True)
                    elif response.status_code in [400, 422]:
                        self.results.add_test("–ò–µ—Ä–∞—Ä—Ö–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π", True, 
                                            "–ò–µ—Ä–∞—Ä—Ö–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
                    else:
                        self.results.add_test("–ò–µ—Ä–∞—Ä—Ö–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π", False, 
                                            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
                except Exception as e:
                    self.results.add_test("–ò–µ—Ä–∞—Ä—Ö–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π", True, 
                                        "–ò–µ—Ä–∞—Ä—Ö–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", warning=True)
            else:
                self.results.add_test("–ò–µ—Ä–∞—Ä—Ö–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π - —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ò–µ—Ä–∞—Ä—Ö–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_category_status(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        active_category = {
            "name": f"{self.test_prefix}Active Category",
            "description": "Active category test",
            "sort_order": 1,
            "is_active": True
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                           json=active_category, headers=headers)
            if response.status_code == 201:
                category = response.json()
                self.created_data['categories'].append(category["id"])
                
                if category["is_active"] is True:
                    self.results.add_test("–°—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –∞–∫—Ç–∏–≤–Ω–∞—è", True, 
                                        "–ê–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    self.results.add_test("–°—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –∞–∫—Ç–∏–≤–Ω–∞—è", False, 
                                        f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {category['is_active']}")
            else:
                self.results.add_test("–°—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –∞–∫—Ç–∏–≤–Ω–∞—è", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–°—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –∞–∫—Ç–∏–≤–Ω–∞—è", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        inactive_category = {
            "name": f"{self.test_prefix}Inactive Category",
            "description": "Inactive category test",
            "sort_order": 2,
            "is_active": False
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                           json=inactive_category, headers=headers)
            if response.status_code == 201:
                category = response.json()
                self.created_data['categories'].append(category["id"])
                
                if category["is_active"] is False:
                    self.results.add_test("–°—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è", True, 
                                        "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    self.results.add_test("–°—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è", False, 
                                        f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {category['is_active']}")
            else:
                self.results.add_test("–°—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–°—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_category_search(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_categories = [
            {
                "name": f"{self.test_prefix}Search Category 1",
                "description": "First search category",
                "sort_order": 1,
                "is_active": True
            },
            {
                "name": f"{self.test_prefix}Search Category 2",
                "description": "Second search category",
                "sort_order": 2,
                "is_active": False
            },
            {
                "name": f"{self.test_prefix}Different Name",
                "description": "Different category",
                "sort_order": 3,
                "is_active": True
            }
        ]
        
        created_categories = []
        for category_data in search_categories:
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                               json=category_data, headers=headers)
                if response.status_code == 201:
                    category = response.json()
                    self.created_data['categories'].append(category["id"])
                    created_categories.append(category)
            except Exception:
                continue
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/categories/", headers=headers)
            if response.status_code == 200:
                categories = response.json()
                if len(categories) >= len(created_categories):
                    self.results.add_test("–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", True, 
                                        f"–ü–æ–ª—É—á–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                else:
                    self.results.add_test("–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", False, 
                                        f"–ü–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å")
            else:
                self.results.add_test("–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
        if created_categories:
            category_id = created_categories[0]["id"]
            try:
                response = await self.client.get(f"{self.runner.BASE_URL}/categories/{category_id}", 
                                              headers=headers)
                if response.status_code == 200:
                    category = response.json()
                    if category["id"] == category_id:
                        self.results.add_test("–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –ø–æ ID", True, 
                                            f"–ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name']}")
                    else:
                        self.results.add_test("–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –ø–æ ID", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: –æ–∂–∏–¥–∞–ª—Å—è ID {category_id}")
                else:
                    self.results.add_test("–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –ø–æ ID", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test("–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –ø–æ ID", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/categories/?is_active=true", 
                                          headers=headers)
            if response.status_code == 200:
                categories = response.json()
                active_count = sum(1 for cat in categories if cat.get("is_active") is True)
                self.results.add_test("–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö", True, 
                                    f"–ù–∞–π–¥–µ–Ω–æ {active_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π", 
                                    warning=(active_count != len(categories)))
            elif response.status_code == 422:
                self.results.add_test("–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö", True, 
                                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
            else:
                self.results.add_test("–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö", True, 
                                "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", warning=True)
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        try:
            search_term = "Search"
            response = await self.client.get(f"{self.runner.BASE_URL}/categories/?search={search_term}", 
                                          headers=headers)
            if response.status_code == 200:
                categories = response.json()
                matching_categories = [c for c in categories if search_term.lower() in c["name"].lower()]
                if len(matching_categories) > 0:
                    self.results.add_test("–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –ø–æ –∏–º–µ–Ω–∏", True, 
                                        f"–ù–∞–π–¥–µ–Ω–æ {len(matching_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å '{search_term}'")
                else:
                    self.results.add_test("–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –ø–æ –∏–º–µ–Ω–∏", True, 
                                        "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç", warning=True)
            elif response.status_code == 422:
                self.results.add_test("–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –ø–æ –∏–º–µ–Ω–∏", True, 
                                    "–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
            else:
                self.results.add_test("–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –ø–æ –∏–º–µ–Ω–∏", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –ø–æ –∏–º–µ–Ω–∏", True, 
                                "–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω", warning=True)
