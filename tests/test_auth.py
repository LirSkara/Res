#!/usr/bin/env python3
"""
QRes OS 4 - Authentication Tests
–¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""
from tests.test_base import BaseTestSuite, TestRunner


class AuthTestSuite(BaseTestSuite):
    """–¢–µ—Å—Ç–æ–≤—ã–π —Å—é–∏—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        print("\nüîê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò")
        print("=" * 50)
        
        await self.test_login_valid_credentials()
        await self.test_login_invalid_credentials()
        await self.test_token_validation()
        await self.test_logout()
        await self.test_password_requirements()
        await self.test_token_expiration()
    
    async def test_login_valid_credentials(self):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        auth_data = {
            "username": f"{self.test_prefix}testuser",
            "password": "testpassword123"
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/auth/login", data=auth_data)
            if response.status_code == 200:
                token_data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
                if "access_token" in token_data:
                    self.results.add_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", True, 
                                        "–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
                    if token_data.get("token_type") == "bearer":
                        self.results.add_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞", True, "Bearer —Ç–æ–∫–µ–Ω")
                    else:
                        self.results.add_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞", False, 
                                            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {token_data.get('token_type')}")
                else:
                    self.results.add_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", False, 
                                        "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ")
            else:
                self.results.add_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", False, 
                                    f"–ö–æ–¥: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
        except Exception as e:
            self.results.add_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_login_invalid_credentials(self):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        invalid_credentials = [
            {"username": "nonexistent", "password": "wrongpass"},
            {"username": f"{self.test_prefix}testuser", "password": "wrongpass"},
            {"username": "wronguser", "password": "testpassword123"},
            {"username": "", "password": "testpassword123"},
            {"username": f"{self.test_prefix}testuser", "password": ""},
        ]
        
        for i, auth_data in enumerate(invalid_credentials):
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/auth/login", data=auth_data)
                if response.status_code == 401:
                    self.results.add_test(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ #{i+1}", True, 
                                        "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
                else:
                    self.results.add_test(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ #{i+1}", False, 
                                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ #{i+1}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_token_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞"""
        headers = self.get_auth_headers()
        
        # –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/auth/me", headers=headers)
            if response.status_code == 200:
                user_data = response.json()
                if user_data.get("username") == f"{self.test_prefix}testuser":
                    self.results.add_test("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ - –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω", True, 
                                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['username']}")
                else:
                    self.results.add_test("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ - –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω", False, 
                                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.get('username')}")
            else:
                self.results.add_test("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ - –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ - –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
        invalid_headers = {"Authorization": "Bearer invalid_token_123"}
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/auth/me", headers=invalid_headers)
            if response.status_code == 401:
                self.results.add_test("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω", True, 
                                    "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            else:
                self.results.add_test("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω", False, 
                                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/auth/me")
            if response.status_code == 401:
                self.results.add_test("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ - –±–µ–∑ —Ç–æ–∫–µ–Ω–∞", True, 
                                    "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            else:
                self.results.add_test("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ - –±–µ–∑ —Ç–æ–∫–µ–Ω–∞", False, 
                                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ - –±–µ–∑ —Ç–æ–∫–µ–Ω–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_logout(self):
        """–¢–µ—Å—Ç –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –µ—Å–ª–∏ –µ—Å—Ç—å endpoint –¥–ª—è logout
        try:
            headers = self.get_auth_headers()
            response = await self.client.post(f"{self.runner.BASE_URL}/auth/logout", headers=headers)
            
            if response.status_code in [200, 404]:  # 404 –µ—Å–ª–∏ endpoint –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
                if response.status_code == 200:
                    self.results.add_test("–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", True, "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥")
                else:
                    self.results.add_test("–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", True, 
                                        "Endpoint –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)", warning=True)
            else:
                self.results.add_test("–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", False, f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", True, 
                                "Endpoint –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)", warning=True)
    
    async def test_password_requirements(self):
        """–¢–µ—Å—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø–∞—Ä–æ–ª—é –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        weak_passwords = [
            "123",          # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
            "password",     # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å
            "12345678",     # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
            "abcdefgh",     # –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã
            "",             # –ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å
        ]
        
        for i, weak_password in enumerate(weak_passwords):
            user_data = {
                "username": f"{self.test_prefix}weakpass_{i}",
                "email": f"{self.test_prefix}weakpass_{i}@example.com",
                "password": weak_password,
                "full_name": f"Weak Pass User {i}",
                "role": "user"
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/users/", json=user_data)
                if response.status_code in [400, 422]:  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω
                    self.results.add_test(f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é - —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å #{i+1}", True, 
                                        f"–ü–∞—Ä–æ–ª—å '{weak_password}' –æ—Ç–∫–ª–æ–Ω–µ–Ω")
                elif response.status_code == 201:
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    user = response.json()
                    self.created_data['users'].append(user["id"])
                    self.results.add_test(f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é - —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å #{i+1}", True, 
                                        f"–ü–∞—Ä–æ–ª—å '{weak_password}' –ø—Ä–∏–Ω—è—Ç (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)", 
                                        warning=True)
                else:
                    self.results.add_test(f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é - —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å #{i+1}", False, 
                                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é - —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å #{i+1}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_token_expiration(self):
        """–¢–µ—Å—Ç –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)"""
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–ª–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –±–µ–∑ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–µ–º
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤ —Ç–æ–∫–µ–Ω–µ
        
        auth_data = {
            "username": f"{self.test_prefix}testuser",
            "password": "testpassword123"
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/auth/login", data=auth_data)
            if response.status_code == 200:
                token_data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
                if "expires_in" in token_data or "exp" in token_data:
                    self.results.add_test("–ò—Å—Ç–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", True, 
                                        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                else:
                    self.results.add_test("–ò—Å—Ç–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", True, 
                                        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ)", 
                                        warning=True)
            else:
                self.results.add_test("–ò—Å—Ç–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞", False, 
                                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ò—Å—Ç–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
