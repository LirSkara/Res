#!/usr/bin/env python3
"""
QRes OS 4 - Tables Tests
–¢–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–∞–º–∏
"""
from tests.test_base import BaseTestSuite, TestRunner


class TablesTestSuite(BaseTestSuite):
    """–¢–µ—Å—Ç–æ–≤—ã–π —Å—é–∏—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–∞–º–∏"""
    
    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å—Ç–æ–ª–æ–≤"""
        print("\nü™ë –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–¢–û–õ–ê–ú–ò")
        print("=" * 50)
        
        await self.test_table_crud()
        await self.test_table_validation()
        await self.test_table_location_relationship()
        await self.test_table_status()
        await self.test_table_capacity()
        await self.test_table_qr_code()
    
    async def test_table_crud(self):
        """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å—Ç–æ–ª–∞–º–∏"""
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Å—Ç–æ–ª–æ–≤
        location_data = {
            "name": f"{self.test_prefix}Table Test Location",
            "address": "123 Table Street",
            "city": "Table City",
            "country": "Table Country",
            "is_active": True
        }
        
        headers = self.get_auth_headers()
        location_response = await self.client.post(f"{self.runner.BASE_URL}/locations/", 
                                                 json=location_data, headers=headers)
        
        if location_response.status_code != 201:
            self.results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–æ–ª–æ–≤", False, 
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é: {location_response.status_code}")
            return
        
        location = location_response.json()
        location_id = location["id"]
        self.created_data['locations'].append(location_id)
        
        create_data = {
            "number": f"{self.test_prefix}T001",
            "location_id": location_id,
            "capacity": 4,
            "status": "available",
            "qr_code": f"{self.test_prefix}qr_table_001",
            "x_position": 100.5,
            "y_position": 200.5,
            "is_active": True
        }
        
        update_data = {
            "number": f"{self.test_prefix}T001_UPDATED",
            "location_id": location_id,
            "capacity": 6,
            "status": "occupied",
            "qr_code": f"{self.test_prefix}qr_table_001_updated",
            "x_position": 150.5,
            "y_position": 250.5,
            "is_active": True
        }
        
        required_fields = ["id", "number", "location_id", "capacity", "status", "is_active", "created_at"]
        
        table_id = await self.test_crud_operations(
            endpoint="tables",
            create_data=create_data,
            update_data=update_data,
            data_type="tables",
            required_fields=required_fields
        )
        
        return table_id
    
    async def test_table_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–∞"""
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        headers = self.get_auth_headers()
        location_data = {
            "name": f"{self.test_prefix}Validation Location",
            "address": "123 Validation Street",
            "city": "Validation City",
            "country": "Validation Country",
            "is_active": True
        }
        
        location_response = await self.client.post(f"{self.runner.BASE_URL}/locations/", 
                                                 json=location_data, headers=headers)
        if location_response.status_code != 201:
            self.results.add_test("–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–æ–ª–æ–≤ - —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏", False, 
                                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤")
            return
        
        location = location_response.json()
        location_id = location["id"]
        self.created_data['locations'].append(location_id)
        
        invalid_tables = [
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞
            {
                "location_id": location_id,
                "capacity": 4,
                "status": "available"
            },
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è –ª–æ–∫–∞—Ü–∏—è
            {
                "number": f"{self.test_prefix}T_NO_LOCATION",
                "capacity": 4,
                "status": "available"
            },
            # –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            {
                "number": f"{self.test_prefix}T_INVALID_CAPACITY",
                "location_id": location_id,
                "capacity": 0,
                "status": "available"
            },
            # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            {
                "number": f"{self.test_prefix}T_INVALID_STATUS",
                "location_id": location_id,
                "capacity": 4,
                "status": "invalid_status"
            },
            # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–∫–∞—Ü–∏—è
            {
                "number": f"{self.test_prefix}T_FAKE_LOCATION",
                "location_id": 99999,
                "capacity": 4,
                "status": "available"
            }
        ]
        
        for i, table_data in enumerate(invalid_tables):
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/tables/", 
                                               json=table_data, headers=headers)
                if response.status_code in [400, 422]:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–æ–ª–∞ #{i+1}", True, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
                elif response.status_code == 201:
                    # –ï—Å–ª–∏ —Å—Ç–æ–ª —Å–æ–∑–¥–∞–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    table = response.json()
                    self.created_data['tables'].append(table["id"])
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–æ–ª–∞ #{i+1}", False, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã)")
                else:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–æ–ª–∞ #{i+1}", False, 
                                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–æ–ª–∞ #{i+1}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_table_location_relationship(self):
        """–¢–µ—Å—Ç —Å–≤—è–∑–∏ —Å—Ç–æ–ª–æ–≤ —Å –ª–æ–∫–∞—Ü–∏—è–º–∏"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–æ–∫–∞—Ü–∏–π
        locations = []
        for i in range(2):
            location_data = {
                "name": f"{self.test_prefix}Relation Location {i}",
                "address": f"123 Relation Street {i}",
                "city": f"Relation City {i}",
                "country": "Relation Country",
                "is_active": True
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/locations/", 
                                               json=location_data, headers=headers)
                if response.status_code == 201:
                    location = response.json()
                    self.created_data['locations'].append(location["id"])
                    locations.append(location)
            except Exception:
                continue
        
        if len(locations) < 2:
            self.results.add_test("–°–≤—è–∑—å —Å—Ç–æ–ª-–ª–æ–∫–∞—Ü–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π", False, 
                                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–æ–∫–∞—Ü–∏–π")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª—ã –≤ —Ä–∞–∑–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö
        for i, location in enumerate(locations):
            table_data = {
                "number": f"{self.test_prefix}REL_T{i+1}",
                "location_id": location["id"],
                "capacity": 4,
                "status": "available",
                "is_active": True
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/tables/", 
                                               json=table_data, headers=headers)
                if response.status_code == 201:
                    table = response.json()
                    self.created_data['tables'].append(table["id"])
                    
                    if table["location_id"] == location["id"]:
                        self.results.add_test(f"–°–≤—è–∑—å —Å—Ç–æ–ª-–ª–æ–∫–∞—Ü–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ #{i+1}", True, 
                                            f"–°—Ç–æ–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ª–æ–∫–∞—Ü–∏–∏ {location['name']}")
                    else:
                        self.results.add_test(f"–°–≤—è–∑—å —Å—Ç–æ–ª-–ª–æ–∫–∞—Ü–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ #{i+1}", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –ª–æ–∫–∞—Ü–∏–∏")
                else:
                    self.results.add_test(f"–°–≤—è–∑—å —Å—Ç–æ–ª-–ª–æ–∫–∞—Ü–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ #{i+1}", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–°–≤—è–∑—å —Å—Ç–æ–ª-–ª–æ–∫–∞—Ü–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ #{i+1}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–ª–æ–≤ –ø–æ –ª–æ–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        if locations:
            location_id = locations[0]["id"]
            try:
                response = await self.client.get(f"{self.runner.BASE_URL}/tables/?location_id={location_id}", 
                                              headers=headers)
                if response.status_code == 200:
                    tables = response.json()
                    location_tables = [t for t in tables if t.get("location_id") == location_id]
                    self.results.add_test("–°–≤—è–∑—å —Å—Ç–æ–ª-–ª–æ–∫–∞—Ü–∏—è - —Ñ–∏–ª—å—Ç—Ä –ø–æ –ª–æ–∫–∞—Ü–∏–∏", True, 
                                        f"–ù–∞–π–¥–µ–Ω–æ {len(location_tables)} —Å—Ç–æ–ª–æ–≤ –≤ –ª–æ–∫–∞—Ü–∏–∏")
                elif response.status_code == 422:
                    self.results.add_test("–°–≤—è–∑—å —Å—Ç–æ–ª-–ª–æ–∫–∞—Ü–∏—è - —Ñ–∏–ª—å—Ç—Ä –ø–æ –ª–æ–∫–∞—Ü–∏–∏", True, 
                                        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
                else:
                    self.results.add_test("–°–≤—è–∑—å —Å—Ç–æ–ª-–ª–æ–∫–∞—Ü–∏—è - —Ñ–∏–ª—å—Ç—Ä –ø–æ –ª–æ–∫–∞—Ü–∏–∏", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test("–°–≤—è–∑—å —Å—Ç–æ–ª-–ª–æ–∫–∞—Ü–∏—è - —Ñ–∏–ª—å—Ç—Ä –ø–æ –ª–æ–∫–∞—Ü–∏–∏", True, 
                                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", warning=True)
    
    async def test_table_status(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–æ–≤ —Å—Ç–æ–ª–æ–≤"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
        location_data = {
            "name": f"{self.test_prefix}Status Location",
            "address": "123 Status Street",
            "city": "Status City",
            "country": "Status Country",
            "is_active": True
        }
        
        location_response = await self.client.post(f"{self.runner.BASE_URL}/locations/", 
                                                 json=location_data, headers=headers)
        if location_response.status_code != 201:
            self.results.add_test("–°—Ç–∞—Ç—É—Å —Å—Ç–æ–ª–æ–≤ - —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏", False, 
                                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é")
            return
        
        location = location_response.json()
        location_id = location["id"]
        self.created_data['locations'].append(location_id)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        statuses = ["available", "occupied", "reserved", "maintenance"]
        
        for i, status in enumerate(statuses):
            table_data = {
                "number": f"{self.test_prefix}STATUS_T{i+1}",
                "location_id": location_id,
                "capacity": 4,
                "status": status,
                "is_active": True
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/tables/", 
                                               json=table_data, headers=headers)
                if response.status_code == 201:
                    table = response.json()
                    self.created_data['tables'].append(table["id"])
                    
                    if table["status"] == status:
                        self.results.add_test(f"–°—Ç–∞—Ç—É—Å —Å—Ç–æ–ª–∞ - {status}", True, 
                                            f"–°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    else:
                        self.results.add_test(f"–°—Ç–∞—Ç—É—Å —Å—Ç–æ–ª–∞ - {status}", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: –æ–∂–∏–¥–∞–ª—Å—è {status}, –ø–æ–ª—É—á–µ–Ω {table['status']}")
                else:
                    self.results.add_test(f"–°—Ç–∞—Ç—É—Å —Å—Ç–æ–ª–∞ - {status}", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–°—Ç–∞—Ç—É—Å —Å—Ç–æ–ª–∞ - {status}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_table_capacity(self):
        """–¢–µ—Å—Ç –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å—Ç–æ–ª–æ–≤"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        location_data = {
            "name": f"{self.test_prefix}Capacity Location",
            "address": "123 Capacity Street",
            "city": "Capacity City",
            "country": "Capacity Country",
            "is_active": True
        }
        
        location_response = await self.client.post(f"{self.runner.BASE_URL}/locations/", 
                                                 json=location_data, headers=headers)
        if location_response.status_code != 201:
            self.results.add_test("–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å—Ç–æ–ª–æ–≤ - —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏", False, 
                                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é")
            return
        
        location = location_response.json()
        location_id = location["id"]
        self.created_data['locations'].append(location_id)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        capacities = [1, 2, 4, 6, 8, 10, 12]
        
        for capacity in capacities:
            table_data = {
                "number": f"{self.test_prefix}CAP_{capacity}_T",
                "location_id": location_id,
                "capacity": capacity,
                "status": "available",
                "is_active": True
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/tables/", 
                                               json=table_data, headers=headers)
                if response.status_code == 201:
                    table = response.json()
                    self.created_data['tables'].append(table["id"])
                    
                    if table["capacity"] == capacity:
                        self.results.add_test(f"–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å—Ç–æ–ª–∞ - {capacity} —á–µ–ª.", True, 
                                            "–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    else:
                        self.results.add_test(f"–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å—Ç–æ–ª–∞ - {capacity} —á–µ–ª.", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –æ–∂–∏–¥–∞–ª–æ—Å—å {capacity}, –ø–æ–ª—É—á–µ–Ω–æ {table['capacity']}")
                else:
                    self.results.add_test(f"–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å—Ç–æ–ª–∞ - {capacity} —á–µ–ª.", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å—Ç–æ–ª–∞ - {capacity} —á–µ–ª.", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        invalid_capacities = [0, -1, -5]
        
        for capacity in invalid_capacities:
            table_data = {
                "number": f"{self.test_prefix}INVALID_CAP_{capacity}_T",
                "location_id": location_id,
                "capacity": capacity,
                "status": "available",
                "is_active": True
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/tables/", 
                                               json=table_data, headers=headers)
                if response.status_code in [400, 422]:
                    self.results.add_test(f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - {capacity}", True, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
                elif response.status_code == 201:
                    table = response.json()
                    self.created_data['tables'].append(table["id"])
                    self.results.add_test(f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - {capacity}", False, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∞")
                else:
                    self.results.add_test(f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - {capacity}", False, 
                                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - {capacity}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_table_qr_code(self):
        """–¢–µ—Å—Ç QR-–∫–æ–¥–æ–≤ —Å—Ç–æ–ª–æ–≤"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤ QR-–∫–æ–¥–æ–≤
        location_data = {
            "name": f"{self.test_prefix}QR Location",
            "address": "123 QR Street",
            "city": "QR City",
            "country": "QR Country",
            "is_active": True
        }
        
        location_response = await self.client.post(f"{self.runner.BASE_URL}/locations/", 
                                                 json=location_data, headers=headers)
        if location_response.status_code != 201:
            self.results.add_test("QR-–∫–æ–¥—ã —Å—Ç–æ–ª–æ–≤ - —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏", False, 
                                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é")
            return
        
        location = location_response.json()
        location_id = location["id"]
        self.created_data['locations'].append(location_id)
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–æ–ª–∞ —Å QR-–∫–æ–¥–æ–º
        table_data = {
            "number": f"{self.test_prefix}QR_T001",
            "location_id": location_id,
            "capacity": 4,
            "status": "available",
            "qr_code": f"{self.test_prefix}unique_qr_12345",
            "is_active": True
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/tables/", 
                                           json=table_data, headers=headers)
            if response.status_code == 201:
                table = response.json()
                self.created_data['tables'].append(table["id"])
                
                if table.get("qr_code") == table_data["qr_code"]:
                    self.results.add_test("QR-–∫–æ–¥ —Å—Ç–æ–ª–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ", True, 
                                        f"QR-–∫–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {table['qr_code']}")
                else:
                    self.results.add_test("QR-–∫–æ–¥ —Å—Ç–æ–ª–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ", False, 
                                        f"QR-–∫–æ–¥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É")
            else:
                self.results.add_test("QR-–∫–æ–¥ —Å—Ç–æ–ª–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("QR-–∫–æ–¥ —Å—Ç–æ–ª–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ QR-–∫–æ–¥–æ–≤
        duplicate_table_data = {
            "number": f"{self.test_prefix}QR_T002",
            "location_id": location_id,
            "capacity": 4,
            "status": "available",
            "qr_code": f"{self.test_prefix}unique_qr_12345",  # –¢–æ—Ç –∂–µ QR-–∫–æ–¥
            "is_active": True
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/tables/", 
                                           json=duplicate_table_data, headers=headers)
            if response.status_code in [400, 422, 409]:
                self.results.add_test("QR-–∫–æ–¥ —Å—Ç–æ–ª–∞ - —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å", True, 
                                    "–î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è QR-–∫–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            elif response.status_code == 201:
                table = response.json()
                self.created_data['tables'].append(table["id"])
                self.results.add_test("QR-–∫–æ–¥ —Å—Ç–æ–ª–∞ - —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å", False, 
                                    "–î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è QR-–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω)")
            else:
                self.results.add_test("QR-–∫–æ–¥ —Å—Ç–æ–ª–∞ - —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å", False, 
                                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("QR-–∫–æ–¥ —Å—Ç–æ–ª–∞ - —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å", False, f"–û—à–∏–±–∫–∞: {str(e)}")
