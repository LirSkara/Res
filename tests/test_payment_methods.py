#!/usr/bin/env python3
"""
QRes OS 4 - Payment Methods Tests
–¢–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
"""
from tests.test_base import BaseTestSuite, TestRunner


class PaymentMethodsTestSuite(BaseTestSuite):
    """–¢–µ—Å—Ç–æ–≤—ã–π —Å—é–∏—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã"""
    
    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã"""
        print("\nüí≥ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ü–û–°–û–ë–û–í –û–ü–õ–ê–¢–´")
        print("=" * 50)
        
        await self.test_payment_method_crud()
        await self.test_payment_method_validation()
        await self.test_payment_method_types()
        await self.test_payment_method_status()
        await self.test_payment_method_configuration()
        await self.test_payment_method_search()
    
    async def test_payment_method_crud(self):
        """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã"""
        create_data = {
            "name": f"{self.test_prefix}Test Payment Method",
            "type": "card",
            "description": "Test payment method for automated testing",
            "is_active": True,
            "is_default": False,
            "commission_rate": 2.5,
            "min_amount": 1.00,
            "max_amount": 10000.00,
            "config": {
                "api_key": "test_key_123",
                "webhook_url": "https://example.com/webhook"
            }
        }
        
        update_data = {
            "name": f"{self.test_prefix}Updated Payment Method",
            "type": "cash",
            "description": "Updated test payment method",
            "is_active": True,
            "is_default": True,
            "commission_rate": 0.0,
            "min_amount": 0.01,
            "max_amount": 50000.00,
            "config": {}
        }
        
        required_fields = ["id", "name", "type", "is_active", "created_at"]
        
        payment_method_id = await self.test_crud_operations(
            endpoint="payment-methods",
            create_data=create_data,
            update_data=update_data,
            data_type="payment_methods",
            required_fields=required_fields
        )
        
        return payment_method_id
    
    async def test_payment_method_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        invalid_payment_methods = [
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –∏–º—è
            {
                "type": "card",
                "description": "Payment method without name",
                "is_active": True
            },
            # –ü—É—Å—Ç–æ–µ –∏–º—è
            {
                "name": "",
                "type": "card",
                "description": "Payment method with empty name",
                "is_active": True
            },
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø
            {
                "name": f"{self.test_prefix}No Type Payment",
                "description": "Payment method without type",
                "is_active": True
            },
            # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–∏–ø
            {
                "name": f"{self.test_prefix}Invalid Type Payment",
                "type": "invalid_type",
                "description": "Payment method with invalid type",
                "is_active": True
            },
            # –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è
            {
                "name": f"{self.test_prefix}Invalid Commission Payment",
                "type": "card",
                "description": "Payment method with invalid commission",
                "commission_rate": -5.0,
                "is_active": True
            },
            # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ª–∏–º–∏—Ç—ã
            {
                "name": f"{self.test_prefix}Invalid Limits Payment",
                "type": "card",
                "description": "Payment method with invalid limits",
                "min_amount": 100.0,
                "max_amount": 50.0,  # min –±–æ–ª—å—à–µ max
                "is_active": True
            }
        ]
        
        headers = self.get_auth_headers()
        
        for i, payment_data in enumerate(invalid_payment_methods):
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/payment-methods/", 
                                               json=payment_data, headers=headers)
                if response.status_code in [400, 422]:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã #{i+1}", True, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
                elif response.status_code == 201:
                    # –ï—Å–ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    payment_method = response.json()
                    self.created_data['payment_methods'].append(payment_method["id"])
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã #{i+1}", False, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã)")
                else:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã #{i+1}", False, 
                                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã #{i+1}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_payment_method_types(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã"""
        headers = self.get_auth_headers()
        
        # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–ª–∞—Ç—ã
        payment_types = [
            {
                "type": "cash",
                "name": f"{self.test_prefix}Cash Payment",
                "description": "Cash payment method",
                "commission_rate": 0.0
            },
            {
                "type": "card",
                "name": f"{self.test_prefix}Card Payment",
                "description": "Credit/Debit card payment",
                "commission_rate": 2.5
            },
            {
                "type": "bank_transfer",
                "name": f"{self.test_prefix}Bank Transfer",
                "description": "Bank transfer payment",
                "commission_rate": 1.0
            },
            {
                "type": "digital_wallet",
                "name": f"{self.test_prefix}Digital Wallet",
                "description": "Digital wallet payment",
                "commission_rate": 1.5
            },
            {
                "type": "cryptocurrency",
                "name": f"{self.test_prefix}Crypto Payment",
                "description": "Cryptocurrency payment",
                "commission_rate": 3.0
            }
        ]
        
        created_payment_methods = []
        for payment_type_data in payment_types:
            payment_data = {
                "name": payment_type_data["name"],
                "type": payment_type_data["type"],
                "description": payment_type_data["description"],
                "commission_rate": payment_type_data["commission_rate"],
                "is_active": True,
                "is_default": False
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/payment-methods/", 
                                               json=payment_data, headers=headers)
                if response.status_code == 201:
                    payment_method = response.json()
                    self.created_data['payment_methods'].append(payment_method["id"])
                    created_payment_methods.append(payment_method)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø
                    if payment_method["type"] == payment_type_data["type"]:
                        self.results.add_test(f"–¢–∏–ø –æ–ø–ª–∞—Ç—ã - {payment_type_data['type']}", True, 
                                            f"–¢–∏–ø —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {payment_method['type']}")
                    else:
                        self.results.add_test(f"–¢–∏–ø –æ–ø–ª–∞—Ç—ã - {payment_type_data['type']}", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: –æ–∂–∏–¥–∞–ª—Å—è {payment_type_data['type']}, –ø–æ–ª—É—á–µ–Ω {payment_method['type']}")
                else:
                    # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∏–ø—ã –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è
                    if response.status_code in [400, 422]:
                        self.results.add_test(f"–¢–∏–ø –æ–ø–ª–∞—Ç—ã - {payment_type_data['type']}", True, 
                                            f"–¢–∏–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)", warning=True)
                    else:
                        self.results.add_test(f"–¢–∏–ø –æ–ø–ª–∞—Ç—ã - {payment_type_data['type']}", False, 
                                            f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–¢–∏–ø –æ–ø–ª–∞—Ç—ã - {payment_type_data['type']}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –ø–æ —Ç–∏–ø—É (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        if created_payment_methods:
            test_type = created_payment_methods[0]["type"]
            try:
                response = await self.client.get(f"{self.runner.BASE_URL}/payment-methods/?type={test_type}", 
                                              headers=headers)
                if response.status_code == 200:
                    payment_methods = response.json()
                    type_methods = [pm for pm in payment_methods if pm.get("type") == test_type]
                    self.results.add_test("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –æ–ø–ª–∞—Ç—ã", True, 
                                        f"–ù–∞–π–¥–µ–Ω–æ {len(type_methods)} —Å–ø–æ—Å–æ–±–æ–≤ —Ç–∏–ø–∞ '{test_type}'")
                elif response.status_code == 422:
                    self.results.add_test("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –æ–ø–ª–∞—Ç—ã", True, 
                                        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
                else:
                    self.results.add_test("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –æ–ø–ª–∞—Ç—ã", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –æ–ø–ª–∞—Ç—ã", True, 
                                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", warning=True)
    
    async def test_payment_method_status(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
        active_payment = {
            "name": f"{self.test_prefix}Active Payment",
            "type": "card",
            "description": "Active payment method test",
            "is_active": True,
            "is_default": False
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/payment-methods/", 
                                           json=active_payment, headers=headers)
            if response.status_code == 201:
                payment_method = response.json()
                self.created_data['payment_methods'].append(payment_method["id"])
                
                if payment_method["is_active"] is True:
                    self.results.add_test("–°—Ç–∞—Ç—É—Å —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã - –∞–∫—Ç–∏–≤–Ω—ã–π", True, 
                                        "–ê–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    self.results.add_test("–°—Ç–∞—Ç—É—Å —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã - –∞–∫—Ç–∏–≤–Ω—ã–π", False, 
                                        f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {payment_method['is_active']}")
            else:
                self.results.add_test("–°—Ç–∞—Ç—É—Å —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã - –∞–∫—Ç–∏–≤–Ω—ã–π", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–°—Ç–∞—Ç—É—Å —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã - –∞–∫—Ç–∏–≤–Ω—ã–π", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
        inactive_payment = {
            "name": f"{self.test_prefix}Inactive Payment",
            "type": "cash",
            "description": "Inactive payment method test",
            "is_active": False,
            "is_default": False
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/payment-methods/", 
                                           json=inactive_payment, headers=headers)
            if response.status_code == 201:
                payment_method = response.json()
                self.created_data['payment_methods'].append(payment_method["id"])
                
                if payment_method["is_active"] is False:
                    self.results.add_test("–°—Ç–∞—Ç—É—Å —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π", True, 
                                        "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    self.results.add_test("–°—Ç–∞—Ç—É—Å —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π", False, 
                                        f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {payment_method['is_active']}")
            else:
                self.results.add_test("–°—Ç–∞—Ç—É—Å —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–°—Ç–∞—Ç—É—Å —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_payment = {
            "name": f"{self.test_prefix}Default Payment",
            "type": "card",
            "description": "Default payment method test",
            "is_active": True,
            "is_default": True
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/payment-methods/", 
                                           json=default_payment, headers=headers)
            if response.status_code == 201:
                payment_method = response.json()
                self.created_data['payment_methods'].append(payment_method["id"])
                
                if payment_method.get("is_default") is True:
                    self.results.add_test("–°—Ç–∞—Ç—É—Å —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", True, 
                                        "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    self.results.add_test("–°—Ç–∞—Ç—É—Å —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", True, 
                                        "–ü–æ–ª–µ is_default –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
            else:
                self.results.add_test("–°—Ç–∞—Ç—É—Å —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–°—Ç–∞—Ç—É—Å —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_payment_method_configuration(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã"""
        headers = self.get_auth_headers()
        
        # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        config_tests = [
            {
                "name": f"{self.test_prefix}Commission Test",
                "type": "card",
                "commission_rate": 2.5,
                "min_amount": 1.0,
                "max_amount": 5000.0
            },
            {
                "name": f"{self.test_prefix}No Commission Test",
                "type": "cash",
                "commission_rate": 0.0,
                "min_amount": 0.01,
                "max_amount": 10000.0
            },
            {
                "name": f"{self.test_prefix}High Commission Test",
                "type": "cryptocurrency",
                "commission_rate": 5.0,
                "min_amount": 10.0,
                "max_amount": 1000.0
            }
        ]
        
        for config_test in config_tests:
            payment_data = {
                "name": config_test["name"],
                "type": config_test["type"],
                "description": f"Configuration test for {config_test['type']}",
                "commission_rate": config_test["commission_rate"],
                "min_amount": config_test["min_amount"],
                "max_amount": config_test["max_amount"],
                "is_active": True
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/payment-methods/", 
                                               json=payment_data, headers=headers)
                if response.status_code == 201:
                    payment_method = response.json()
                    self.created_data['payment_methods'].append(payment_method["id"])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∏—Å—Å–∏—é
                    if "commission_rate" in payment_method:
                        if abs(payment_method["commission_rate"] - config_test["commission_rate"]) < 0.01:
                            self.results.add_test(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –∫–æ–º–∏—Å—Å–∏—è {config_test['type']}", True, 
                                                f"–ö–æ–º–∏—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {payment_method['commission_rate']}%")
                        else:
                            self.results.add_test(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –∫–æ–º–∏—Å—Å–∏—è {config_test['type']}", False, 
                                                f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: {payment_method['commission_rate']}")
                    else:
                        self.results.add_test(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –∫–æ–º–∏—Å—Å–∏—è {config_test['type']}", True, 
                                            "–ü–æ–ª–µ commission_rate –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
                    if "min_amount" in payment_method and "max_amount" in payment_method:
                        if (abs(payment_method["min_amount"] - config_test["min_amount"]) < 0.01 and
                            abs(payment_method["max_amount"] - config_test["max_amount"]) < 0.01):
                            self.results.add_test(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ª–∏–º–∏—Ç—ã {config_test['type']}", True, 
                                                f"–õ–∏–º–∏—Ç—ã: {payment_method['min_amount']}-{payment_method['max_amount']}")
                        else:
                            self.results.add_test(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ª–∏–º–∏—Ç—ã {config_test['type']}", False, 
                                                f"–ù–µ–≤–µ—Ä–Ω—ã–µ –ª–∏–º–∏—Ç—ã")
                    else:
                        self.results.add_test(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ª–∏–º–∏—Ç—ã {config_test['type']}", True, 
                                            "–ü–æ–ª—è –ª–∏–º–∏—Ç–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è", warning=True)
                else:
                    if response.status_code in [400, 422]:
                        self.results.add_test(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - {config_test['type']}", True, 
                                            f"–¢–∏–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
                    else:
                        self.results.add_test(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - {config_test['type']}", False, 
                                            f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - {config_test['type']}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å JSON
        complex_config = {
            "name": f"{self.test_prefix}Complex Config Payment",
            "type": "card",
            "description": "Payment method with complex configuration",
            "is_active": True,
            "config": {
                "api_endpoint": "https://api.payment.com/v1",
                "api_key": "test_key_123456",
                "webhook_url": "https://myapp.com/webhook/payment",
                "supported_currencies": ["USD", "EUR", "RUB"],
                "require_3d_secure": True,
                "timeout_seconds": 30
            }
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/payment-methods/", 
                                           json=complex_config, headers=headers)
            if response.status_code == 201:
                payment_method = response.json()
                self.created_data['payment_methods'].append(payment_method["id"])
                
                if "config" in payment_method:
                    self.results.add_test("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - —Å–ª–æ–∂–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", True, 
                                        "JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                else:
                    self.results.add_test("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - —Å–ª–æ–∂–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", True, 
                                        "JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
            else:
                self.results.add_test("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - —Å–ª–æ–∂–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - —Å–ª–æ–∂–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", False, 
                                f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_payment_method_search(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_payment_methods = [
            {
                "name": f"{self.test_prefix}Search Card Payment",
                "type": "card",
                "description": "Card payment for search",
                "is_active": True
            },
            {
                "name": f"{self.test_prefix}Search Cash Payment",
                "type": "cash",
                "description": "Cash payment for search",
                "is_active": True
            },
            {
                "name": f"{self.test_prefix}Disabled Payment",
                "type": "bank_transfer",
                "description": "Disabled payment method",
                "is_active": False
            }
        ]
        
        created_payment_methods = []
        for payment_data in search_payment_methods:
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/payment-methods/", 
                                               json=payment_data, headers=headers)
                if response.status_code == 201:
                    payment_method = response.json()
                    self.created_data['payment_methods'].append(payment_method["id"])
                    created_payment_methods.append(payment_method)
            except Exception:
                continue
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/payment-methods/", headers=headers)
            if response.status_code == 200:
                payment_methods = response.json()
                if len(payment_methods) >= len(created_payment_methods):
                    self.results.add_test("–ü–æ–∏—Å–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã - –≤—Å–µ —Å–ø–æ—Å–æ–±—ã", True, 
                                        f"–ü–æ–ª—É—á–µ–Ω–æ {len(payment_methods)} —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã")
                else:
                    self.results.add_test("–ü–æ–∏—Å–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã - –≤—Å–µ —Å–ø–æ—Å–æ–±—ã", False, 
                                        f"–ü–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å")
            else:
                self.results.add_test("–ü–æ–∏—Å–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã - –≤—Å–µ —Å–ø–æ—Å–æ–±—ã", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü–æ–∏—Å–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã - –≤—Å–µ —Å–ø–æ—Å–æ–±—ã", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ ID
        if created_payment_methods:
            payment_id = created_payment_methods[0]["id"]
            try:
                response = await self.client.get(f"{self.runner.BASE_URL}/payment-methods/{payment_id}", 
                                              headers=headers)
                if response.status_code == 200:
                    payment_method = response.json()
                    if payment_method["id"] == payment_id:
                        self.results.add_test("–ü–æ–∏—Å–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã - –ø–æ ID", True, 
                                            f"–ù–∞–π–¥–µ–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method['name']}")
                    else:
                        self.results.add_test("–ü–æ–∏—Å–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã - –ø–æ ID", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã")
                else:
                    self.results.add_test("–ü–æ–∏—Å–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã - –ø–æ ID", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test("–ü–æ–∏—Å–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã - –ø–æ ID", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/payment-methods/?is_active=true", 
                                          headers=headers)
            if response.status_code == 200:
                payment_methods = response.json()
                active_count = sum(1 for pm in payment_methods if pm.get("is_active") is True)
                self.results.add_test("–ü–æ–∏—Å–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã - —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö", True, 
                                    f"–ù–∞–π–¥–µ–Ω–æ {active_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã", 
                                    warning=(active_count != len(payment_methods)))
            elif response.status_code == 422:
                self.results.add_test("–ü–æ–∏—Å–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã - —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö", True, 
                                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
            else:
                self.results.add_test("–ü–æ–∏—Å–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã - —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü–æ–∏—Å–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã - —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö", True, 
                                "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", warning=True)
