#!/usr/bin/env python3
"""
QRes OS 4 - Base Test Classes
–ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
"""
import asyncio
import httpx
import json
import uuid
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta


class TestResults:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    def __init__(self):
        self.total_tests = 0
        self.passed_tests = 0
        self.failed_tests = 0
        self.warnings = 0
        self.test_details = []
        self.start_time = datetime.now()
    
    def add_test(self, name: str, passed: bool, details: str = "", warning: bool = False):
        self.total_tests += 1
        if passed:
            self.passed_tests += 1
            status = "‚úÖ"
        else:
            self.failed_tests += 1
            status = "‚ùå"
        
        if warning:
            self.warnings += 1
            status = "‚ö†Ô∏è"
        
        self.test_details.append(f"{status} {name}: {details}")
        print(f"{status} {name}: {details}")
    
    def print_summary(self):
        duration = datetime.now() - self.start_time
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.total_tests}")
        print(f"–£—Å–ø–µ—à–Ω–æ: {self.passed_tests} ‚úÖ")
        print(f"–ù–µ—É–¥–∞—á–Ω–æ: {self.failed_tests} ‚ùå")
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {self.warnings} ‚ö†Ô∏è")
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration.total_seconds():.2f} —Å–µ–∫")
        success_rate = (self.passed_tests / self.total_tests * 100) if self.total_tests > 0 else 0
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if self.failed_tests > 0:
            print("\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´:")
            for detail in self.test_details:
                if "‚ùå" in detail:
                    print(f"  {detail}")


class TestRunner:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    BASE_URL = "http://localhost:8000"
    
    def __init__(self):
        self.client = None
        self.results = TestResults()
        self.test_prefix = f"test_{uuid.uuid4().hex[:8]}_"
        self.created_data = {
            'users': [],
            'locations': [],
            'tables': [],
            'categories': [],
            'ingredients': [],
            'dishes': [],
            'dish_variations': [],
            'payment_methods': [],
            'orders': [],
            'order_items': []
        }
        self.auth_token = None
        self.test_user_id = None
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.client = httpx.AsyncClient(timeout=30.0)
        
        try:
            response = await self.client.get(f"{self.BASE_URL}/")
            if response.status_code == 200:
                self.results.add_test("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É", True, "–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                self.results.add_test("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É", False, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                return False
        except Exception as e:
            self.results.add_test("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É", False, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            return False
        
        return True
    
    async def setup_test_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.create_test_user()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await self.authenticate()
    
    async def create_test_user(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_data = {
            "username": f"{self.test_prefix}testuser",
            "email": f"{self.test_prefix}test@example.com",
            "password": "testpassword123",
            "full_name": f"Test User {self.test_prefix}",
            "role": "admin"
        }
        
        try:
            response = await self.client.post(f"{self.BASE_URL}/users/", json=user_data)
            if response.status_code == 201:
                user = response.json()
                self.test_user_id = user["id"]
                self.created_data['users'].append(user["id"])
                self.results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", True, f"ID: {user['id']}")
                return user
            else:
                self.results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–ö–æ–¥: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
                return None
        except Exception as e:
            self.results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return None
    
    async def authenticate(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        auth_data = {
            "username": f"{self.test_prefix}testuser",
            "password": "testpassword123"
        }
        
        try:
            response = await self.client.post(f"{self.BASE_URL}/auth/login", data=auth_data)
            if response.status_code == 200:
                token_data = response.json()
                self.auth_token = token_data["access_token"]
                self.results.add_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", True, "–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
                return True
            else:
                self.results.add_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", False, f"–ö–æ–¥: {response.status_code}")
                return False
        except Exception as e:
            self.results.add_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def get_auth_headers(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if self.auth_token:
            return {"Authorization": f"Bearer {self.auth_token}"}
        return {}
    
    async def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
        print("=" * 50)
        
        cleanup_order = [
            'order_items', 'orders', 'dish_variations', 'dishes', 
            'ingredients', 'categories', 'tables', 'locations', 
            'payment_methods', 'users'
        ]
        
        headers = self.get_auth_headers()
        
        for data_type in cleanup_order:
            items = self.created_data.get(data_type, [])
            if not items:
                continue
            
            print(f"–û—á–∏—Å—Ç–∫–∞ {data_type}: {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            for item_id in items:
                try:
                    endpoint = self.get_endpoint_for_type(data_type)
                    response = await self.client.delete(f"{self.BASE_URL}/{endpoint}/{item_id}", headers=headers)
                    if response.status_code not in [200, 204, 404]:
                        print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {data_type} {item_id}: {response.status_code}")
                    else:
                        print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω {data_type} {item_id}")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {data_type} {item_id}: {str(e)}")
        
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def get_endpoint_for_type(self, data_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ endpoint –¥–ª—è —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö"""
        endpoints = {
            'users': 'users',
            'locations': 'locations',
            'tables': 'tables',
            'categories': 'categories',
            'ingredients': 'ingredients',
            'dishes': 'dishes',
            'dish_variations': 'dishes/variations',
            'payment_methods': 'payment-methods',
            'orders': 'orders',
            'order_items': 'orders/items'
        }
        return endpoints.get(data_type, data_type)
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        if self.client:
            await self.client.aclose()
    
    async def setup(self):
        """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        success = await self.initialize()
        if success:
            await self.setup_test_data()
        return success
    
    async def teardown(self):
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        await self.cleanup_test_data()
        if self.client:
            await self.client.aclose()


class BaseTestSuite:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—é–∏—Ç–æ–≤"""
    
    def __init__(self, runner: TestRunner):
        self.runner = runner
        self.client = runner.client
        self.results = runner.results
        self.test_prefix = runner.test_prefix
        self.created_data = runner.created_data
    
    def get_auth_headers(self) -> Dict[str, str]:
        return self.runner.get_auth_headers()
    
    async def test_crud_operations(self, endpoint: str, create_data: Dict, update_data: Dict, 
                                 data_type: str, required_fields: List[str] = None):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π"""
        headers = self.get_auth_headers()
        
        # CREATE
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/{endpoint}", 
                                           json=create_data, headers=headers)
            if response.status_code == 201:
                created_item = response.json()
                item_id = created_item["id"]
                self.created_data[data_type].append(item_id)
                self.results.add_test(f"CREATE {data_type}", True, f"ID: {item_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if required_fields:
                    for field in required_fields:
                        if field not in created_item:
                            self.results.add_test(f"CREATE {data_type} - –ø–æ–ª–µ {field}", False, 
                                                "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ")
                        else:
                            self.results.add_test(f"CREATE {data_type} - –ø–æ–ª–µ {field}", True, 
                                                f"–ó–Ω–∞—á–µ–Ω–∏–µ: {created_item[field]}")
                
            else:
                self.results.add_test(f"CREATE {data_type}", False, 
                                    f"–ö–æ–¥: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
                return None
        except Exception as e:
            self.results.add_test(f"CREATE {data_type}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return None
        
        # READ
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/{endpoint}/{item_id}", 
                                          headers=headers)
            if response.status_code == 200:
                self.results.add_test(f"READ {data_type}", True, f"–ü–æ–ª—É—á–µ–Ω –æ–±—ä–µ–∫—Ç ID: {item_id}")
            else:
                self.results.add_test(f"READ {data_type}", False, f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test(f"READ {data_type}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # UPDATE
        try:
            response = await self.client.put(f"{self.runner.BASE_URL}/{endpoint}/{item_id}", 
                                          json=update_data, headers=headers)
            if response.status_code == 200:
                self.results.add_test(f"UPDATE {data_type}", True, f"–û–±–Ω–æ–≤–ª–µ–Ω –æ–±—ä–µ–∫—Ç ID: {item_id}")
            else:
                self.results.add_test(f"UPDATE {data_type}", False, f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test(f"UPDATE {data_type}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # LIST
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/{endpoint}", 
                                          headers=headers)
            if response.status_code == 200:
                items = response.json()
                self.results.add_test(f"LIST {data_type}", True, f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} –æ–±—ä–µ–∫—Ç–æ–≤")
            else:
                self.results.add_test(f"LIST {data_type}", False, f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test(f"LIST {data_type}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        return item_id
    
    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å—é–∏—Ç–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)"""
        raise NotImplementedError("–ú–µ—Ç–æ–¥ run_tests –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ")
