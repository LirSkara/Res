#!/usr/bin/env python3
"""
QRes OS 4 - Order Items Tests
–¢–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤
"""
from tests.test_base import BaseTestSuite, TestRunner


class OrderItemsTestSuite(BaseTestSuite):
    """–¢–µ—Å—Ç–æ–≤—ã–π —Å—é–∏—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤"""
    
    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–æ–≤"""
        print("\nüõíüìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–õ–ï–ú–ï–ù–¢–û–í –ó–ê–ö–ê–ó–û–í")
        print("=" * 50)
        
        await self.test_order_item_crud()
        await self.test_order_item_validation()
        await self.test_order_item_quantity()
        await self.test_order_item_calculations()
        await self.test_order_item_variations()
        await self.test_order_item_relationship()
    
    async def test_order_item_crud(self):
        """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = await self.create_order_item_dependencies()
        if not dependencies:
            return None
        
        order_id, dish_variation_id = dependencies
        
        create_data = {
            "order_id": order_id,
            "dish_variation_id": dish_variation_id,
            "quantity": 2,
            "unit_price": 15.99,
            "total_price": 31.98,
            "notes": "No onions please",
            "status": "pending"
        }
        
        update_data = {
            "order_id": order_id,
            "dish_variation_id": dish_variation_id,
            "quantity": 3,
            "unit_price": 15.99,
            "total_price": 47.97,
            "notes": "Extra cheese, no onions",
            "status": "confirmed"
        }
        
        required_fields = ["id", "order_id", "dish_variation_id", "quantity", "unit_price", "total_price"]
        
        order_item_id = await self.test_crud_operations(
            endpoint="orders/items",
            create_data=create_data,
            update_data=update_data,
            data_type="order_items",
            required_fields=required_fields
        )
        
        return order_item_id
    
    async def create_order_item_dependencies(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–æ–≤"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
        location_data = {
            "name": f"{self.test_prefix}Item Location",
            "address": "123 Item Street",
            "city": "Item City",
            "country": "Item Country",
            "is_active": True
        }
        
        location_response = await self.client.post(f"{self.runner.BASE_URL}/locations/", 
                                                 json=location_data, headers=headers)
        if location_response.status_code != 201:
            return None
        
        location = location_response.json()
        self.created_data['locations'].append(location["id"])
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª
        table_data = {
            "number": f"{self.test_prefix}ITEM_T001",
            "location_id": location["id"],
            "capacity": 4,
            "status": "available",
            "is_active": True
        }
        
        table_response = await self.client.post(f"{self.runner.BASE_URL}/tables/", 
                                              json=table_data, headers=headers)
        if table_response.status_code != 201:
            return None
        
        table = table_response.json()
        self.created_data['tables'].append(table["id"])
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_data = {
            "name": f"{self.test_prefix}Item Category",
            "description": "Category for item tests",
            "sort_order": 1,
            "is_active": True
        }
        
        category_response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                                 json=category_data, headers=headers)
        if category_response.status_code != 201:
            return None
        
        category = category_response.json()
        self.created_data['categories'].append(category["id"])
        
        # –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–æ
        dish_data = {
            "name": f"{self.test_prefix}Item Dish",
            "description": "Dish for item tests",
            "category_id": category["id"],
            "is_available": True
        }
        
        dish_response = await self.client.post(f"{self.runner.BASE_URL}/dishes/", 
                                             json=dish_data, headers=headers)
        if dish_response.status_code != 201:
            return None
        
        dish = dish_response.json()
        self.created_data['dishes'].append(dish["id"])
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é –±–ª—é–¥–∞
        variation_data = {
            "dish_id": dish["id"],
            "name": "Standard",
            "price": 15.99,
            "is_default": True,
            "is_available": True
        }
        
        variation_response = await self.client.post(f"{self.runner.BASE_URL}/dishes/variations", 
                                                  json=variation_data, headers=headers)
        if variation_response.status_code != 201:
            return None
        
        variation = variation_response.json()
        self.created_data['dish_variations'].append(variation["id"])
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_data = {
            "table_id": table["id"],
            "user_id": self.runner.test_user_id,
            "status": "pending",
            "customer_name": f"{self.test_prefix}Item Customer"
        }
        
        order_response = await self.client.post(f"{self.runner.BASE_URL}/orders/", 
                                              json=order_data, headers=headers)
        if order_response.status_code != 201:
            return None
        
        order = order_response.json()
        self.created_data['orders'].append(order["id"])
        
        self.results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–∞", True, 
                            f"–ó–∞–∫–∞–∑: {order['id']}, –í–∞—Ä–∏–∞—Ü–∏—è: {variation['id']}")
        
        return order["id"], variation["id"]
    
    async def test_order_item_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–∞"""
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = await self.create_order_item_dependencies()
        if not dependencies:
            return
        
        order_id, dish_variation_id = dependencies
        headers = self.get_auth_headers()
        
        invalid_order_items = [
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
            {
                "dish_variation_id": dish_variation_id,
                "quantity": 1,
                "unit_price": 15.99
            },
            # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
            {
                "order_id": 99999,
                "dish_variation_id": dish_variation_id,
                "quantity": 1,
                "unit_price": 15.99
            },
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –±–ª—é–¥–∞
            {
                "order_id": order_id,
                "quantity": 1,
                "unit_price": 15.99
            },
            # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –±–ª—é–¥–∞
            {
                "order_id": order_id,
                "dish_variation_id": 99999,
                "quantity": 1,
                "unit_price": 15.99
            },
            # –ù—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            {
                "order_id": order_id,
                "dish_variation_id": dish_variation_id,
                "quantity": 0,
                "unit_price": 15.99
            },
            # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            {
                "order_id": order_id,
                "dish_variation_id": dish_variation_id,
                "quantity": -2,
                "unit_price": 15.99
            },
            # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞
            {
                "order_id": order_id,
                "dish_variation_id": dish_variation_id,
                "quantity": 1,
                "unit_price": -15.99
            },
            # –ù—É–ª–µ–≤–∞—è —Ü–µ–Ω–∞
            {
                "order_id": order_id,
                "dish_variation_id": dish_variation_id,
                "quantity": 1,
                "unit_price": 0
            }
        ]
        
        for i, item_data in enumerate(invalid_order_items):
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/orders/items", 
                                               json=item_data, headers=headers)
                if response.status_code in [400, 422]:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–∞ #{i+1}", True, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
                elif response.status_code == 201:
                    # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    item = response.json()
                    self.created_data['order_items'].append(item["id"])
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–∞ #{i+1}", False, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã)")
                else:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–∞ #{i+1}", False, 
                                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–∞ #{i+1}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_order_item_quantity(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤ –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –∑–∞–∫–∞–∑–∞"""
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = await self.create_order_item_dependencies()
        if not dependencies:
            return
        
        order_id, dish_variation_id = dependencies
        headers = self.get_auth_headers()
        
        # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤
        quantities = [1, 2, 5, 10, 100]
        
        for quantity in quantities:
            item_data = {
                "order_id": order_id,
                "dish_variation_id": dish_variation_id,
                "quantity": quantity,
                "unit_price": 15.99,
                "total_price": 15.99 * quantity
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/orders/items", 
                                               json=item_data, headers=headers)
                if response.status_code == 201:
                    item = response.json()
                    self.created_data['order_items'].append(item["id"])
                    
                    if item["quantity"] == quantity:
                        self.results.add_test(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–∞ - {quantity}", True, 
                                            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {item['quantity']}")
                    else:
                        self.results.add_test(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–∞ - {quantity}", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: –æ–∂–∏–¥–∞–ª–æ—Å—å {quantity}, –ø–æ–ª—É—á–µ–Ω–æ {item['quantity']}")
                else:
                    self.results.add_test(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–∞ - {quantity}", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–∞ - {quantity}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –¥—Ä–æ–±–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        fractional_quantities = [0.5, 1.5, 2.5]
        
        for quantity in fractional_quantities:
            item_data = {
                "order_id": order_id,
                "dish_variation_id": dish_variation_id,
                "quantity": quantity,
                "unit_price": 15.99,
                "total_price": round(15.99 * quantity, 2)
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/orders/items", 
                                               json=item_data, headers=headers)
                if response.status_code == 201:
                    item = response.json()
                    self.created_data['order_items'].append(item["id"])
                    
                    if abs(item["quantity"] - quantity) < 0.01:
                        self.results.add_test(f"–î—Ä–æ–±–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - {quantity}", True, 
                                            f"–î—Ä–æ–±–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {item['quantity']}")
                    else:
                        self.results.add_test(f"–î—Ä–æ–±–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - {quantity}", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω–æ–µ –¥—Ä–æ–±–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                elif response.status_code in [400, 422]:
                    self.results.add_test(f"–î—Ä–æ–±–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - {quantity}", True, 
                                        "–î—Ä–æ–±–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)", warning=True)
                else:
                    self.results.add_test(f"–î—Ä–æ–±–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - {quantity}", False, 
                                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–î—Ä–æ–±–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - {quantity}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_order_item_calculations(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –∑–∞–∫–∞–∑–∞"""
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = await self.create_order_item_dependencies()
        if not dependencies:
            return
        
        order_id, dish_variation_id = dependencies
        headers = self.get_auth_headers()
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        calculation_tests = [
            {"quantity": 1, "unit_price": 10.00, "expected_total": 10.00},
            {"quantity": 2, "unit_price": 15.50, "expected_total": 31.00},
            {"quantity": 3, "unit_price": 7.99, "expected_total": 23.97},
            {"quantity": 5, "unit_price": 12.75, "expected_total": 63.75}
        ]
        
        for test in calculation_tests:
            item_data = {
                "order_id": order_id,
                "dish_variation_id": dish_variation_id,
                "quantity": test["quantity"],
                "unit_price": test["unit_price"],
                "total_price": test["expected_total"]
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/orders/items", 
                                               json=item_data, headers=headers)
                if response.status_code == 201:
                    item = response.json()
                    self.created_data['order_items'].append(item["id"])
                    
                    actual_total = item["total_price"]
                    expected_total = test["expected_total"]
                    
                    if abs(actual_total - expected_total) < 0.01:
                        self.results.add_test(f"–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ - {test['quantity']}x{test['unit_price']}", True, 
                                            f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {actual_total}")
                    else:
                        self.results.add_test(f"–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ - {test['quantity']}x{test['unit_price']}", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_total}, –ø–æ–ª—É—á–µ–Ω–æ {actual_total}")
                else:
                    self.results.add_test(f"–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ - {test['quantity']}x{test['unit_price']}", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ - {test['quantity']}x{test['unit_price']}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        auto_calc_item = {
            "order_id": order_id,
            "dish_variation_id": dish_variation_id,
            "quantity": 3,
            "unit_price": 12.50
            # –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º total_price, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/orders/items", 
                                           json=auto_calc_item, headers=headers)
            if response.status_code == 201:
                item = response.json()
                self.created_data['order_items'].append(item["id"])
                
                expected_total = 37.50  # 3 * 12.50
                actual_total = item["total_price"]
                
                if abs(actual_total - expected_total) < 0.01:
                    self.results.add_test("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏", True, 
                                        f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: {actual_total}")
                else:
                    self.results.add_test("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏", True, 
                                        f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ-–¥—Ä—É–≥–æ–º—É", 
                                        warning=True)
            else:
                self.results.add_test("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏", True, 
                                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
        except Exception as e:
            self.results.add_test("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏", True, 
                                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω", warning=True)
    
    async def test_order_item_variations(self):
        """–¢–µ—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ –±–ª—é–¥"""
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
        dependencies = await self.create_order_item_dependencies()
        if not dependencies:
            return
        
        order_id, dish_variation_id = dependencies
        headers = self.get_auth_headers()
        
        # –ü–æ–ª—É—á–∞–µ–º dish_id –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–∞—Ä–∏–∞—Ü–∏–∏
        variation_response = await self.client.get(f"{self.runner.BASE_URL}/dishes/variations/{dish_variation_id}", 
                                                 headers=headers)
        if variation_response.status_code != 200:
            return
        
        variation = variation_response.json()
        dish_id = variation["dish_id"]
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ç–æ–≥–æ –∂–µ –±–ª—é–¥–∞
        additional_variations = [
            {"name": "Small", "price": 12.99},
            {"name": "Large", "price": 18.99},
            {"name": "Extra Large", "price": 22.99}
        ]
        
        created_variations = [dish_variation_id]  # –í–∫–ª—é—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
        
        for var_data in additional_variations:
            variation_data = {
                "dish_id": dish_id,
                "name": var_data["name"],
                "price": var_data["price"],
                "is_default": False,
                "is_available": True
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/dishes/variations", 
                                               json=variation_data, headers=headers)
                if response.status_code == 201:
                    new_variation = response.json()
                    self.created_data['dish_variations'].append(new_variation["id"])
                    created_variations.append(new_variation["id"])
            except Exception:
                continue
        
        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
        for i, variation_id in enumerate(created_variations):
            item_data = {
                "order_id": order_id,
                "dish_variation_id": variation_id,
                "quantity": 1,
                "unit_price": 15.99,  # –ú–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ü–µ–Ω—ã –≤–∞—Ä–∏–∞—Ü–∏–∏
                "total_price": 15.99
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/orders/items", 
                                               json=item_data, headers=headers)
                if response.status_code == 201:
                    item = response.json()
                    self.created_data['order_items'].append(item["id"])
                    
                    if item["dish_variation_id"] == variation_id:
                        self.results.add_test(f"–í–∞—Ä–∏–∞—Ü–∏—è –≤ —ç–ª–µ–º–µ–Ω—Ç–µ –∑–∞–∫–∞–∑–∞ #{i+1}", True, 
                                            f"–≠–ª–µ–º–µ–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—Ä–∏–∞—Ü–∏–∏ {variation_id}")
                    else:
                        self.results.add_test(f"–í–∞—Ä–∏–∞—Ü–∏—è –≤ —ç–ª–µ–º–µ–Ω—Ç–µ –∑–∞–∫–∞–∑–∞ #{i+1}", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –≤–∞—Ä–∏–∞—Ü–∏–∏")
                else:
                    self.results.add_test(f"–í–∞—Ä–∏–∞—Ü–∏—è –≤ —ç–ª–µ–º–µ–Ω—Ç–µ –∑–∞–∫–∞–∑–∞ #{i+1}", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–í–∞—Ä–∏–∞—Ü–∏—è –≤ —ç–ª–µ–º–µ–Ω—Ç–µ –∑–∞–∫–∞–∑–∞ #{i+1}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_order_item_relationship(self):
        """–¢–µ—Å—Ç —Å–≤—è–∑–µ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏"""
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤
        dependencies1 = await self.create_order_item_dependencies()
        dependencies2 = await self.create_order_item_dependencies()
        
        if not (dependencies1 and dependencies2):
            return
        
        order_id1, dish_variation_id1 = dependencies1
        order_id2, dish_variation_id2 = dependencies2
        
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        items_data = [
            {
                "order_id": order_id1,
                "dish_variation_id": dish_variation_id1,
                "quantity": 2,
                "unit_price": 15.99,
                "total_price": 31.98
            },
            {
                "order_id": order_id2,
                "dish_variation_id": dish_variation_id2,
                "quantity": 1,
                "unit_price": 12.50,
                "total_price": 12.50
            }
        ]
        
        created_items = []
        for i, item_data in enumerate(items_data):
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/orders/items", 
                                               json=item_data, headers=headers)
                if response.status_code == 201:
                    item = response.json()
                    self.created_data['order_items'].append(item["id"])
                    created_items.append(item)
                    
                    if item["order_id"] == item_data["order_id"]:
                        self.results.add_test(f"–°–≤—è–∑—å —ç–ª–µ–º–µ–Ω—Ç-–∑–∞–∫–∞–∑ - —Å–æ–∑–¥–∞–Ω–∏–µ #{i+1}", True, 
                                            f"–≠–ª–µ–º–µ–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞–∫–∞–∑—É {item_data['order_id']}")
                    else:
                        self.results.add_test(f"–°–≤—è–∑—å —ç–ª–µ–º–µ–Ω—Ç-–∑–∞–∫–∞–∑ - —Å–æ–∑–¥–∞–Ω–∏–µ #{i+1}", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –∑–∞–∫–∞–∑—É")
                else:
                    self.results.add_test(f"–°–≤—è–∑—å —ç–ª–µ–º–µ–Ω—Ç-–∑–∞–∫–∞–∑ - —Å–æ–∑–¥–∞–Ω–∏–µ #{i+1}", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–°–≤—è–∑—å —ç–ª–µ–º–µ–Ω—Ç-–∑–∞–∫–∞–∑ - —Å–æ–∑–¥–∞–Ω–∏–µ #{i+1}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        if created_items:
            test_order_id = created_items[0]["order_id"]
            try:
                response = await self.client.get(f"{self.runner.BASE_URL}/orders/{test_order_id}/items", 
                                              headers=headers)
                if response.status_code == 200:
                    items = response.json()
                    order_items = [item for item in items if item.get("order_id") == test_order_id]
                    self.results.add_test("–°–≤—è–∑—å —ç–ª–µ–º–µ–Ω—Ç-–∑–∞–∫–∞–∑ - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É", True, 
                                        f"–ù–∞–π–¥–µ–Ω–æ {len(order_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–∞")
                elif response.status_code == 404:
                    # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint
                    response = await self.client.get(f"{self.runner.BASE_URL}/orders/items?order_id={test_order_id}", 
                                                  headers=headers)
                    if response.status_code == 200:
                        items = response.json()
                        order_items = [item for item in items if item.get("order_id") == test_order_id]
                        self.results.add_test("–°–≤—è–∑—å —ç–ª–µ–º–µ–Ω—Ç-–∑–∞–∫–∞–∑ - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É", True, 
                                            f"–ù–∞–π–¥–µ–Ω–æ {len(order_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint)")
                    else:
                        self.results.add_test("–°–≤—è–∑—å —ç–ª–µ–º–µ–Ω—Ç-–∑–∞–∫–∞–∑ - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É", True, 
                                            "–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–∫–∞–∑—É –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
                else:
                    self.results.add_test("–°–≤—è–∑—å —ç–ª–µ–º–µ–Ω—Ç-–∑–∞–∫–∞–∑ - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test("–°–≤—è–∑—å —ç–ª–µ–º–µ–Ω—Ç-–∑–∞–∫–∞–∑ - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É", True, 
                                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–∫–∞–∑—É –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ", warning=True)
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–æ–≤
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/orders/items", headers=headers)
            if response.status_code == 200:
                items = response.json()
                if len(items) >= len(created_items):
                    self.results.add_test("–°–≤—è–∑—å —ç–ª–µ–º–µ–Ω—Ç-–∑–∞–∫–∞–∑ - –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã", True, 
                                        f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–æ–≤")
                else:
                    self.results.add_test("–°–≤—è–∑—å —ç–ª–µ–º–µ–Ω—Ç-–∑–∞–∫–∞–∑ - –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã", False, 
                                        f"–ü–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å")
            else:
                self.results.add_test("–°–≤—è–∑—å —ç–ª–µ–º–µ–Ω—Ç-–∑–∞–∫–∞–∑ - –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–°–≤—è–∑—å —ç–ª–µ–º–µ–Ω—Ç-–∑–∞–∫–∞–∑ - –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–∞
        if created_items:
            item_id = created_items[0]["id"]
            update_data = {
                "order_id": created_items[0]["order_id"],
                "dish_variation_id": created_items[0]["dish_variation_id"],
                "quantity": 5,
                "unit_price": 15.99,
                "total_price": 79.95,
                "notes": "Updated notes"
            }
            
            try:
                response = await self.client.put(f"{self.runner.BASE_URL}/orders/items/{item_id}", 
                                              json=update_data, headers=headers)
                if response.status_code == 200:
                    updated_item = response.json()
                    if updated_item["quantity"] == 5:
                        self.results.add_test("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–∞", True, 
                                            f"–≠–ª–µ–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = {updated_item['quantity']}")
                    else:
                        self.results.add_test("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–∞", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                else:
                    self.results.add_test("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–∞", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
