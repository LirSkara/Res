#!/usr/bin/env python3
"""
QRes OS 4 - Dish Variations Tests
–¢–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ –±–ª—é–¥
"""
from tests.test_base import BaseTestSuite, TestRunner


class DishVariationsTestSuite(BaseTestSuite):
    """–¢–µ—Å—Ç–æ–≤—ã–π —Å—é–∏—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ –±–ª—é–¥"""
    
    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤–∞—Ä–∏–∞—Ü–∏–π –±–ª—é–¥"""
        print("\nüçΩÔ∏è‚ûï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–†–ò–ê–¶–ò–ô –ë–õ–Æ–î")
        print("=" * 50)
        
        await self.test_variation_crud()
        await self.test_variation_validation()
        await self.test_variation_pricing()
        await self.test_variation_default()
        await self.test_variation_dish_relationship()
        await self.test_variation_availability()
    
    async def test_variation_crud(self):
        """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ –±–ª—é–¥"""
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –±–ª—é–¥–æ –¥–ª—è –≤–∞—Ä–∏–∞—Ü–∏–π
        category_data = {
            "name": f"{self.test_prefix}Variation Category",
            "description": "Category for variation testing",
            "sort_order": 1,
            "is_active": True
        }
        
        headers = self.get_auth_headers()
        category_response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                                 json=category_data, headers=headers)
        
        if category_response.status_code != 201:
            self.results.add_test("CRUD –≤–∞—Ä–∏–∞—Ü–∏–π - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", False, 
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_response.status_code}")
            return
        
        category = category_response.json()
        category_id = category["id"]
        self.created_data['categories'].append(category_id)
        
        # –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–æ
        dish_data = {
            "name": f"{self.test_prefix}CRUD Variation Dish",
            "description": "Dish for CRUD variation testing",
            "category_id": category_id,
            "is_available": True
        }
        
        dish_response = await self.client.post(f"{self.runner.BASE_URL}/dishes/", 
                                             json=dish_data, headers=headers)
        
        if dish_response.status_code != 201:
            self.results.add_test("CRUD –≤–∞—Ä–∏–∞—Ü–∏–π - —Å–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥–∞", False, 
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–ª—é–¥–æ: {dish_response.status_code}")
            return
        
        dish = dish_response.json()
        dish_id = dish["id"]
        self.created_data['dishes'].append(dish_id)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
        create_data = {
            "dish_id": dish_id,
            "name": "Medium",
            "description": "Medium size portion",
            "price": 15.99,
            "is_default": True,
            "is_available": True,
            "portion_size": "400g",
            "additional_info": "Most popular size"
        }
        
        update_data = {
            "dish_id": dish_id,
            "name": "Medium Updated",
            "description": "Updated medium size portion",
            "price": 16.99,
            "is_default": True,
            "is_available": True,
            "portion_size": "450g",
            "additional_info": "Updated popular size"
        }
        
        required_fields = ["id", "dish_id", "name", "price", "is_default", "is_available", "created_at"]
        
        variation_id = await self.test_crud_operations(
            endpoint="dishes/variations",
            create_data=create_data,
            update_data=update_data,
            data_type="dish_variations",
            required_fields=required_fields
        )
        
        return variation_id
    
    async def test_variation_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–∏"""
        # –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_data = {
            "name": f"{self.test_prefix}Validation Category",
            "description": "Category for validation tests",
            "sort_order": 1,
            "is_active": True
        }
        
        category_response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                                 json=category_data, headers=headers)
        if category_response.status_code != 201:
            return
        
        category = category_response.json()
        category_id = category["id"]
        self.created_data['categories'].append(category_id)
        
        # –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–æ
        dish_data = {
            "name": f"{self.test_prefix}Validation Dish",
            "description": "Dish for validation tests",
            "category_id": category_id,
            "is_available": True
        }
        
        dish_response = await self.client.post(f"{self.runner.BASE_URL}/dishes/", 
                                             json=dish_data, headers=headers)
        if dish_response.status_code != 201:
            return
        
        dish = dish_response.json()
        dish_id = dish["id"]
        self.created_data['dishes'].append(dish_id)
        
        invalid_variations = [
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –∏–º—è
            {
                "dish_id": dish_id,
                "price": 10.99,
                "is_default": False,
                "is_available": True
            },
            # –ü—É—Å—Ç–æ–µ –∏–º—è
            {
                "dish_id": dish_id,
                "name": "",
                "price": 10.99,
                "is_default": False,
                "is_available": True
            },
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –±–ª—é–¥–æ
            {
                "name": "No Dish Variation",
                "price": 10.99,
                "is_default": False,
                "is_available": True
            },
            # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –±–ª—é–¥–æ
            {
                "dish_id": 99999,
                "name": "Fake Dish Variation",
                "price": 10.99,
                "is_default": False,
                "is_available": True
            },
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è —Ü–µ–Ω–∞
            {
                "dish_id": dish_id,
                "name": "No Price Variation",
                "is_default": False,
                "is_available": True
            },
            # –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ü–µ–Ω–∞
            {
                "dish_id": dish_id,
                "name": "Invalid Price Variation",
                "price": -5.99,
                "is_default": False,
                "is_available": True
            },
            # –¶–µ–Ω–∞ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é
            {
                "dish_id": dish_id,
                "name": "Zero Price Variation",
                "price": 0,
                "is_default": False,
                "is_available": True
            }
        ]
        
        for i, variation_data in enumerate(invalid_variations):
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/dishes/variations", 
                                               json=variation_data, headers=headers)
                if response.status_code in [400, 422]:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞—Ä–∏–∞—Ü–∏–∏ #{i+1}", True, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
                elif response.status_code == 201:
                    # –ï—Å–ª–∏ –≤–∞—Ä–∏–∞—Ü–∏—è —Å–æ–∑–¥–∞–ª–∞—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    variation = response.json()
                    self.created_data['dish_variations'].append(variation["id"])
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞—Ä–∏–∞—Ü–∏–∏ #{i+1}", False, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã)")
                else:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞—Ä–∏–∞—Ü–∏–∏ #{i+1}", False, 
                                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞—Ä–∏–∞—Ü–∏–∏ #{i+1}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_variation_pricing(self):
        """–¢–µ—Å—Ç —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞—Ü–∏–π"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        category_data = {
            "name": f"{self.test_prefix}Pricing Category",
            "description": "Category for pricing tests",
            "sort_order": 1,
            "is_active": True
        }
        
        category_response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                                 json=category_data, headers=headers)
        if category_response.status_code != 201:
            return
        
        category = category_response.json()
        category_id = category["id"]
        self.created_data['categories'].append(category_id)
        
        dish_data = {
            "name": f"{self.test_prefix}Pricing Dish",
            "description": "Dish for pricing tests",
            "category_id": category_id,
            "is_available": True
        }
        
        dish_response = await self.client.post(f"{self.runner.BASE_URL}/dishes/", 
                                             json=dish_data, headers=headers)
        if dish_response.status_code != 201:
            return
        
        dish = dish_response.json()
        dish_id = dish["id"]
        self.created_data['dishes'].append(dish_id)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ü–µ–Ω—ã
        price_tests = [
            {"name": "Small", "price": 9.99},
            {"name": "Medium", "price": 14.99},
            {"name": "Large", "price": 19.99},
            {"name": "Extra Large", "price": 24.50},
            {"name": "Family Size", "price": 35.00}
        ]
        
        created_variations = []
        for price_test in price_tests:
            variation_data = {
                "dish_id": dish_id,
                "name": price_test["name"],
                "price": price_test["price"],
                "is_default": price_test["name"] == "Medium",
                "is_available": True
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/dishes/variations", 
                                               json=variation_data, headers=headers)
                if response.status_code == 201:
                    variation = response.json()
                    self.created_data['dish_variations'].append(variation["id"])
                    created_variations.append(variation)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
                    if abs(variation["price"] - price_test["price"]) < 0.01:
                        self.results.add_test(f"–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - {price_test['name']}", True, 
                                            f"–¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–æ—á–Ω–æ: {variation['price']}")
                    else:
                        self.results.add_test(f"–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - {price_test['name']}", False, 
                                            f"–ù–µ—Ç–æ—á–Ω–∞—è —Ü–µ–Ω–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å {price_test['price']}, –ø–æ–ª—É—á–µ–Ω–æ {variation['price']}")
                else:
                    self.results.add_test(f"–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - {price_test['name']}", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - {price_test['name']}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ —Ü–µ–Ω–µ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        if len(created_variations) >= 3:
            try:
                response = await self.client.get(f"{self.runner.BASE_URL}/dishes/{dish_id}/variations", 
                                              headers=headers)
                if response.status_code == 200:
                    variations = response.json()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                    variation_ids = [v["id"] for v in variations]
                    created_ids = [v["id"] for v in created_variations]
                    found_count = sum(1 for vid in created_ids if vid in variation_ids)
                    
                    if found_count == len(created_variations):
                        self.results.add_test("–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞—Ü–∏–π", True, 
                                            f"–í—Å–µ {found_count} –≤–∞—Ä–∏–∞—Ü–∏–π –Ω–∞–π–¥–µ–Ω—ã")
                    else:
                        self.results.add_test("–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞—Ü–∏–π", False, 
                                            f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {found_count} –∏–∑ {len(created_variations)} –≤–∞—Ä–∏–∞—Ü–∏–π")
                else:
                    self.results.add_test("–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–π", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test("–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–π", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_variation_default(self):
        """–¢–µ—Å—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        category_data = {
            "name": f"{self.test_prefix}Default Category",
            "description": "Category for default tests",
            "sort_order": 1,
            "is_active": True
        }
        
        category_response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                                 json=category_data, headers=headers)
        if category_response.status_code != 201:
            return
        
        category = category_response.json()
        category_id = category["id"]
        self.created_data['categories'].append(category_id)
        
        dish_data = {
            "name": f"{self.test_prefix}Default Dish",
            "description": "Dish for default variation tests",
            "category_id": category_id,
            "is_available": True
        }
        
        dish_response = await self.client.post(f"{self.runner.BASE_URL}/dishes/", 
                                             json=dish_data, headers=headers)
        if dish_response.status_code != 201:
            return
        
        dish = dish_response.json()
        dish_id = dish["id"]
        self.created_data['dishes'].append(dish_id)
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –∫–∞–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_variation = {
            "dish_id": dish_id,
            "name": "Standard",
            "price": 12.99,
            "is_default": True,
            "is_available": True
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/dishes/variations", 
                                           json=default_variation, headers=headers)
            if response.status_code == 201:
                variation = response.json()
                self.created_data['dish_variations'].append(variation["id"])
                
                if variation["is_default"] is True:
                    self.results.add_test("–í–∞—Ä–∏–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–µ—Ä–≤–∞—è", True, 
                                        "–ü–µ—Ä–≤–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                else:
                    self.results.add_test("–í–∞—Ä–∏–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–µ—Ä–≤–∞—è", False, 
                                        f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {variation['is_default']}")
            else:
                self.results.add_test("–í–∞—Ä–∏–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–µ—Ä–≤–∞—è", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–í–∞—Ä–∏–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–µ—Ä–≤–∞—è", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –ù–ï –∫–∞–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        second_variation = {
            "dish_id": dish_id,
            "name": "Large",
            "price": 16.99,
            "is_default": False,
            "is_available": True
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/dishes/variations", 
                                           json=second_variation, headers=headers)
            if response.status_code == 201:
                variation = response.json()
                self.created_data['dish_variations'].append(variation["id"])
                
                if variation["is_default"] is False:
                    self.results.add_test("–í–∞—Ä–∏–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—Ç–æ—Ä–∞—è –Ω–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", True, 
                                        "–í—Ç–æ—Ä–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                else:
                    self.results.add_test("–í–∞—Ä–∏–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—Ç–æ—Ä–∞—è –Ω–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", False, 
                                        f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {variation['is_default']}")
            else:
                self.results.add_test("–í–∞—Ä–∏–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—Ç–æ—Ä–∞—è –Ω–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–í–∞—Ä–∏–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—Ç–æ—Ä–∞—è –Ω–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", False, 
                                f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ—Ç—å—é –≤–∞—Ä–∏–∞—Ü–∏—é –∫–∞–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        # (–¥–æ–ª–∂–Ω–∞ –∑–∞–º–µ–Ω–∏—Ç—å –ø–µ—Ä–≤—É—é –∏–ª–∏ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É)
        third_variation = {
            "dish_id": dish_id,
            "name": "Premium",
            "price": 19.99,
            "is_default": True,
            "is_available": True
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/dishes/variations", 
                                           json=third_variation, headers=headers)
            if response.status_code == 201:
                variation = response.json()
                self.created_data['dish_variations'].append(variation["id"])
                
                if variation["is_default"] is True:
                    self.results.add_test("–í–∞—Ä–∏–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–º–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", True, 
                                        "–ù–æ–≤–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω–∞", warning=True)
                else:
                    self.results.add_test("–í–∞—Ä–∏–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–º–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", True, 
                                        "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–æ–∑–≤–æ–ª–∏–ª–∞ —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            elif response.status_code in [400, 422]:
                self.results.add_test("–í–∞—Ä–∏–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–º–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", True, 
                                    "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –≤—Ç–æ—Ä—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            else:
                self.results.add_test("–í–∞—Ä–∏–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–º–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", False, 
                                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–í–∞—Ä–∏–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–º–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", False, 
                                f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_variation_dish_relationship(self):
        """–¢–µ—Å—Ç —Å–≤—è–∑–∏ –≤–∞—Ä–∏–∞—Ü–∏–π —Å –±–ª—é–¥–∞–º–∏"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å–≤—è–∑–µ–π
        category_data = {
            "name": f"{self.test_prefix}Relationship Category",
            "description": "Category for relationship tests",
            "sort_order": 1,
            "is_active": True
        }
        
        category_response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                                 json=category_data, headers=headers)
        if category_response.status_code != 201:
            return
        
        category = category_response.json()
        category_id = category["id"]
        self.created_data['categories'].append(category_id)
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –±–ª—é–¥–∞
        dishes = []
        for i in range(2):
            dish_data = {
                "name": f"{self.test_prefix}Relationship Dish {i+1}",
                "description": f"Dish {i+1} for relationship tests",
                "category_id": category_id,
                "is_available": True
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/dishes/", 
                                               json=dish_data, headers=headers)
                if response.status_code == 201:
                    dish = response.json()
                    self.created_data['dishes'].append(dish["id"])
                    dishes.append(dish)
            except Exception:
                continue
        
        if len(dishes) < 2:
            self.results.add_test("–°–≤—è–∑—å –≤–∞—Ä–∏–∞—Ü–∏—è-–±–ª—é–¥–æ - —Å–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥", False, 
                                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª—é–¥")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞
        for i, dish in enumerate(dishes):
            variation_data = {
                "dish_id": dish["id"],
                "name": f"Variation for Dish {i+1}",
                "price": 10.99 + i * 5,
                "is_default": True,
                "is_available": True
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/dishes/variations", 
                                               json=variation_data, headers=headers)
                if response.status_code == 201:
                    variation = response.json()
                    self.created_data['dish_variations'].append(variation["id"])
                    
                    if variation["dish_id"] == dish["id"]:
                        self.results.add_test(f"–°–≤—è–∑—å –≤–∞—Ä–∏–∞—Ü–∏—è-–±–ª—é–¥–æ - —Å–æ–∑–¥–∞–Ω–∏–µ –¥–ª—è –±–ª—é–¥–∞ {i+1}", True, 
                                            f"–í–∞—Ä–∏–∞—Ü–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –±–ª—é–¥—É {dish['name']}")
                    else:
                        self.results.add_test(f"–°–≤—è–∑—å –≤–∞—Ä–∏–∞—Ü–∏—è-–±–ª—é–¥–æ - —Å–æ–∑–¥–∞–Ω–∏–µ –¥–ª—è –±–ª—é–¥–∞ {i+1}", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –±–ª—é–¥—É")
                else:
                    self.results.add_test(f"–°–≤—è–∑—å –≤–∞—Ä–∏–∞—Ü–∏—è-–±–ª—é–¥–æ - —Å–æ–∑–¥–∞–Ω–∏–µ –¥–ª—è –±–ª—é–¥–∞ {i+1}", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–°–≤—è–∑—å –≤–∞—Ä–∏–∞—Ü–∏—è-–±–ª—é–¥–æ - —Å–æ–∑–¥–∞–Ω–∏–µ –¥–ª—è –±–ª—é–¥–∞ {i+1}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª—é–¥–∞
        if dishes:
            dish_id = dishes[0]["id"]
            try:
                response = await self.client.get(f"{self.runner.BASE_URL}/dishes/{dish_id}/variations", 
                                              headers=headers)
                if response.status_code == 200:
                    variations = response.json()
                    dish_variations = [v for v in variations if v.get("dish_id") == dish_id]
                    if len(dish_variations) > 0:
                        self.results.add_test("–°–≤—è–∑—å –≤–∞—Ä–∏–∞—Ü–∏—è-–±–ª—é–¥–æ - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ –±–ª—é–¥—É", True, 
                                            f"–ù–∞–π–¥–µ–Ω–æ {len(dish_variations)} –≤–∞—Ä–∏–∞—Ü–∏–π –¥–ª—è –±–ª—é–¥–∞")
                    else:
                        self.results.add_test("–°–≤—è–∑—å –≤–∞—Ä–∏–∞—Ü–∏—è-–±–ª—é–¥–æ - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ –±–ª—é–¥—É", False, 
                                            "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞—Ä–∏–∞—Ü–∏–π –¥–ª—è –±–ª—é–¥–∞")
                else:
                    self.results.add_test("–°–≤—è–∑—å –≤–∞—Ä–∏–∞—Ü–∏—è-–±–ª—é–¥–æ - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ –±–ª—é–¥—É", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test("–°–≤—è–∑—å –≤–∞—Ä–∏–∞—Ü–∏—è-–±–ª—é–¥–æ - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ –±–ª—é–¥—É", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_variation_availability(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–∞—Ä–∏–∞—Ü–∏–π"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        category_data = {
            "name": f"{self.test_prefix}Availability Category",
            "description": "Category for availability tests",
            "sort_order": 1,
            "is_active": True
        }
        
        category_response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                                 json=category_data, headers=headers)
        if category_response.status_code != 201:
            return
        
        category = category_response.json()
        category_id = category["id"]
        self.created_data['categories'].append(category_id)
        
        dish_data = {
            "name": f"{self.test_prefix}Availability Dish",
            "description": "Dish for availability tests",
            "category_id": category_id,
            "is_available": True
        }
        
        dish_response = await self.client.post(f"{self.runner.BASE_URL}/dishes/", 
                                             json=dish_data, headers=headers)
        if dish_response.status_code != 201:
            return
        
        dish = dish_response.json()
        dish_id = dish["id"]
        self.created_data['dishes'].append(dish_id)
        
        # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        availability_tests = [
            {"name": "Available", "is_available": True},
            {"name": "Unavailable", "is_available": False}
        ]
        
        for availability_test in availability_tests:
            variation_data = {
                "dish_id": dish_id,
                "name": f"{availability_test['name']} Variation",
                "price": 12.99,
                "is_default": availability_test["name"] == "Available",
                "is_available": availability_test["is_available"]
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/dishes/variations", 
                                               json=variation_data, headers=headers)
                if response.status_code == 201:
                    variation = response.json()
                    self.created_data['dish_variations'].append(variation["id"])
                    
                    if variation["is_available"] == availability_test["is_available"]:
                        self.results.add_test(f"–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ - {availability_test['name']}", True, 
                                            f"–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    else:
                        self.results.add_test(f"–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ - {availability_test['name']}", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏")
                else:
                    self.results.add_test(f"–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ - {availability_test['name']}", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ - {availability_test['name']}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/dishes/{dish_id}/variations?is_available=true", 
                                          headers=headers)
            if response.status_code == 200:
                variations = response.json()
                available_count = sum(1 for v in variations if v.get("is_available") is True)
                self.results.add_test("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ - —Ñ–∏–ª—å—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö", True, 
                                    f"–ù–∞–π–¥–µ–Ω–æ {available_count} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π", 
                                    warning=(available_count != len(variations)))
            elif response.status_code == 422:
                self.results.add_test("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ - —Ñ–∏–ª—å—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö", True, 
                                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
            else:
                self.results.add_test("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ - —Ñ–∏–ª—å—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ - —Ñ–∏–ª—å—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö", True, 
                                "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", warning=True)
