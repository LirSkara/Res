#!/usr/bin/env python3
"""
QRes OS 4 - Dishes Tests
–¢–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞–º–∏
"""
from tests.test_base import BaseTestSuite, TestRunner


class DishesTestSuite(BaseTestSuite):
    """–¢–µ—Å—Ç–æ–≤—ã–π —Å—é–∏—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞–º–∏"""
    
    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –±–ª—é–¥"""
        print("\nüçΩÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–õ–Æ–î–ê–ú–ò")
        print("=" * 50)
        
        await self.test_dish_crud()
        await self.test_dish_validation()
        await self.test_dish_category_relationship()
        await self.test_dish_ingredients_relationship()
        await self.test_dish_pricing()
        await self.test_dish_images()
        await self.test_dish_status()
        await self.test_dish_search()
    
    async def test_dish_crud(self):
        """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–ª—é–¥–∞–º–∏"""
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –±–ª—é–¥
        category_data = {
            "name": f"{self.test_prefix}Dish Test Category",
            "description": "Category for dish testing",
            "sort_order": 1,
            "is_active": True
        }
        
        headers = self.get_auth_headers()
        category_response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                                 json=category_data, headers=headers)
        
        if category_response.status_code != 201:
            self.results.add_test("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–ª—é–¥", False, 
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_response.status_code}")
            return
        
        category = category_response.json()
        category_id = category["id"]
        self.created_data['categories'].append(category_id)
        
        create_data = {
            "name": f"{self.test_prefix}Test Dish",
            "description": "Test dish for automated testing",
            "category_id": category_id,
            "main_image_url": f"https://example.com/{self.test_prefix}dish.jpg",
            "is_available": True,
            "is_featured": False,
            "preparation_time": 15,
            "calories": 350,
            "allergens": ["gluten", "dairy"],
            "tags": ["vegetarian", "popular"]
        }
        
        update_data = {
            "name": f"{self.test_prefix}Updated Test Dish",
            "description": "Updated test dish",
            "category_id": category_id,
            "main_image_url": f"https://example.com/{self.test_prefix}dish_updated.jpg",
            "is_available": True,
            "is_featured": True,
            "preparation_time": 20,
            "calories": 400,
            "allergens": ["nuts"],
            "tags": ["spicy", "recommended"]
        }
        
        required_fields = ["id", "name", "category_id", "is_available", "created_at"]
        
        dish_id = await self.test_crud_operations(
            endpoint="dishes",
            create_data=create_data,
            update_data=update_data,
            data_type="dishes",
            required_fields=required_fields
        )
        
        return dish_id
    
    async def test_dish_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±–ª—é–¥–∞"""
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        headers = self.get_auth_headers()
        category_data = {
            "name": f"{self.test_prefix}Validation Category",
            "description": "Category for validation tests",
            "sort_order": 1,
            "is_active": True
        }
        
        category_response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                                 json=category_data, headers=headers)
        if category_response.status_code != 201:
            self.results.add_test("–í–∞–ª–∏–¥–∞—Ü–∏—è –±–ª—é–¥ - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", False, 
                                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤")
            return
        
        category = category_response.json()
        category_id = category["id"]
        self.created_data['categories'].append(category_id)
        
        invalid_dishes = [
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –∏–º—è
            {
                "description": "Dish without name",
                "category_id": category_id,
                "is_available": True
            },
            # –ü—É—Å—Ç–æ–µ –∏–º—è
            {
                "name": "",
                "description": "Dish with empty name",
                "category_id": category_id,
                "is_available": True
            },
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            {
                "name": f"{self.test_prefix}No Category Dish",
                "description": "Dish without category",
                "is_available": True
            },
            # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            {
                "name": f"{self.test_prefix}Fake Category Dish",
                "description": "Dish with fake category",
                "category_id": 99999,
                "is_available": True
            },
            # –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
            {
                "name": f"{self.test_prefix}Invalid Time Dish",
                "description": "Dish with invalid preparation time",
                "category_id": category_id,
                "preparation_time": -5,
                "is_available": True
            },
            # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
            {
                "name": f"{self.test_prefix}Invalid Calories Dish",
                "description": "Dish with invalid calories",
                "category_id": category_id,
                "calories": -100,
                "is_available": True
            }
        ]
        
        for i, dish_data in enumerate(invalid_dishes):
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/dishes/", 
                                               json=dish_data, headers=headers)
                if response.status_code in [400, 422]:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –±–ª—é–¥–∞ #{i+1}", True, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
                elif response.status_code == 201:
                    # –ï—Å–ª–∏ –±–ª—é–¥–æ —Å–æ–∑–¥–∞–ª–æ—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    dish = response.json()
                    self.created_data['dishes'].append(dish["id"])
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –±–ª—é–¥–∞ #{i+1}", False, 
                                        "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã)")
                else:
                    self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –±–ª—é–¥–∞ #{i+1}", False, 
                                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –±–ª—é–¥–∞ #{i+1}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_dish_category_relationship(self):
        """–¢–µ—Å—Ç —Å–≤—è–∑–∏ –±–ª—é–¥ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = []
        for i in range(3):
            category_data = {
                "name": f"{self.test_prefix}Relation Category {i}",
                "description": f"Category {i} for dish relations",
                "sort_order": i + 1,
                "is_active": True
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                               json=category_data, headers=headers)
                if response.status_code == 201:
                    category = response.json()
                    self.created_data['categories'].append(category["id"])
                    categories.append(category)
            except Exception:
                continue
        
        if len(categories) < 2:
            self.results.add_test("–°–≤—è–∑—å –±–ª—é–¥–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", False, 
                                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            return
        
        # –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        for i, category in enumerate(categories[:2]):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            dish_data = {
                "name": f"{self.test_prefix}Category {i} Dish",
                "description": f"Dish in category {category['name']}",
                "category_id": category["id"],
                "is_available": True
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/dishes/", 
                                               json=dish_data, headers=headers)
                if response.status_code == 201:
                    dish = response.json()
                    self.created_data['dishes'].append(dish["id"])
                    
                    if dish["category_id"] == category["id"]:
                        self.results.add_test(f"–°–≤—è–∑—å –±–ª—é–¥–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ #{i+1}", True, 
                                            f"–ë–ª—é–¥–æ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category['name']}")
                    else:
                        self.results.add_test(f"–°–≤—è–∑—å –±–ª—é–¥–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ #{i+1}", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                else:
                    self.results.add_test(f"–°–≤—è–∑—å –±–ª—é–¥–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ #{i+1}", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–°–≤—è–∑—å –±–ª—é–¥–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ #{i+1}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª—é–¥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        if categories:
            category_id = categories[0]["id"]
            try:
                response = await self.client.get(f"{self.runner.BASE_URL}/dishes/?category_id={category_id}", 
                                              headers=headers)
                if response.status_code == 200:
                    dishes = response.json()
                    category_dishes = [d for d in dishes if d.get("category_id") == category_id]
                    self.results.add_test("–°–≤—è–∑—å –±–ª—é–¥–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏—è - —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", True, 
                                        f"–ù–∞–π–¥–µ–Ω–æ {len(category_dishes)} –±–ª—é–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                elif response.status_code == 422:
                    self.results.add_test("–°–≤—è–∑—å –±–ª—é–¥–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏—è - —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", True, 
                                        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
                else:
                    self.results.add_test("–°–≤—è–∑—å –±–ª—é–¥–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏—è - —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test("–°–≤—è–∑—å –±–ª—é–¥–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏—è - —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", True, 
                                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", warning=True)
    
    async def test_dish_ingredients_relationship(self):
        """–¢–µ—Å—Ç —Å–≤—è–∑–∏ –±–ª—é–¥ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –±–ª—é–¥–∞
        category_data = {
            "name": f"{self.test_prefix}Ingredients Category",
            "description": "Category for ingredients testing",
            "sort_order": 1,
            "is_active": True
        }
        
        category_response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                                 json=category_data, headers=headers)
        if category_response.status_code != 201:
            self.results.add_test("–°–≤—è–∑—å –±–ª—é–¥–æ-–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", False, 
                                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            return
        
        category = category_response.json()
        category_id = category["id"]
        self.created_data['categories'].append(category_id)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        ingredients = []
        ingredient_names = ["Tomato", "Cheese", "Basil"]
        
        for name in ingredient_names:
            ingredient_data = {
                "name": f"{self.test_prefix}{name}",
                "description": f"Test ingredient {name}",
                "unit": "gram",
                "is_allergen": name == "Cheese",  # –°—ã—Ä –∫–∞–∫ –∞–ª–ª–µ—Ä–≥–µ–Ω
                "is_active": True
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/ingredients/", 
                                               json=ingredient_data, headers=headers)
                if response.status_code == 201:
                    ingredient = response.json()
                    self.created_data['ingredients'].append(ingredient["id"])
                    ingredients.append(ingredient)
            except Exception:
                continue
        
        if len(ingredients) < 2:
            self.results.add_test("–°–≤—è–∑—å –±–ª—é–¥–æ-–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤", False, 
                                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤")
            return
        
        # –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–æ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
        dish_data = {
            "name": f"{self.test_prefix}Ingredients Test Dish",
            "description": "Dish for testing ingredients relationship",
            "category_id": category_id,
            "is_available": True,
            "ingredient_ids": [ing["id"] for ing in ingredients[:2]]  # –ü–µ—Ä–≤—ã–µ 2 –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/dishes/", 
                                           json=dish_data, headers=headers)
            if response.status_code == 201:
                dish = response.json()
                self.created_data['dishes'].append(dish["id"])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
                if "ingredients" in dish or "ingredient_ids" in dish:
                    self.results.add_test("–°–≤—è–∑—å –±–ª—é–¥–æ-–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ", True, 
                                        "–ë–ª—é–¥–æ —Å–æ–∑–¥–∞–Ω–æ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏")
                else:
                    self.results.add_test("–°–≤—è–∑—å –±–ª—é–¥–æ-–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ", True, 
                                        "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ)", 
                                        warning=True)
            elif response.status_code in [400, 422]:
                self.results.add_test("–°–≤—è–∑—å –±–ª—é–¥–æ-–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ", True, 
                                    "–°–≤—è–∑—å —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
            else:
                self.results.add_test("–°–≤—è–∑—å –±–ª—é–¥–æ-–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–°–≤—è–∑—å –±–ª—é–¥–æ-–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_dish_pricing(self):
        """–¢–µ—Å—Ç —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –±–ª—é–¥ —á–µ—Ä–µ–∑ –≤–∞—Ä–∏–∞—Ü–∏–∏"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –±–ª—é–¥–æ
        category_data = {
            "name": f"{self.test_prefix}Pricing Category",
            "description": "Category for pricing tests",
            "sort_order": 1,
            "is_active": True
        }
        
        category_response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                                 json=category_data, headers=headers)
        if category_response.status_code != 201:
            return
        
        category = category_response.json()
        category_id = category["id"]
        self.created_data['categories'].append(category_id)
        
        dish_data = {
            "name": f"{self.test_prefix}Pricing Test Dish",
            "description": "Dish for pricing tests",
            "category_id": category_id,
            "is_available": True
        }
        
        dish_response = await self.client.post(f"{self.runner.BASE_URL}/dishes/", 
                                             json=dish_data, headers=headers)
        if dish_response.status_code != 201:
            return
        
        dish = dish_response.json()
        dish_id = dish["id"]
        self.created_data['dishes'].append(dish_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        variations = [
            {
                "dish_id": dish_id,
                "name": "Small",
                "price": 10.99,
                "is_default": True,
                "is_available": True
            },
            {
                "dish_id": dish_id,
                "name": "Medium",
                "price": 15.99,
                "is_default": False,
                "is_available": True
            },
            {
                "dish_id": dish_id,
                "name": "Large",
                "price": 19.99,
                "is_default": False,
                "is_available": True
            }
        ]
        
        created_variations = []
        for i, variation_data in enumerate(variations):
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/dishes/variations", 
                                               json=variation_data, headers=headers)
                if response.status_code == 201:
                    variation = response.json()
                    self.created_data['dish_variations'].append(variation["id"])
                    created_variations.append(variation)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É
                    if variation["price"] == variation_data["price"]:
                        self.results.add_test(f"–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - –≤–∞—Ä–∏–∞—Ü–∏—è {variation_data['name']}", True, 
                                            f"–¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {variation['price']}")
                    else:
                        self.results.add_test(f"–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - –≤–∞—Ä–∏–∞—Ü–∏—è {variation_data['name']}", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å {variation_data['price']}, –ø–æ–ª—É—á–µ–Ω–æ {variation['price']}")
                else:
                    self.results.add_test(f"–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - –≤–∞—Ä–∏–∞—Ü–∏—è {variation_data['name']}", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - –≤–∞—Ä–∏–∞—Ü–∏—è {variation_data['name']}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–π –±–ª—é–¥–∞
        if created_variations:
            try:
                response = await self.client.get(f"{self.runner.BASE_URL}/dishes/{dish_id}/variations", 
                                              headers=headers)
                if response.status_code == 200:
                    dish_variations = response.json()
                    if len(dish_variations) >= len(created_variations):
                        self.results.add_test("–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–π", True, 
                                            f"–ü–æ–ª—É—á–µ–Ω–æ {len(dish_variations)} –≤–∞—Ä–∏–∞—Ü–∏–π")
                    else:
                        self.results.add_test("–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–π", False, 
                                            f"–ü–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ –≤–∞—Ä–∏–∞—Ü–∏–π —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å")
                else:
                    self.results.add_test("–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–π", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test("–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–π", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_dish_images(self):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –±–ª—é–¥"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_data = {
            "name": f"{self.test_prefix}Images Category",
            "description": "Category for image tests",
            "sort_order": 1,
            "is_active": True
        }
        
        category_response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                                 json=category_data, headers=headers)
        if category_response.status_code != 201:
            return
        
        category = category_response.json()
        category_id = category["id"]
        self.created_data['categories'].append(category_id)
        
        # –¢–µ—Å—Ç –±–ª—é–¥–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        dish_with_image = {
            "name": f"{self.test_prefix}Image Test Dish",
            "description": "Dish with main image",
            "category_id": category_id,
            "main_image_url": f"https://example.com/{self.test_prefix}main_image.jpg",
            "is_available": True
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/dishes/", 
                                           json=dish_with_image, headers=headers)
            if response.status_code == 201:
                dish = response.json()
                self.created_data['dishes'].append(dish["id"])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_field = dish.get("main_image_url") or dish.get("image_url")
                if image_field == dish_with_image["main_image_url"]:
                    self.results.add_test("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª—é–¥ - –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", True, 
                                        f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {image_field}")
                else:
                    self.results.add_test("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª—é–¥ - –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", False, 
                                        f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_field}")
            else:
                self.results.add_test("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª—é–¥ - –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª—é–¥ - –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", False, 
                                f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –±–ª—é–¥–∞ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        dish_without_image = {
            "name": f"{self.test_prefix}No Image Dish",
            "description": "Dish without image",
            "category_id": category_id,
            "is_available": True
        }
        
        try:
            response = await self.client.post(f"{self.runner.BASE_URL}/dishes/", 
                                           json=dish_without_image, headers=headers)
            if response.status_code == 201:
                dish = response.json()
                self.created_data['dishes'].append(dish["id"])
                self.results.add_test("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª—é–¥ - –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", True, 
                                    "–ë–ª—é–¥–æ —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            else:
                self.results.add_test("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª—é–¥ - –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª—é–¥ - –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", False, 
                                f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_dish_status(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–æ–≤ –±–ª—é–¥"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_data = {
            "name": f"{self.test_prefix}Status Category",
            "description": "Category for status tests",
            "sort_order": 1,
            "is_active": True
        }
        
        category_response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                                 json=category_data, headers=headers)
        if category_response.status_code != 201:
            return
        
        category = category_response.json()
        category_id = category["id"]
        self.created_data['categories'].append(category_id)
        
        # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        status_tests = [
            {"is_available": True, "is_featured": False, "name": "Available"},
            {"is_available": False, "is_featured": False, "name": "Unavailable"},
            {"is_available": True, "is_featured": True, "name": "Featured"},
            {"is_available": False, "is_featured": True, "name": "Unavailable Featured"}
        ]
        
        for status_test in status_tests:
            dish_data = {
                "name": f"{self.test_prefix}{status_test['name']} Dish",
                "description": f"Dish with {status_test['name']} status",
                "category_id": category_id,
                "is_available": status_test["is_available"],
                "is_featured": status_test["is_featured"]
            }
            
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/dishes/", 
                                               json=dish_data, headers=headers)
                if response.status_code == 201:
                    dish = response.json()
                    self.created_data['dishes'].append(dish["id"])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
                    if (dish["is_available"] == status_test["is_available"] and 
                        dish.get("is_featured", False) == status_test["is_featured"]):
                        self.results.add_test(f"–°—Ç–∞—Ç—É—Å –±–ª—é–¥–∞ - {status_test['name']}", True, 
                                            f"–°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    else:
                        self.results.add_test(f"–°—Ç–∞—Ç—É—Å –±–ª—é–¥–∞ - {status_test['name']}", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
                else:
                    self.results.add_test(f"–°—Ç–∞—Ç—É—Å –±–ª—é–¥–∞ - {status_test['name']}", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test(f"–°—Ç–∞—Ç—É—Å –±–ª—é–¥–∞ - {status_test['name']}", False, 
                                    f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_dish_search(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–ª—é–¥"""
        headers = self.get_auth_headers()
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_data = {
            "name": f"{self.test_prefix}Search Category",
            "description": "Category for search tests",
            "sort_order": 1,
            "is_active": True
        }
        
        category_response = await self.client.post(f"{self.runner.BASE_URL}/categories/", 
                                                 json=category_data, headers=headers)
        if category_response.status_code != 201:
            return
        
        category = category_response.json()
        category_id = category["id"]
        self.created_data['categories'].append(category_id)
        
        # –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_dishes = [
            {
                "name": f"{self.test_prefix}Pizza Margherita",
                "description": "Classic Italian pizza",
                "category_id": category_id,
                "is_available": True,
                "is_featured": True
            },
            {
                "name": f"{self.test_prefix}Pasta Carbonara",
                "description": "Traditional pasta dish",
                "category_id": category_id,
                "is_available": True,
                "is_featured": False
            },
            {
                "name": f"{self.test_prefix}Burger Classic",
                "description": "American style burger",
                "category_id": category_id,
                "is_available": False,
                "is_featured": False
            }
        ]
        
        created_dishes = []
        for dish_data in search_dishes:
            try:
                response = await self.client.post(f"{self.runner.BASE_URL}/dishes/", 
                                               json=dish_data, headers=headers)
                if response.status_code == 201:
                    dish = response.json()
                    self.created_data['dishes'].append(dish["id"])
                    created_dishes.append(dish)
            except Exception:
                continue
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –±–ª—é–¥
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/dishes/", headers=headers)
            if response.status_code == 200:
                dishes = response.json()
                if len(dishes) >= len(created_dishes):
                    self.results.add_test("–ü–æ–∏—Å–∫ –±–ª—é–¥ - –≤—Å–µ –±–ª—é–¥–∞", True, 
                                        f"–ü–æ–ª—É—á–µ–Ω–æ {len(dishes)} –±–ª—é–¥")
                else:
                    self.results.add_test("–ü–æ–∏—Å–∫ –±–ª—é–¥ - –≤—Å–µ –±–ª—é–¥–∞", False, 
                                        f"–ü–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ –±–ª—é–¥ —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å")
            else:
                self.results.add_test("–ü–æ–∏—Å–∫ –±–ª—é–¥ - –≤—Å–µ –±–ª—é–¥–∞", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü–æ–∏—Å–∫ –±–ª—é–¥ - –≤—Å–µ –±–ª—é–¥–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ ID
        if created_dishes:
            dish_id = created_dishes[0]["id"]
            try:
                response = await self.client.get(f"{self.runner.BASE_URL}/dishes/{dish_id}", 
                                              headers=headers)
                if response.status_code == 200:
                    dish = response.json()
                    if dish["id"] == dish_id:
                        self.results.add_test("–ü–æ–∏—Å–∫ –±–ª—é–¥ - –ø–æ ID", True, 
                                            f"–ù–∞–π–¥–µ–Ω–æ –±–ª—é–¥–æ: {dish['name']}")
                    else:
                        self.results.add_test("–ü–æ–∏—Å–∫ –±–ª—é–¥ - –ø–æ ID", False, 
                                            f"–ù–µ–≤–µ—Ä–Ω–æ–µ –±–ª—é–¥–æ")
                else:
                    self.results.add_test("–ü–æ–∏—Å–∫ –±–ª—é–¥ - –ø–æ ID", False, 
                                        f"–ö–æ–¥: {response.status_code}")
            except Exception as e:
                self.results.add_test("–ü–æ–∏—Å–∫ –±–ª—é–¥ - –ø–æ ID", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª—é–¥
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/dishes/?is_available=true", 
                                          headers=headers)
            if response.status_code == 200:
                dishes = response.json()
                available_count = sum(1 for d in dishes if d.get("is_available") is True)
                self.results.add_test("–ü–æ–∏—Å–∫ –±–ª—é–¥ - —Ñ–∏–ª—å—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö", True, 
                                    f"–ù–∞–π–¥–µ–Ω–æ {available_count} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª—é–¥", 
                                    warning=(available_count != len(dishes)))
            elif response.status_code == 422:
                self.results.add_test("–ü–æ–∏—Å–∫ –±–ª—é–¥ - —Ñ–∏–ª—å—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö", True, 
                                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
            else:
                self.results.add_test("–ü–æ–∏—Å–∫ –±–ª—é–¥ - —Ñ–∏–ª—å—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü–æ–∏—Å–∫ –±–ª—é–¥ - —Ñ–∏–ª—å—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö", True, 
                                "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", warning=True)
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –±–ª—é–¥
        try:
            response = await self.client.get(f"{self.runner.BASE_URL}/dishes/?is_featured=true", 
                                          headers=headers)
            if response.status_code == 200:
                dishes = response.json()
                featured_count = sum(1 for d in dishes if d.get("is_featured") is True)
                self.results.add_test("–ü–æ–∏—Å–∫ –±–ª—é–¥ - —Ñ–∏–ª—å—Ç—Ä —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö", True, 
                                    f"–ù–∞–π–¥–µ–Ω–æ {featured_count} —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –±–ª—é–¥", 
                                    warning=(featured_count != len(dishes)))
            elif response.status_code == 422:
                self.results.add_test("–ü–æ–∏—Å–∫ –±–ª—é–¥ - —Ñ–∏–ª—å—Ç—Ä —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö", True, 
                                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", warning=True)
            else:
                self.results.add_test("–ü–æ–∏—Å–∫ –±–ª—é–¥ - —Ñ–∏–ª—å—Ç—Ä —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö", False, 
                                    f"–ö–æ–¥: {response.status_code}")
        except Exception as e:
            self.results.add_test("–ü–æ–∏—Å–∫ –±–ª—é–¥ - —Ñ–∏–ª—å—Ç—Ä —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö", True, 
                                "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", warning=True)
