#!/usr/bin/env python3
"""
QRes OS 4 - Complete Test Suite Runner
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
"""
import asyncio
import time
from tests.test_base import TestRunner

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—é–∏—Ç–æ–≤
from tests.test_auth import AuthTestSuite
from tests.test_users import UsersTestSuite
from tests.test_locations import LocationsTestSuite
from tests.test_tables import TablesTestSuite
from tests.test_categories import CategoriesTestSuite
from tests.test_dishes import DishesTestSuite
from tests.test_dish_variations import DishVariationsTestSuite
from tests.test_ingredients import IngredientsTestSuite
from tests.test_payment_methods import PaymentMethodsTestSuite
from tests.test_orders import OrdersTestSuite
from tests.test_order_items import OrderItemsTestSuite


async def run_complete_test_suite():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ QRes OS 4 - –ü–û–õ–ù–´–ô –ö–û–ú–ü–õ–ï–ö–¢ –¢–ï–°–¢–û–í")
    print("=" * 70)
    print(f"‚è∞ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 70)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç-—Ä–∞–Ω–Ω–µ—Ä–∞
    runner = TestRunner()
    await runner.setup()
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—é–∏—Ç–æ–≤
    test_suites = [
        ("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", AuthTestSuite),
        ("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", UsersTestSuite),
        ("üìç –õ–æ–∫–∞—Ü–∏–∏", LocationsTestSuite),
        ("ü™ë –°—Ç–æ–ª—ã", TablesTestSuite),
        ("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", CategoriesTestSuite),
        ("üçΩÔ∏è –ë–ª—é–¥–∞", DishesTestSuite),
        ("üéõÔ∏è –í–∞—Ä–∏–∞—Ü–∏–∏ –±–ª—é–¥", DishVariationsTestSuite),
        ("ü•ï –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", IngredientsTestSuite),
        ("üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã", PaymentMethodsTestSuite),
        ("üìã –ó–∞–∫–∞–∑—ã", OrdersTestSuite),
        ("üìù –≠–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞", OrderItemsTestSuite),
    ]
    
    all_results = []
    total_tests = 0
    total_passed = 0
    total_failed = 0
    total_warnings = 0
    
    # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—é–∏—Ç–∞
    for suite_name, suite_class in test_suites:
        print(f"\n{suite_name}")
        print("-" * 50)
        
        try:
            suite = suite_class(runner)
            await suite.run_tests()
            
            # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            passed = len([t for t in suite.results.tests if t["passed"]])
            failed = len([t for t in suite.results.tests if not t["passed"] and not t.get("warning", False)])
            warnings = len([t for t in suite.results.tests if t.get("warning", False)])
            
            total_tests += len(suite.results.tests)
            total_passed += passed
            total_failed += failed
            total_warnings += warnings
            
            all_results.append({
                "name": suite_name,
                "results": suite.results,
                "passed": passed,
                "failed": failed,
                "warnings": warnings
            })
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —Å—é–∏—Ç–∞
            suite.results.print_results()
            
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ {suite_name}: {str(e)}")
            total_failed += 1
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
    print("=" * 70)
    
    for result in all_results:
        status = "‚úÖ" if result["failed"] == 0 else "‚ùå"
        warning_text = f" (‚ö†Ô∏è {result['warnings']} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π)" if result["warnings"] > 0 else ""
        print(f"{status} {result['name']}: {result['passed']}/{result['passed'] + result['failed']} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ{warning_text}")
    
    print("\n" + "-" * 70)
    print(f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   ‚úÖ –ü—Ä–æ—à–ª–æ: {total_passed}")
    print(f"   ‚ùå –ù–µ –ø—Ä–æ—à–ª–æ: {total_failed}")
    print(f"   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {total_warnings}")
    
    success_rate = (total_passed / total_tests * 100) if total_tests > 0 else 0
    print(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    print(f"\n‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    await runner.teardown()
    
    # –í–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if total_failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print(f"\nüí• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ò–õ–û–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò: {total_failed} –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
        return False


if __name__ == "__main__":
    import sys
    success = asyncio.run(run_complete_test_suite())
    sys.exit(0 if success else 1)
