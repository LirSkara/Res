"""
QRes OS 4 - Database Initialization Script
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import sys
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from app.database import init_db, AsyncSessionLocal
from app.models import User, UserRole, Location, Category, PaymentMethod
from app.services.auth import AuthService


async def create_admin_user():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async with AsyncSessionLocal() as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        admin_query = select(User).where(User.role == UserRole.ADMIN)
        admin_result = await db.execute(admin_query)
        admin_user = admin_result.scalar_one_or_none()
        
        if admin_user:
            print(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {admin_user.username}")
            return admin_user
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin = User(
            username="admin",
            password_hash=AuthService.hash_password("admin123"),
            full_name="–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            role=UserRole.ADMIN,
            is_active=True,
            shift_active=False,
            pin_code="1234"
        )
        
        db.add(admin)
        await db.commit()
        await db.refresh(admin)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin.username}")
        print(f"   –ü–∞—Ä–æ–ª—å: admin123")
        print(f"   PIN-–∫–æ–¥: 1234")
        
        return admin


async def create_demo_users(admin_user: User):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with AsyncSessionLocal() as db:
        demo_users = [
            {
                "username": "waiter1",
                "password": "waiter123",
                "full_name": "–ê–Ω–Ω–∞ –û—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤–∞",
                "role": UserRole.WAITER,
                "pin_code": "1111",
                "phone": "+7 (900) 123-45-67"
            },
            {
                "username": "chef1", 
                "password": "chef123",
                "full_name": "–ò–≤–∞–Ω –ü–æ–≤–∞—Ä–æ–≤",
                "role": UserRole.KITCHEN,
                "pin_code": "2222",
                "phone": "+7 (900) 987-65-43"
            }
        ]
        
        for user_data in demo_users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_query = select(User).where(User.username == user_data["username"])
            existing_result = await db.execute(existing_query)
            existing_user = existing_result.scalar_one_or_none()
            
            if existing_user:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user_data['username']}")
                continue
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = User(
                username=user_data["username"],
                password_hash=AuthService.hash_password(user_data["password"]),
                full_name=user_data["full_name"],
                role=user_data["role"],
                is_active=True,
                shift_active=False,
                pin_code=user_data["pin_code"],
                phone=user_data.get("phone"),
                created_by_id=admin_user.id
            )
            
            db.add(new_user)
            await db.commit()
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['username']} ({user_data['role']})")


async def create_demo_locations():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–ª–æ–∫–∞—Ü–∏–π"""
    async with AsyncSessionLocal() as db:
        demo_locations = [
            {
                "name": "–ì–ª–∞–≤–Ω—ã–π –∑–∞–ª",
                "description": "–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ª —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞",
                "color": "#4A90E2"
            },
            {
                "name": "–õ–µ—Ç–Ω—è—è –≤–µ—Ä–∞–Ω–¥–∞",
                "description": "–û—Ç–∫—Ä—ã—Ç–∞—è –≤–µ—Ä–∞–Ω–¥–∞ —Å –≤–∏–¥–æ–º –Ω–∞ —Å–∞–¥",
                "color": "#7ED321"
            },
            {
                "name": "VIP –∑–æ–Ω–∞",
                "description": "–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –∑–æ–Ω–∞ –¥–ª—è –æ—Å–æ–±—ã—Ö –≥–æ—Å—Ç–µ–π",
                "color": "#F5A623"
            }
        ]
        
        for location_data in demo_locations:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ–∫–∞—Ü–∏—è
            existing_query = select(Location).where(Location.name == location_data["name"])
            existing_result = await db.execute(existing_query)
            existing_location = existing_result.scalar_one_or_none()
            
            if existing_location:
                print(f"‚úÖ –õ–æ–∫–∞—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {location_data['name']}")
                continue
            
            # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
            new_location = Location(
                name=location_data["name"],
                description=location_data["description"],
                color=location_data["color"],
                is_active=True
            )
            
            db.add(new_location)
            await db.commit()
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: {location_data['name']}")


async def create_demo_categories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    async with AsyncSessionLocal() as db:
        demo_categories = [
            {
                "name": "–°–∞–ª–∞—Ç—ã",
                "description": "–°–≤–µ–∂–∏–µ —Å–∞–ª–∞—Ç—ã –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å",
                "sort_order": 1
            },
            {
                "name": "–°—É–ø—ã",
                "description": "–ì–æ—Ä—è—á–∏–µ –∏ —Ö–æ–ª–æ–¥–Ω—ã–µ —Å—É–ø—ã",
                "sort_order": 2
            },
            {
                "name": "–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞",
                "description": "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞ –∏–∑ –º—è—Å–∞, —Ä—ã–±—ã –∏ –ø—Ç–∏—Ü—ã",
                "sort_order": 3
            },
            {
                "name": "–î–µ—Å–µ—Ä—Ç—ã",
                "description": "–°–ª–∞–¥–∫–∏–µ –¥–µ—Å–µ—Ä—Ç—ã –∏ –≤—ã–ø–µ—á–∫–∞",
                "sort_order": 4
            },
            {
                "name": "–ù–∞–ø–∏—Ç–∫–∏",
                "description": "–ì–æ—Ä—è—á–∏–µ –∏ —Ö–æ–ª–æ–¥–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏",
                "sort_order": 5
            }
        ]
        
        for category_data in demo_categories:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            existing_query = select(Category).where(Category.name == category_data["name"])
            existing_result = await db.execute(existing_query)
            existing_category = existing_result.scalar_one_or_none()
            
            if existing_category:
                print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {category_data['name']}")
                continue
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            new_category = Category(
                name=category_data["name"],
                description=category_data["description"],
                sort_order=category_data["sort_order"],
                is_active=True
            )
            
            db.add(new_category)
            await db.commit()
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_data['name']}")


async def create_demo_payment_methods():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-—Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã"""
    async with AsyncSessionLocal() as db:
        demo_methods = [
            {"name": "–ù–∞–ª–∏—á–Ω—ã–µ"},
            {"name": "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞"},
            {"name": "Apple Pay"},
            {"name": "Google Pay"},
            {"name": "–°–ë–ü"}
        ]
        
        for method_data in demo_methods:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
            existing_query = select(PaymentMethod).where(PaymentMethod.name == method_data["name"])
            existing_result = await db.execute(existing_query)
            existing_method = existing_result.scalar_one_or_none()
            
            if existing_method:
                print(f"‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {method_data['name']}")
                continue
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
            new_method = PaymentMethod(
                name=method_data["name"],
                is_active=True
            )
            
            db.add(new_method)
            await db.commit()
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {method_data['name']}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö QRes OS 4...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_user = await create_admin_user()
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    await create_demo_users(admin_user)
    await create_demo_locations()
    await create_demo_categories()
    await create_demo_payment_methods()
    
    print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:")
    print("   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin / admin123 (PIN: 1234)")
    print("   –û—Ñ–∏—Ü–∏–∞–Ω—Ç: waiter1 / waiter123 (PIN: 1111)")
    print("   –ö—É—Ö–Ω—è: chef1 / chef123 (PIN: 2222)")
    print("\nüåê –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: uvicorn app.main:app --reload")
    print("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:8000/docs")


if __name__ == "__main__":
    asyncio.run(main())
